<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>4. Silver Cow Party</title>
    <link href="/2022/11/19/Silver%20Cow%20Party/"/>
    <url>/2022/11/19/Silver%20Cow%20Party/</url>
    
    <content type="html"><![CDATA[<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>vjudge → poj → <a href="https://vjudge.net/problem/POJ-3268">Silver Cow Party</a></p><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>One cow from each of N farms (1 ≤ N ≤ 1000) conveniently numbered 1..N is going to attend the big cow party to be held at farm #X (1 ≤ X ≤ N). A total of M (1 ≤ M ≤ 100,000) unidirectional (one-way roads connects pairs of farms; road i requires Ti (1 ≤ Ti ≤ 100) units of time to traverse.</p><p>Each cow must walk to the party and, when the party is over, return to her farm. Each cow is lazy and thus picks an optimal route with the shortest time. A cow’s return route might be different from her original route to the party since roads are one-way.</p><p>Of all the cows, what is the longest amount of time a cow must spend walking to the party and back?</p><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><p>Line 1: Three space-separated integers, respectively: N, M, and X<br>Lines 2..M+1: Line i+1 describes road i with three space-separated integers: Ai, Bi, and Ti. The described road runs from farm Ai to farm Bi, requiring Ti time units to traverse.</p><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>Line 1: One integer: the maximum of time any one cow must walk.</p><h3 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-number">4</span> <span class="hljs-number">8</span> <span class="hljs-number">2</span><br><span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">4</span><br><span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">2</span><br><span class="hljs-number">1</span> <span class="hljs-number">4</span> <span class="hljs-number">7</span><br><span class="hljs-number">2</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span><br><span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">5</span><br><span class="hljs-number">3</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span><br><span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">4</span><br><span class="hljs-number">4</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>将每一个点的最短路都求一遍，将点 $i$ 到 $x$ 与 $x$ 到 $i$ 的最短路相加($x$为目标农场，$i$为任意农场)，最后取这些最短路的最大值（因为要等所有奶牛回家），输出即可。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1010</span>, M = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> n, m, x;<br><span class="hljs-type">int</span> e[M], ne[M], w[M], h[N], dist[N], cnt;<br><span class="hljs-type">int</span> ans[N];<br><span class="hljs-type">bool</span> st[N];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> v, <span class="hljs-type">int</span> c)</span></span><br><span class="hljs-function"></span>&#123;<br>    e[++cnt] = v, w[cnt] = c, ne[cnt] = h[u], h[u] = cnt; <br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">spfa</span><span class="hljs-params">(<span class="hljs-type">int</span> op)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(dist, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> dist);<br>    dist[op] = <span class="hljs-number">0</span>;<br><br>    queue&lt;<span class="hljs-type">int</span>&gt; q;<br>    q.<span class="hljs-built_in">push</span>(op);<br><br>    <span class="hljs-keyword">while</span> (q.<span class="hljs-built_in">size</span>())<br>    &#123;<br>        <span class="hljs-type">int</span> t = q.<span class="hljs-built_in">front</span>();<br>        q.<span class="hljs-built_in">pop</span>();<br><br>        st[t] = <span class="hljs-literal">false</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[t]; i; i = ne[i])<br>        &#123;<br>            <span class="hljs-type">int</span> j = e[i];<br>            <span class="hljs-keyword">if</span> (dist[j] &gt; dist[t] + w[i])<br>            &#123;<br>                dist[j] = dist[t] + w[i];<br>                <span class="hljs-keyword">if</span> (!st[j])<br>                &#123;<br>                    q.<span class="hljs-built_in">push</span>(j);<br>                    st[j] = <span class="hljs-literal">true</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m &gt;&gt; x;<br>    <span class="hljs-type">int</span> u, v, c;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; m;++i)<br>    &#123;<br>        cin &gt;&gt; u &gt;&gt; v &gt;&gt; c;<br>        <span class="hljs-built_in">add</span>(u, v, c);   <br>    &#125;<br>    <br>    <span class="hljs-type">int</span> m = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt;= n;++i)<br>    &#123;<br>        <span class="hljs-built_in">memset</span>(st, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> st);<br>        <span class="hljs-built_in">spfa</span>(i);<br>        <span class="hljs-keyword">if</span> (i == x)<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>;j &lt;= n;++j)<br>                ans[j] += dist[j];<br>        <span class="hljs-keyword">else</span> <br>            ans[i] += dist[x];<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt;= n;++i)<br>        m = <span class="hljs-built_in">max</span>(m, ans[i]);<br>    cout &lt;&lt; m &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>kuangbin专题</category>
      
      <category>专题四 最短路练习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SPFA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>14. Find a way</title>
    <link href="/2022/11/12/Find%20a%20way/"/>
    <url>/2022/11/12/Find%20a%20way/</url>
    
    <content type="html"><![CDATA[<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>vjudge → hdu → <a href="https://vjudge.net/problem/HDU-2612">Find a way</a></p><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Pass a year learning in Hangzhou, yifenfei arrival hometown Ningbo at finally. Leave Ningbo one year, yifenfei have many people to meet. Especially a good friend Merceki.</p><p>Yifenfei’s home is at the countryside, but Merceki’s home is in the center of city. So yifenfei made arrangements with Merceki to meet at a KFC. There are many KFC in Ningbo, they want to choose one that let the total time to it be most smallest.</p><p>Now give you a Ningbo map, Both yifenfei and Merceki can move up, down ,left, right to the adjacent road by cost 11 minutes.</p><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><p>The input contains multiple test cases.</p><p>Each test case include, first two integers n, m. (2&lt;=n,m&lt;=200).</p><p>Next n lines, each line included m character.</p><p>‘Y’ express yifenfei initial position.</p><p>‘M’    express Merceki initial position.</p><p>‘#’ forbid road;</p><p>‘.’ Road.</p><p>‘@’ KCF</p><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>For each test case output the minimum total time that both yifenfei and Merceki to arrival one of KFC.You may sure there is always have a KFC that can let them meet.</p><h3 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-number">4</span> <span class="hljs-number">4</span><br>Y.#@<br>....<br>.#..<br>@..M<br><span class="hljs-number">4</span> <span class="hljs-number">4</span><br>Y.#@<br>....<br>.#..<br>@#.M<br><span class="hljs-number">5</span> <span class="hljs-number">5</span><br>Y..@.<br>.#...<br>.#...<br>@..M.<br>#...#<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-number">66</span><br><span class="hljs-number">88</span><br><span class="hljs-number">66</span><br></code></pre></td></tr></table></figure><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>这题的意思就是Y和M同时出发，寻找一个@，使Y→@+M→@路程和最小，所以我们对Y和M分别进行一次BFS再相加就可以了。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; pii;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> inf = <span class="hljs-number">1e9</span>;<br><span class="hljs-type">int</span> n, m, yc, mc;<br><span class="hljs-type">char</span> maze[<span class="hljs-number">203</span>][<span class="hljs-number">203</span>];<br><span class="hljs-type">int</span> dis[<span class="hljs-number">203</span>][<span class="hljs-number">203</span>];<br><span class="hljs-type">bool</span> vis[<span class="hljs-number">203</span>][<span class="hljs-number">203</span>];<br><span class="hljs-type">int</span> turn[<span class="hljs-number">4</span>][<span class="hljs-number">2</span>] = &#123;&#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-number">0</span>, <span class="hljs-number">-1</span>&#125;, &#123;<span class="hljs-number">-1</span>, <span class="hljs-number">0</span>&#125;, &#123;<span class="hljs-number">1</span>, <span class="hljs-number">0</span>&#125;&#125;;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span><br>&#123;<br>    <span class="hljs-type">int</span> i, j, cost;<br>&#125; node;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">bfs</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span></span><br><span class="hljs-function"></span>&#123;<br>    node init;<br>    queue&lt;node&gt; q;<br>    init.i = i, init.j = j, init.cost = <span class="hljs-number">0</span>;<br>    vis[i][j] = <span class="hljs-literal">true</span>;<br>    q.<span class="hljs-built_in">push</span>(init);<br><br>    <span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>())<br>    &#123;<br>        node x = q.<span class="hljs-built_in">front</span>();<br>        q.<span class="hljs-built_in">pop</span>();<br><br>        <span class="hljs-keyword">if</span> (maze[x.i][x.j] == <span class="hljs-string">&#x27;@&#x27;</span>) dis[x.i][x.j] += x.cost;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> t = <span class="hljs-number">0</span>;t &lt; <span class="hljs-number">4</span>;++t)<br>        &#123;<br>            <span class="hljs-type">int</span> a = x.i + turn[t][<span class="hljs-number">0</span>], b = x.j + turn[t][<span class="hljs-number">1</span>];<br>            <span class="hljs-keyword">if</span> (a &lt; <span class="hljs-number">0</span> || a &gt;= n || b &lt; <span class="hljs-number">0</span> || b &gt;= m) <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">if</span> (maze[a][b] == <span class="hljs-string">&#x27;#&#x27;</span>) <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">if</span> (!vis[a][b])<br>            &#123;<br>                vis[a][b] = <span class="hljs-literal">true</span>;<br>                node ne;<br>                ne.i = a, ne.j = b, ne.cost = x.cost + <span class="hljs-number">1</span>;<br>                q.<span class="hljs-built_in">push</span>(ne);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span> (cin &gt;&gt; n &gt;&gt; m)<br>    &#123;<br>        <span class="hljs-type">int</span> yi, yj, mi, mj;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; n;++i)<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;j &lt; m;++j)<br>            &#123;<br>                cin &gt;&gt; maze[i][j];<br>                <span class="hljs-keyword">if</span> (maze[i][j] == <span class="hljs-string">&#x27;Y&#x27;</span>)  yi = i, yj = j;<br>                <span class="hljs-keyword">if</span> (maze[i][j] == <span class="hljs-string">&#x27;M&#x27;</span>)  mi = i, mj = j;<br>            &#125;<br>        <br>        <span class="hljs-type">int</span> ans = inf;<br>        <span class="hljs-built_in">memset</span>(dis, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> dis);<br>        <span class="hljs-built_in">memset</span>(vis, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> vis);<br>        <span class="hljs-built_in">bfs</span>(yi, yj);<br>        <span class="hljs-built_in">memset</span>(vis, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> vis);<br>        <span class="hljs-built_in">bfs</span>(mi, mj);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; n;++i)<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;j &lt; m;++j)<br>                <span class="hljs-keyword">if</span> (dis[i][j]) ans = <span class="hljs-built_in">min</span>(dis[i][j], ans);<br>        cout &lt;&lt; ans * <span class="hljs-number">11</span> &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>kuangbin专题</category>
      
      <category>专题一 简单搜索</category>
      
    </categories>
    
    
    <tags>
      
      <tag>BFS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>13. 非常可乐</title>
    <link href="/2022/11/12/%E9%9D%9E%E5%B8%B8%E5%8F%AF%E4%B9%90/"/>
    <url>/2022/11/12/%E9%9D%9E%E5%B8%B8%E5%8F%AF%E4%B9%90/</url>
    
    <content type="html"><![CDATA[<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>vjudge → hdu → <a href="https://vjudge.net/problem/HDU-1495">非常可乐</a></p><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>大家一定觉的运动以后喝可乐是一件很惬意的事情，但是seeyou却不这么认为。因为每次当seeyou买了可乐以后，阿牛就要求和seeyou一起分享这一瓶可乐，而且一定要喝的和seeyou一样多。但seeyou的手中只有两个杯子，它们的容量分别是N 毫升和M 毫升 可乐的体积为S （S&lt;101）毫升　(正好装满一瓶) ，它们三个之间可以相互倒可乐 (都是没有刻度的，且 S==N+M，101＞S＞0，N＞0，M＞0) 。聪明的ACMER你们说他们能平分吗？如果能请输出倒可乐的最少的次数，如果不能输出”NO”。</p><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><p>三个整数 : S 可乐的体积 , N 和 M是两个杯子的容量，以”0 0 0”结束。</p><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>如果能平分的话请输出最少要倒的次数，否则输出”NO”。</p><h3 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-number">7</span> <span class="hljs-number">4</span> <span class="hljs-number">3</span><br><span class="hljs-number">4</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span><br><span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">NO<br><span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>首先，奇数s是没有办法平分的，可以先排除一部分样例，然后一共有六种倒水方式</p><p>s→a</p><p>s→b</p><p>a→s</p><p>b→s</p><p>a→b</p><p>b→a</p><p>bfs模拟一遍，若队列q清空仍无结果，则不存在。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> s, a, b;<br><span class="hljs-type">bool</span> vis[<span class="hljs-number">103</span>][<span class="hljs-number">103</span>][<span class="hljs-number">103</span>];<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span><br>&#123;<br>    <span class="hljs-type">int</span> s, a, b, cost;<br>&#125; node;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    node init;<br>    queue&lt;node&gt; q;<br>    init.s = s, init.a = <span class="hljs-number">0</span>, init.b = <span class="hljs-number">0</span>, init.cost = <span class="hljs-number">0</span>;<br>    q.<span class="hljs-built_in">push</span>(init);<br><br>    <span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>())<br>    &#123;<br>        node x = q.<span class="hljs-built_in">front</span>(), tmp;<br>        q.<span class="hljs-built_in">pop</span>();<br><br>        <span class="hljs-keyword">if</span> ((x.s == x.a &amp;&amp; x.s == s / <span class="hljs-number">2</span>) || (x.a == x.b &amp;&amp; x.a == s / <span class="hljs-number">2</span>) || (x.s == x.b &amp;&amp; x.s == s / <span class="hljs-number">2</span>))<br>            <span class="hljs-keyword">return</span> x.cost;<br><br>        x.cost += <span class="hljs-number">1</span>;<br><br>        <br>        tmp = x;<br>        tmp.a += tmp.s;<br>        tmp.s = tmp.a - a;<br>        tmp.a = tmp.a &gt; a ? a : tmp.a;<br>        <span class="hljs-keyword">if</span> (!vis[tmp.s][tmp.a][tmp.b])<br>        &#123;<br>            vis[tmp.s][tmp.a][tmp.b] = <span class="hljs-literal">true</span>;<br>            q.<span class="hljs-built_in">push</span>(tmp);<br>        &#125;<br><br>        tmp = x;<br>        tmp.b += tmp.s;<br>        tmp.s = tmp.b - b;<br>        tmp.b = tmp.b &gt; b ? b : tmp.b;<br>        <span class="hljs-keyword">if</span> (!vis[tmp.s][tmp.a][tmp.b])<br>        &#123;<br>            vis[tmp.s][tmp.a][tmp.b] = <span class="hljs-literal">true</span>;<br>            q.<span class="hljs-built_in">push</span>(tmp);<br>        &#125;<br><br>        tmp = x;<br>        tmp.s += tmp.a;<br>        tmp.a = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> (!vis[tmp.s][tmp.a][tmp.b])<br>        &#123;<br>            vis[tmp.s][tmp.a][tmp.b] = <span class="hljs-literal">true</span>;<br>            q.<span class="hljs-built_in">push</span>(tmp);<br>        &#125;<br><br>        tmp = x;<br>        tmp.s += tmp.b;<br>        tmp.b = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> (!vis[tmp.s][tmp.a][tmp.b])<br>        &#123;<br>            vis[tmp.s][tmp.a][tmp.b] = <span class="hljs-literal">true</span>;<br>            q.<span class="hljs-built_in">push</span>(tmp);<br>        &#125;<br><br>        tmp = x;<br>        <span class="hljs-type">int</span> tb = tmp.a + tmp.b;<br>        <span class="hljs-keyword">if</span> (tb &lt;= b) tmp.b = tb, tmp.a = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">else</span> tmp.b = b, tmp.a = tb - b; <br>        <span class="hljs-keyword">if</span> (!vis[tmp.s][tmp.a][tmp.b])<br>        &#123;<br>            vis[tmp.s][tmp.a][tmp.b] = <span class="hljs-literal">true</span>;<br>            q.<span class="hljs-built_in">push</span>(tmp);<br>        &#125;<br><br>        tmp = x;<br>        <span class="hljs-type">int</span> ta = tmp.a + tmp.b;<br>        <span class="hljs-keyword">if</span> (ta &lt;= a) tmp.a = ta, tmp.b = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">else</span> tmp.a = a, tmp.b = ta - a; <br>        <span class="hljs-keyword">if</span> (!vis[tmp.s][tmp.a][tmp.b])<br>        &#123;<br>            vis[tmp.s][tmp.a][tmp.b] = <span class="hljs-literal">true</span>;<br>            q.<span class="hljs-built_in">push</span>(tmp);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span> (cin &gt;&gt; s &gt;&gt; a &gt;&gt; b &amp;&amp; s &amp;&amp; a &amp;&amp; b)<br>    &#123;<br>        <span class="hljs-built_in">memset</span>(vis, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> vis);<br>        <span class="hljs-type">int</span> ans = <span class="hljs-built_in">bfs</span>();<br>        <span class="hljs-keyword">if</span> (s % <span class="hljs-number">2</span> || ans == <span class="hljs-number">-1</span>) cout &lt;&lt; <span class="hljs-string">&quot;NO&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">else</span> cout &lt;&lt; ans &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>kuangbin专题</category>
      
      <category>专题一 简单搜索</category>
      
    </categories>
    
    
    <tags>
      
      <tag>BFS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1. A计划</title>
    <link href="/2022/11/10/A%E8%AE%A1%E5%88%92/"/>
    <url>/2022/11/10/A%E8%AE%A1%E5%88%92/</url>
    
    <content type="html"><![CDATA[<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>acwing → <a href="https://www.acwing.com/problem/content/4236/">A计划</a></p><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>可怜的公主在一次次被魔王掳走一次次被骑士们救回来之后，而今，不幸的她再一次面临生命的考验。魔王已经发出消息说将在T时刻吃掉公主，因为他听信谣言说吃公主的肉也能长生不老。年迈的国王正是心急如焚，告招天下勇士来拯救公主。不过公主早已习以为常，她深信智勇的骑士LJ肯定能将她救出。</p><p>现据密探所报，公主被关在一个两层的迷宫里，迷宫的入口是S（0，0，0），公主的位置用P表示，时空传输机用#表示，墙用*表示，平地用.表示。骑士们一进入时空传输机就会被转到另一层的相对位置，但如果被转到的位置是墙的话，那骑士们就会被撞死。骑士们在一层中只能前后左右移动，每移动一格花1时刻。层间的移动只能通过时空传输机，且不需要任何时间。</p><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><p>输入的第一行C表示共有C个测试数据，每个测试数据的前一行有三个整数N，M，T。 N，M迷宫的大小N<em>M（1 &lt;= N,M &lt;=10)。T如上所意。接下去的前N</em>M表示迷宫的第一层的布置情况，后N*M表示迷宫第二层的布置情况。</p><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>如果骑士们能够在T时刻能找到公主就输出“YES”，否则输出“NO”。</p><h3 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-number">1</span><br><span class="hljs-number">5</span> <span class="hljs-number">5</span> <span class="hljs-number">14</span><br>S*#*.<br>.#...<br>.....<br>****.<br>...#.<br><br>..*.P<br>#.*..<br>***..<br>...*.<br>*.#..<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">YES<br></code></pre></td></tr></table></figure><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>个人觉得这题需要注意的点：</p><ol><li>踏入 <strong>#</strong> 则意味着时空传输，若两层都为 <strong>#</strong> 那你就寄在时空里了</li><li>使用时空传输机时是不需要时间的，记得判断</li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> T;<br><span class="hljs-type">int</span> n, m, t;<br><span class="hljs-type">char</span> maze[<span class="hljs-number">2</span>][<span class="hljs-number">13</span>][<span class="hljs-number">13</span>];<br><span class="hljs-type">bool</span> vis[<span class="hljs-number">2</span>][<span class="hljs-number">13</span>][<span class="hljs-number">13</span>];<br><span class="hljs-type">int</span> turn[<span class="hljs-number">4</span>][<span class="hljs-number">2</span>] = &#123;&#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-number">0</span>, <span class="hljs-number">-1</span>&#125;, &#123;<span class="hljs-number">1</span>, <span class="hljs-number">0</span>&#125;, &#123;<span class="hljs-number">-1</span>, <span class="hljs-number">0</span>&#125;&#125;;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span><br>&#123;<br>    <span class="hljs-type">int</span> i, j, k, cost;<br>&#125; node;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    queue&lt;node&gt; q;<br>    node init;<br>    init.i = <span class="hljs-number">0</span>, init.j = <span class="hljs-number">0</span>, init.k = <span class="hljs-number">0</span>, init.cost = <span class="hljs-number">0</span>;<br>    vis[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-literal">true</span>;<br>    q.<span class="hljs-built_in">push</span>(init);<br><br>    <span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>())<br>    &#123;<br>        node x = q.<span class="hljs-built_in">front</span>();<br>        q.<span class="hljs-built_in">pop</span>();<br><br>        <span class="hljs-keyword">if</span> (maze[x.i][x.j][x.k] == <span class="hljs-string">&#x27;P&#x27;</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (x.cost &lt;= t) cout &lt;&lt; <span class="hljs-string">&quot;YES&quot;</span> &lt;&lt; endl;<br>            <span class="hljs-keyword">else</span> cout &lt;&lt; <span class="hljs-string">&quot;NO&quot;</span> &lt;&lt; endl;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">4</span>;++i)<br>        &#123;<br>            <span class="hljs-type">int</span> a = x.i, b = x.j + turn[i][<span class="hljs-number">0</span>], c = x.k + turn[i][<span class="hljs-number">1</span>];<br>            <span class="hljs-keyword">if</span> (b &lt; <span class="hljs-number">0</span> || b &gt;= n || c &lt; <span class="hljs-number">0</span> || c &gt;= m) <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">if</span> (vis[a][b][c] || maze[a][b][c] == <span class="hljs-string">&#x27;*&#x27;</span>) <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">if</span> (maze[a][b][c] == <span class="hljs-string">&#x27;#&#x27;</span> &amp;&amp; (maze[a^<span class="hljs-number">1</span>][b][c] == <span class="hljs-string">&#x27;#&#x27;</span> || maze[a^<span class="hljs-number">1</span>][b][c] == <span class="hljs-string">&#x27;*&#x27;</span>))<br>            &#123;<br>                maze[a][b][c] = <span class="hljs-string">&#x27;*&#x27;</span>, maze[a^<span class="hljs-number">1</span>][b][c] = <span class="hljs-string">&#x27;*&#x27;</span>;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br><br>            node tmp;<br>            tmp.i = a, tmp.j = b, tmp.k = c, tmp.cost = x.cost + <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (maze[a][b][c] == <span class="hljs-string">&#x27;#&#x27;</span>) tmp.i ^= <span class="hljs-number">1</span>, vis[a^<span class="hljs-number">1</span>][b][c] = <span class="hljs-literal">true</span>;<br>            vis[a][b][c] = <span class="hljs-literal">true</span>;<br>            q.<span class="hljs-built_in">push</span>(tmp);<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; <span class="hljs-string">&quot;NO&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; T;<br>    <span class="hljs-keyword">while</span> (T--)<br>    &#123;<br>        <span class="hljs-built_in">memset</span>(vis, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> vis);<br>        cin &gt;&gt; n &gt;&gt; m &gt;&gt; t;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; n;++i)<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j&lt; m;++j)<br>                cin &gt;&gt; maze[<span class="hljs-number">0</span>][i][j];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; n;++i)<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j&lt; m;++j)<br>                cin &gt;&gt; maze[<span class="hljs-number">1</span>][i][j];<br>        <span class="hljs-built_in">bfs</span>();<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>kuangbin专题</category>
      
      <category>专题二 搜索进阶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>BFS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>12. Oil Deposits</title>
    <link href="/2022/11/10/Oil%20Deposits/"/>
    <url>/2022/11/10/Oil%20Deposits/</url>
    
    <content type="html"><![CDATA[<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>poj → <a href="https://vjudge.net/problem/POJ-1562">Oil Deposits</a></p><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>The GeoSurvComp geologic survey company is responsible for detecting underground oil deposits. GeoSurvComp works with one large rectangular region of land at a time, and creates a grid that divides the land into numerous square plots. It then analyzes each plot separately, using sensing equipment to determine whether or not the plot contains oil. A plot containing oil is called a pocket. If two pockets are adjacent, then they are part of the same oil deposit. Oil deposits can be quite large and may contain numerous pockets. Your job is to determine how many different oil deposits are contained in a grid.</p><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><p>The input contains one or more grids. Each grid begins with a line containing m and n, the number of rows and columns in the grid, separated by a single space. If m = 0 it signals the end of the input; otherwise 1 &lt;= m &lt;= 100 and 1 &lt;= n &lt;= 100. Following this are m lines of n characters each (not counting the end-of-line characters). Each character corresponds to one plot, and is either ‘ * ’, representing the absence of oil, or ‘@’, representing an oil pocket.</p><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>are adjacent horizontally, vertically, or diagonally. An oil deposit will not contain more than 100 pockets.</p><h3 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-number">1</span> <span class="hljs-number">1</span><br>*<br><span class="hljs-number">3</span> <span class="hljs-number">5</span><br>*@*@*<br>**@**<br>*@*@*<br><span class="hljs-number">1</span> <span class="hljs-number">8</span><br>@@****@*<br><span class="hljs-number">5</span> <span class="hljs-number">5</span> <br>****@<br>*@@*@<br>*@**@<br>@@@*@<br>@@**@<br><span class="hljs-number">0</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-number">0</span><br><span class="hljs-number">1</span><br><span class="hljs-number">2</span><br><span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>一般的迷宫问题可走 上下左右 四个方向， 这题相当于迷宫问题的1.5升级版，可走八个方向，每次走完将油田清空，判断能走几次就可以了</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> n, m, ans;<br><span class="hljs-type">char</span> maze[<span class="hljs-number">107</span>][<span class="hljs-number">107</span>];<br><span class="hljs-type">int</span> turn[<span class="hljs-number">9</span>][<span class="hljs-number">2</span>] = &#123;&#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;, &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-number">0</span>, <span class="hljs-number">-1</span>&#125;, &#123;<span class="hljs-number">1</span>, <span class="hljs-number">0</span>&#125;, &#123;<span class="hljs-number">-1</span>, <span class="hljs-number">0</span>&#125;, &#123;<span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>&#125;, &#123;<span class="hljs-number">-1</span>, <span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-number">1</span>, <span class="hljs-number">-1</span>&#125;, &#123;<span class="hljs-number">1</span>, <span class="hljs-number">1</span>&#125;&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> t = <span class="hljs-number">0</span>;t &lt; <span class="hljs-number">9</span>;++t)<br>    &#123;<br>        <span class="hljs-type">int</span> x = i + turn[t][<span class="hljs-number">0</span>], y = j + turn[t][<span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">0</span> || x &gt;= n || y &lt; <span class="hljs-number">0</span> || y &gt;= m) <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-keyword">if</span> (maze[x][y] == <span class="hljs-string">&#x27;@&#x27;</span>)<br>        &#123;<br>            maze[x][y] = <span class="hljs-string">&#x27;*&#x27;</span>;<br>            <span class="hljs-built_in">dfs</span>(x, y);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">sovle</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; n;++i)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;j &lt; m;++j)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (maze[i][j] == <span class="hljs-string">&#x27;@&#x27;</span>)<br>            &#123; <br>                <span class="hljs-built_in">dfs</span>(i, j);<br>                cnt++;<br>            &#125;<br>        &#125;<br>    ans = cnt;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span> (cin &gt;&gt; n &gt;&gt; m &amp;&amp; (n || m))<br>    &#123; <br>        ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; n;++i)<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;j &lt; m;++j)<br>                cin &gt;&gt; maze[i][j];<br>        <span class="hljs-built_in">sovle</span>();<br>        cout &lt;&lt; ans &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>kuangbin专题</category>
      
      <category>专题一 简单搜索</category>
      
    </categories>
    
    
    <tags>
      
      <tag>DFS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>11. 迷宫问题</title>
    <link href="/2022/11/10/%E8%BF%B7%E5%AE%AB%E9%97%AE%E9%A2%98/"/>
    <url>/2022/11/10/%E8%BF%B7%E5%AE%AB%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>poj → <a href="https://vjudge.net/problem/POJ-3984">迷宫问题</a></p><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>定义一个二维数组：</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">int maze[<span class="hljs-number">5</span>][<span class="hljs-number">5</span>] = &#123;<br><span class="hljs-built_in">0,</span> <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,<br><span class="hljs-built_in">0,</span> <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>,<br><span class="hljs-built_in">0,</span> <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,<br><span class="hljs-built_in">0,</span> <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>,<br><span class="hljs-built_in">0,</span> <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>,<br>&#125;<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>它表示一个迷宫，其中的1表示墙壁，0表示可以走的路，只能横着走或竖着走，不能斜着走，要求编程序找出从左上角到右下角的最短路线。</p><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><p>一个5 × 5的二维数组，表示一个迷宫。数据保证有唯一解。</p><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>左上角到右下角的最短路径，格式如样例所示。</p><h3 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span><br><span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span><br><span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span><br><span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span><br><span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp">(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>)<br>(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>)<br>(<span class="hljs-number">2</span>, <span class="hljs-number">0</span>)<br>(<span class="hljs-number">2</span>, <span class="hljs-number">1</span>)<br>(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>)<br>(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br>(<span class="hljs-number">2</span>, <span class="hljs-number">4</span>)<br>(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>)<br>(<span class="hljs-number">4</span>, <span class="hljs-number">4</span>)<br></code></pre></td></tr></table></figure><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>个人认为是最标准最基础的一道BFS搜索题目，应该放在第一题的位置</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; pii;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">20</span>;<br><span class="hljs-type">int</span> n,m; <span class="hljs-comment">// n * m</span><br><span class="hljs-type">char</span> maze[N][N];<br><span class="hljs-type">bool</span> vis[N][N];<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">path</span><br>&#123;<br><span class="hljs-type">int</span> i, j, cost;<br>vector&lt;pii&gt; rec;<br>&#125; path;<br><br><span class="hljs-function">path <span class="hljs-title">bfs</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>path init, ans;<br>    pii i_T;<br>    i_T.first = x, i_T.second = y;<br>init.i = x, init.j = y, init.cost = <span class="hljs-number">0</span>, init.rec.<span class="hljs-built_in">push_back</span>(i_T);<br>queue&lt;path&gt; q;<br>q.<span class="hljs-built_in">push</span>(init);<br><br><span class="hljs-built_in">memset</span>(vis, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> vis);<br><span class="hljs-type">int</span> f[<span class="hljs-number">4</span>][<span class="hljs-number">2</span>] = &#123;&#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-number">0</span>, <span class="hljs-number">-1</span>&#125;, &#123;<span class="hljs-number">1</span>, <span class="hljs-number">0</span>&#125;, &#123;<span class="hljs-number">-1</span>, <span class="hljs-number">0</span>&#125;&#125;;<br><br><span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>())<br>&#123;<br>path now = q.<span class="hljs-built_in">front</span>();<br>q.<span class="hljs-built_in">pop</span>();<br><span class="hljs-type">int</span> i = now.i, j = now.j, c = now.cost;<br>vector&lt;pii&gt; load = now.rec;<br><span class="hljs-keyword">if</span> (i == n - <span class="hljs-number">1</span> &amp;&amp; j == m - <span class="hljs-number">1</span>) <br>&#123;<br>ans = now;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><br>vis[i][j] = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> t = <span class="hljs-number">0</span>;t &lt; <span class="hljs-number">4</span>;++t)<br>&#123;<br><span class="hljs-type">int</span> a = i + f[t][<span class="hljs-number">0</span>], b = j + f[t][<span class="hljs-number">1</span>];<br><span class="hljs-keyword">if</span> (!vis[a][b] &amp;&amp; maze[a][b] == <span class="hljs-string">&#x27;0&#x27;</span>)<br>&#123;<br>path newp;<br>newp.i = a, newp.j = b, newp.cost = c + <span class="hljs-number">1</span>;<br>                pii tmp;<br>                tmp.first = a, tmp.second = b;<br>load.<span class="hljs-built_in">push_back</span>(tmp);<br>newp.rec = load;<br>q.<span class="hljs-built_in">push</span>(newp);<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  n = <span class="hljs-number">5</span>, m = <span class="hljs-number">5</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; n;++i)<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;j &lt; m;++j)<br>cin &gt;&gt; maze[i][j];<br><br>path ans;<br>ans = <span class="hljs-built_in">bfs</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; ans.rec.<span class="hljs-built_in">size</span>();++i)<br>cout &lt;&lt; <span class="hljs-string">&quot;(&quot;</span> &lt;&lt; ans.rec[i].first &lt;&lt; <span class="hljs-string">&quot;, &quot;</span> &lt;&lt; ans.rec[i].second &lt;&lt; <span class="hljs-string">&quot;)&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>kuangbin专题</category>
      
      <category>专题一 简单搜索</category>
      
    </categories>
    
    
    <tags>
      
      <tag>BFS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>8. Pots</title>
    <link href="/2022/11/06/Pots/"/>
    <url>/2022/11/06/Pots/</url>
    
    <content type="html"><![CDATA[<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://vjudge.net/problem/POJ-3414">Pots</a></p><p><a href="https://www.acwing.com/problem/content/4225/">罐子</a></p><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>You are given two pots, having the volume of <strong>A</strong> and <strong>B</strong> liters respectively. The following operations can be performed:</p><ol><li>FILL(i) fill the pot <strong>i</strong> (1 ≤ <strong>i</strong> ≤ 2) from the tap;</li><li>DROP(i) empty the pot <strong>i</strong> to the drain;</li><li>POUR(i,j) pour from pot <strong>i</strong> to pot <strong>j</strong>; after this operation either the pot <strong>j</strong> is full (and there may be some water left in the pot <strong>i</strong>), or the pot <strong>i</strong> is empty (and all its contents have been moved to the pot <strong>j</strong>).</li></ol><p>Write a program to find the shortest possible sequence of these operations that will yield exactly <strong>C</strong> liters of water in one of the pots.</p><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><p>On the first and only line are the numbers <strong>A</strong>, <strong>B</strong>, and <strong>C</strong>. These are all integers in the range from 1 to 100 and <strong>C</strong>≤max(<strong>A</strong>,<strong>B</strong>).</p><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>The first line of the output must contain the length of the sequence of operations <strong>K</strong><br>. The following <strong>K</strong> lines must each describe one operation. If there are several sequences of minimal length, output any one of them. If the desired result can’t be achieved, the first and only line of the file must contain the word ‘<strong>impossible</strong>’.</p><h3 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-number">3</span> <span class="hljs-number">5</span> <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-number">6</span><br><span class="hljs-built_in">FILL</span>(<span class="hljs-number">2</span>)<br><span class="hljs-built_in">POUR</span>(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>)<br><span class="hljs-built_in">DROP</span>(<span class="hljs-number">1</span>)<br><span class="hljs-built_in">POUR</span>(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>)<br><span class="hljs-built_in">FILL</span>(<span class="hljs-number">2</span>)<br><span class="hljs-built_in">POUR</span>(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> a, b, x, ans;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">pots</span><br>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; opera;<br>    <span class="hljs-type">int</span> pa, pb;<br>    <span class="hljs-type">int</span> cost;<br>&#125; pots;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">107</span>;<br><span class="hljs-type">bool</span> st[N][N];<br>queue&lt;pots&gt; q;<br>string output[<span class="hljs-number">6</span>] = &#123;<span class="hljs-string">&quot;FILL(1)&quot;</span>, <span class="hljs-string">&quot;FILL(2)&quot;</span>, <span class="hljs-string">&quot;POUR(1,2)&quot;</span>, <span class="hljs-string">&quot;POUR(2,1)&quot;</span>, <span class="hljs-string">&quot;DROP(1)&quot;</span>, <span class="hljs-string">&quot;DROP(2)&quot;</span>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    pots init;<br>    init.pa = <span class="hljs-number">0</span>, init.pb = <span class="hljs-number">0</span>, init.cost = <span class="hljs-number">0</span>;<br>    q.<span class="hljs-built_in">push</span>(init);<br>    st[init.pa][init.pb] = <span class="hljs-literal">true</span>;<br><br>    <span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>())<br>    &#123;<br>        pots now = q.<span class="hljs-built_in">front</span>(); <br>        q.<span class="hljs-built_in">pop</span>();<br>        pots np = now;<br>        <span class="hljs-keyword">if</span> (np.pa == x || np.pb == x)<br>        &#123;<br>            cout &lt;&lt; np.cost &lt;&lt; endl;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; np.cost; ++i)<br>                cout &lt;&lt; output[np.opera[i]] &lt;&lt; endl;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (now.pa != a)<br>        &#123;<br>            np.opera.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">0</span>);<br>            np.pa = a;<br>            np.cost += <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (!st[np.pa][np.pb]) q.<span class="hljs-built_in">push</span>(np), st[np.pa][np.pb] = <span class="hljs-literal">true</span>;<br>        &#125;<br><br>        np = now;<br>        <span class="hljs-keyword">if</span> (now.pb != b)<br>        &#123;<br>            np.opera.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">1</span>);<br>            np.pb = b;<br>            np.cost += <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (!st[np.pa][np.pb]) q.<span class="hljs-built_in">push</span>(np), st[np.pa][np.pb] = <span class="hljs-literal">true</span>;<br>        &#125;<br><br>        np = now;<br>        <span class="hljs-keyword">if</span> (now.pa != <span class="hljs-number">0</span>)<br>        &#123;<br>            np.opera.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">2</span>);<br>            <span class="hljs-type">int</span> tp = b - np.pb;<br>            <span class="hljs-keyword">if</span> (tp &gt;= np.pa)<br>            &#123;<br>                np.pb += np.pa;<br>                np.pa = <span class="hljs-number">0</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                np.pa -= tp;<br>                np.pb = b;<br>            &#125;<br>            np.cost += <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (!st[np.pa][np.pb]) q.<span class="hljs-built_in">push</span>(np), st[np.pa][np.pb] = <span class="hljs-literal">true</span>;<br>        &#125;<br><br>        np = now;<br>        <span class="hljs-keyword">if</span> (now.pb != <span class="hljs-number">0</span>)<br>        &#123;<br>            np.opera.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">3</span>);<br>            <span class="hljs-type">int</span> tp = a - np.pa;<br>            <span class="hljs-keyword">if</span> (tp &gt;= np.pb)<br>            &#123;<br>                np.pa += np.pb;<br>                np.pb = <span class="hljs-number">0</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                np.pb -= tp;<br>                np.pa = a;<br>            &#125;<br>            np.cost += <span class="hljs-number">1</span>;<br>             <span class="hljs-keyword">if</span> (!st[np.pa][np.pb]) q.<span class="hljs-built_in">push</span>(np), st[np.pa][np.pb] = <span class="hljs-literal">true</span>;<br>        &#125;<br><br>        np = now;<br>        <span class="hljs-keyword">if</span> (now.pa != <span class="hljs-number">0</span>)<br>        &#123;<br>            np.opera.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">4</span>);<br>            np.pa = <span class="hljs-number">0</span>;<br>            np.cost += <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (!st[np.pa][np.pb]) q.<span class="hljs-built_in">push</span>(np), st[np.pa][np.pb] = <span class="hljs-literal">true</span>;<br>        &#125;<br><br>        np = now;<br>        <span class="hljs-keyword">if</span> (now.pb != <span class="hljs-number">0</span>)<br>        &#123;<br>            np.opera.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">5</span>);<br>            np.pb = <span class="hljs-number">0</span>;<br>            np.cost += <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (!st[np.pa][np.pb]) q.<span class="hljs-built_in">push</span>(np), st[np.pa][np.pb] = <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; <span class="hljs-string">&quot;impossible&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; a &gt;&gt; b &gt;&gt; x;<br>    <span class="hljs-built_in">bfs</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>kuangbin专题</category>
      
      <category>专题一 简单搜索</category>
      
    </categories>
    
    
    <tags>
      
      <tag>BFS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>7. Shuffle&#39;m Up</title>
    <link href="/2022/11/05/Shuffle&#39;m%20Up/"/>
    <url>/2022/11/05/Shuffle&#39;m%20Up/</url>
    
    <content type="html"><![CDATA[<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://vjudge.net/problem/POJ-3087">Shuffle’m Up</a></p><p><a href="https://www.acwing.com/problem/content/4224/">洗牌</a></p><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>A common pastime for poker players at a poker table is to shuffle stacks of chips. Shuffling chips is performed by starting with two stacks of poker chips, <strong>S1</strong> and <strong>S2</strong>, each stack containing <em><strong>C</strong></em> chips. Each stack may contain chips of several different colors.</p><p>The actual shuffle operation is performed by interleaving a chip from <strong>S1</strong> with a chip from <strong>S2</strong> as shown below for <em><strong>C</strong></em> = 5:</p><p><img src="https://vj.csgrandeur.cn/389bf36422a0aaefc070870a6b91ed01?v=1667402579" alt="Sample"></p><p>The single resultant stack, <strong>S12</strong>, contains 2 * <em><strong>C</strong></em> chips. The bottommost chip of <strong>S12</strong> is the bottommost chip from <strong>S2</strong>. On top of that chip, is the bottommost chip from <strong>S1</strong>. The interleaving process continues taking the 2nd chip from the bottom of <strong>S2</strong> and placing that on <strong>S12</strong>, followed by the 2nd chip from the bottom of <strong>S1</strong> and so on until the topmost chip from <strong>S1</strong> is placed on top of <strong>S12</strong>.</p><p>After the shuffle operation, <strong>S12</strong> is split into 2 new stacks by taking the bottommost <em><strong>C</strong></em> chips from <strong>S12</strong> to form a new <strong>S1</strong> and the topmost <em><strong>C</strong></em> chips from <strong>S12</strong> to form a new <strong>S2</strong>. The shuffle operation may then be repeated to form a new <strong>S12</strong>.</p><p>For this problem, you will write a program to determine if a particular resultant stack <strong>S12</strong> can be formed by shuffling two stacks some number of times.</p><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><p>The first line of input contains a single integer <em><strong>N</strong></em>, (1 ≤ <em><strong>N</strong></em> ≤ 1000) which is the number of datasets that follow.</p><p>Each dataset consists of four lines of input. The first line of a dataset specifies an integer <em><strong>C</strong></em>, (1 ≤ <em><strong>C</strong></em> ≤ 100) which is the number of chips in each initial stack (<strong>S1</strong> and <strong>S2</strong>). The second line of each dataset specifies the colors of each of the <em><strong>C</strong></em> chips in stack <strong>S1</strong>, starting with the bottommost chip. The third line of each dataset specifies the colors of each of the <em><strong>C</strong></em> chips in stack <strong>S2</strong> starting with the bottommost chip. Colors are expressed as a single uppercase letter (<strong>A</strong> through <strong>H</strong>). There are no blanks or separators between the chip colors. The fourth line of each dataset contains 2 * <em><strong>C</strong></em> uppercase letters (<strong>A</strong> through <strong>H</strong>), representing the colors of the desired result of the shuffling of <strong>S1</strong> and <strong>S2</strong> zero or more times. The bottommost chip’s color is specified first.</p><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>Output for each dataset consists of a single line that displays the dataset number (1 though <em><strong>N</strong></em>), a space, and an integer value which is the minimum number of shuffle operations required to get the desired resultant stack. If the desired result can not be reached using the input for the dataset, display the value negative 1 (<strong>−1</strong>) for the number of shuffle operations.</p><h3 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-number">2</span><br><span class="hljs-number">4</span><br>AHAH<br>HAHA<br>HHAAAAHH<br><span class="hljs-number">3</span><br>CDE<br>CDE<br>EEDDCC<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-number">1</span> <span class="hljs-number">2</span><br><span class="hljs-number">2</span> <span class="hljs-number">-1</span><br></code></pre></td></tr></table></figure><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;set&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> t, len, ans;<br>string a, b, c, s;<br>set&lt;string&gt; sset;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> cost)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (ans != <span class="hljs-number">-1</span>) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">if</span> (s == c) &#123;ans = cost; <span class="hljs-keyword">return</span>;&#125;<br>    a = s.<span class="hljs-built_in">substr</span>(<span class="hljs-number">0</span>, len), b = s.<span class="hljs-built_in">substr</span>(len);<br>    string tmp;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; len;++i)<br>    &#123;<br>        tmp += b[i];<br>        tmp += a[i];<br>    &#125;<br>    <span class="hljs-keyword">if</span> (sset.<span class="hljs-built_in">count</span>(tmp)) <span class="hljs-keyword">return</span>;<br>    s = tmp;<br>    sset.<span class="hljs-built_in">insert</span>(s);<br>    <span class="hljs-built_in">dfs</span>(cost + <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; t;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt;= t;++i)<br>    &#123;<br>        ans = <span class="hljs-number">-1</span>;<br>        cin &gt;&gt; len;<br>        cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;<br>        s = a + b;<br>        <span class="hljs-built_in">dfs</span>(<span class="hljs-number">0</span>);<br>        cout &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; ans &lt;&lt; endl;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>kuangbin专题</category>
      
      <category>专题一 简单搜索</category>
      
    </categories>
    
    
    <tags>
      
      <tag>BFS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>6. Prime Path</title>
    <link href="/2022/11/04/Prime%20Path/"/>
    <url>/2022/11/04/Prime%20Path/</url>
    
    <content type="html"><![CDATA[<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>voj → poj  <a href="https://vjudge.net/problem/POJ-3126">Prime Path</a></p><p>acwing - <a href="https://www.acwing.com/problem/content/4223/">质数路径</a></p><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>The ministers of the cabinet were quite upset by the message from the Chief of Security stating that they would all have to change the four-digit room numbers on their offices.</p><p>— It is a matter of security to change such things every now and then, to keep the enemy in the dark.</p><p>— But look, I have chosen my number 1033 for good reasons. I am the Prime minister, you know!</p><p>— I know, so therefore your new number 8179 is also a prime. You will just have to paste four new digits over the four old ones on your office door.</p><p>— No, it’s not that simple. Suppose that I change the first digit to an 8, then the number will read 8033 which is not a prime!</p><p>— I see, being the prime minister you cannot stand having a non-prime number on your door even for a few seconds.</p><p>— Correct! So I must invent a scheme for going from 1033 to 8179 by a path of prime numbers where only one digit is changed from one prime to the next prime.</p><p>Now, the minister of finance, who had been eavesdropping, intervened.</p><p>— No unnecessary expenditure, please! I happen to know that the price of a digit is one pound.</p><p>— Hmm, in that case I need a computer program to minimize the cost. You don’t know some very cheap software gurus, do you?</p><p>— In fact, I do. You see, there is this programming contest going on… Help the prime minister to find the cheapest prime path between any two given four-digit primes! The first digit must be nonzero, of course. Here is a solution in the case above.</p><p>1033</p><p>1733</p><p>3733</p><p>3739</p><p>3779</p><p>8779</p><p>8179</p><p>The cost of this solution is 6 pounds. Note that the digit 1 which got pasted over in step 2 can not be reused in the last step – a new 1 must be purchased.</p><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><p>One line with a positive number: the number of test cases (at most 100). Then for each test case, one line with two numbers separated by a blank. Both numbers are four-digit primes (without leading zeros).</p><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>One line for each case, either with a number stating the minimal cost or containing the word Impossible.</p><h3 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-number">3</span><br><span class="hljs-number">1033</span> <span class="hljs-number">8179</span><br><span class="hljs-number">1373</span> <span class="hljs-number">8017</span><br><span class="hljs-number">1033</span> <span class="hljs-number">1033</span><br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-number">6</span><br><span class="hljs-number">7</span><br><span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>按照所给规则进行bfs搜索即可</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; pii;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e4</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> primes[N], primes_idx[N], cnt, n, x, y, flag, ans;<br><span class="hljs-type">bool</span> st[N];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">get_primes</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= N; ++i)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (!st[i])<br>        &#123;<br>            primes[cnt++] = i;<br>            primes_idx[i] = <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; primes[j] &lt;= N / i; ++j)<br>        &#123;<br>            st[primes[j] * i] = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">if</span> (i % primes[j] == <span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">bfs</span><span class="hljs-params">(<span class="hljs-type">int</span> cost, <span class="hljs-type">int</span> num)</span></span><br><span class="hljs-function"></span>&#123;<br>    queue&lt;pii&gt; nums;<br>    nums.<span class="hljs-built_in">push</span>(&#123;num, cost&#125;);<br>    <span class="hljs-keyword">while</span> (!nums.<span class="hljs-built_in">empty</span>())<br>    &#123;<br>        pii now = nums.<span class="hljs-built_in">front</span>();<br>        nums.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">if</span> (now.first == y)<br>        &#123;<br>            cout &lt;&lt; now.second &lt;&lt; endl;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <br>        <span class="hljs-comment">// 取 千百十个 位</span><br>        <span class="hljs-type">int</span> a = now.first / <span class="hljs-number">1000</span>, b = now.first / <span class="hljs-number">100</span> % <span class="hljs-number">10</span>, c = now.first / <span class="hljs-number">10</span> % <span class="hljs-number">10</span>, d = now.first % <span class="hljs-number">10</span>;<br>        <br>        <span class="hljs-comment">// 千位</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt; <span class="hljs-number">10</span>;++i)<br>        &#123;<br>            <span class="hljs-type">int</span> x = i * <span class="hljs-number">1000</span> + b * <span class="hljs-number">100</span> + c * <span class="hljs-number">10</span> + d;<br>            <span class="hljs-keyword">if</span> (!st[x] &amp;&amp; primes_idx[x])<br>            &#123;<br>                st[x] = <span class="hljs-literal">true</span>;<br>                nums.<span class="hljs-built_in">push</span>(&#123;x, now.second + <span class="hljs-number">1</span>&#125;);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// 百位</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">10</span>;++i)<br>        &#123;<br>            <span class="hljs-type">int</span> x = a * <span class="hljs-number">1000</span> + i * <span class="hljs-number">100</span> + c * <span class="hljs-number">10</span> + d;<br>            <span class="hljs-keyword">if</span> (!st[x] &amp;&amp; primes_idx[x])<br>            &#123;<br>                st[x] = <span class="hljs-literal">true</span>;<br>                nums.<span class="hljs-built_in">push</span>(&#123;x, now.second + <span class="hljs-number">1</span>&#125;);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// 十位</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">10</span>;++i)<br>        &#123;<br>            <span class="hljs-type">int</span> x = a * <span class="hljs-number">1000</span> + b * <span class="hljs-number">100</span> + i * <span class="hljs-number">10</span> + d;<br>            <span class="hljs-keyword">if</span> (!st[x] &amp;&amp; primes_idx[x])<br>            &#123;<br>                st[x] = <span class="hljs-literal">true</span>;<br>                nums.<span class="hljs-built_in">push</span>(&#123;x, now.second + <span class="hljs-number">1</span>&#125;);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// 个位</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">10</span>;++i)<br>        &#123;<br>            <span class="hljs-type">int</span> x = a * <span class="hljs-number">1000</span> + b * <span class="hljs-number">100</span> + c * <span class="hljs-number">10</span> + i;<br>            <span class="hljs-keyword">if</span> (!st[x] &amp;&amp; primes_idx[x])<br>            &#123;<br>                st[x] = <span class="hljs-literal">true</span>;<br>                nums.<span class="hljs-built_in">push</span>(&#123;x, now.second + <span class="hljs-number">1</span>&#125;);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">get_primes</span>();<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">while</span> (n--)<br>    &#123;<br>        cin &gt;&gt; x &gt;&gt; y;<br>        <span class="hljs-built_in">memset</span>(st, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> st);<br>        st[x] = <span class="hljs-literal">true</span>;<br>        <span class="hljs-built_in">bfs</span>(<span class="hljs-number">0</span>, x);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>kuangbin专题</category>
      
      <category>专题一 简单搜索</category>
      
    </categories>
    
    
    <tags>
      
      <tag>BFS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>5. Find The Multiple</title>
    <link href="/2022/11/03/Find%20The%20Multiple/"/>
    <url>/2022/11/03/Find%20The%20Multiple/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Given a positive integer n, write a program to find out a nonzero multiple m of n whose decimal representation contains only the digits 0 and 1. You may assume that n is not greater than 200 and there is a corresponding m containing no more than 100 decimal digits.</p><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><p>The input file may contain multiple test cases. Each line contains a value of n (1 &lt;= n &lt;= 200). A line containing a zero terminates the input.</p><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>For each value of n in the input print a line containing the corresponding value of m. The decimal representation of m must not contain more than 100 digits. If there are multiple solutions for a given value of n, any one of them is acceptable.</p><h3 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-number">2</span><br><span class="hljs-number">6</span><br><span class="hljs-number">19</span><br><span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-number">10</span><br><span class="hljs-number">100100100100100100</span><br><span class="hljs-number">111111111111111111</span><br></code></pre></td></tr></table></figure><p>直接模拟出二进制数即可</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ull;<br><br>ull n;<br><span class="hljs-type">bool</span> flag;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> step, ull num)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (step &gt; <span class="hljs-number">19</span> || num &lt; <span class="hljs-number">0</span> || flag) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">if</span> (num % n == <span class="hljs-number">0</span>)<br>    &#123;<br>        cout &lt;&lt; num &lt;&lt; endl;<br>        flag = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!flag) <span class="hljs-built_in">dfs</span>(step + <span class="hljs-number">1</span>, num * <span class="hljs-number">10</span>);<br>    <span class="hljs-keyword">if</span> (!flag) <span class="hljs-built_in">dfs</span>(step + <span class="hljs-number">1</span>, num * <span class="hljs-number">10</span> + <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span> (cin &gt;&gt; n &amp;&amp; n)<br>    &#123;<br>        flag = <span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">dfs</span>(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>kuangbin专题</category>
      
      <category>专题一 简单搜索</category>
      
    </categories>
    
    
    <tags>
      
      <tag>模拟</tag>
      
      <tag>DFS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>4. Fliptile</title>
    <link href="/2022/11/03/Fliptile/"/>
    <url>/2022/11/03/Fliptile/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Farmer John knows that an intellectually satisfied cow is a happy cow who will give more milk. He has arranged a brainy activity for cows in which they manipulate an <em>M</em> × <em>N</em> grid (1 ≤ <em>M</em> ≤ 15; 1 ≤ <em>N</em> ≤ 15) of square tiles, each of which is colored black on one side and white on the other side.</p><p>As one would guess, when a single white tile is flipped, it changes to black; when a single black tile is flipped, it changes to white. The cows are rewarded when they flip the tiles so that each tile has the white side face up. However, the cows have rather large hooves and when they try to flip a certain tile, they also flip all the adjacent tiles (tiles that share a full edge with the flipped tile). Since the flips are tiring, the cows want to minimize the number of flips they have to make.</p><p>Help the cows determine the minimum number of flips required, and the locations to flip to achieve that minimum. If there are multiple ways to achieve the task with the minimum amount of flips, return the one with the least lexicographical ordering in the output when considered as a string. If the task is impossible, print one line with the word “IMPOSSIBLE”.</p><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>Line 1: Two space-separated integers: <em>M</em> and <em>N</em></p><p>Lines 2.. <em>M</em>+1: Line <em>i</em>+1 describes the colors (left to right) of row i of the grid with<em>N</em></p><p>space-separated integers which are 1 for black and 0 for white</p><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>Lines 1..<em>M</em>: Each line contains <em>N</em><br> space-separated integers, each specifying how many times to flip that particular location.</p><h3 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a>Sample</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-number">4</span> <span class="hljs-number">4</span><br><span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span><br><span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span><br><span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span><br><span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span><br><span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span><br><span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span><br><span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><blockquote><p>这题我一直不是很明白，不明白题解里面说用第一行就能枚举出所有行的情况是什么意思，我希望可以解释明白</p></blockquote><p>首先，我们知道，在集合中，一个集合中，每个元素都有两种选择，取或者不取，所以，它的子集的数量 $num = 2 ^ n$ ，那么我们来看第一行，把其看作是一个集合，那么所有的可能也就是 $2^m$，这个过程也就是二进制枚举的过程；</p><p>我们把第一行中每种情况进行枚举，出现了一种可能后，便约束着下一行的选取，因为这一行过后只有下一行能够改变这一行剩余的 $1$，所以说第二行改变的可能完全按照第一行中剩余$1$的位置来改变，第三行按照第二行…当按照这个情况来模拟到最后一行时，若最后一行仍有$1$无法清除，则证明这次枚举是无法成立的，也就是说，我们从第一行的情况，按照顺序模拟到了最后一行，且这些模拟只是按照条件判断出来的，所以，第一行的情况决定了剩下所有行的情况。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><blockquote><p>代码十分不简洁 将就着看</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">17</span>;<br><span class="hljs-type">int</span> n, m;<br><span class="hljs-type">bool</span> x[N][N], backup[N][N], ans[N][N];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">flip</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span></span><br><span class="hljs-function"></span>&#123;<br>    x[i][j] = !x[i][j];<br>    <span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">0</span>) x[i - <span class="hljs-number">1</span>][j] = !x[i - <span class="hljs-number">1</span>][j];<br>    <span class="hljs-keyword">if</span> (i &lt; n - <span class="hljs-number">1</span>) x[i + <span class="hljs-number">1</span>][j] = !x[i + <span class="hljs-number">1</span>][j];<br>    <span class="hljs-keyword">if</span> (j &gt; <span class="hljs-number">0</span>) x[i][j - <span class="hljs-number">1</span>] = !x[i][j - <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">if</span> (j &lt; m - <span class="hljs-number">1</span>) x[i][j + <span class="hljs-number">1</span>] = !x[i][j + <span class="hljs-number">1</span>];<br>&#125;<br><br>vector&lt;pair&lt;<span class="hljs-type">int</span>, string&gt;&gt; vecans;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; m; ++j)<br>            cin &gt;&gt; x[i][j];<br><br>    <span class="hljs-built_in">memcpy</span>(backup, x, <span class="hljs-keyword">sizeof</span> x);<br><br>    <span class="hljs-type">bool</span> out = <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1</span> &lt;&lt; m; ++i)<br>    &#123;<br>        <span class="hljs-built_in">memcpy</span>(x, backup, <span class="hljs-keyword">sizeof</span> backup);<br>        <span class="hljs-built_in">memset</span>(ans, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> ans);<br>        <span class="hljs-type">int</span> num = i;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = m - <span class="hljs-number">1</span>; j &gt; <span class="hljs-number">-1</span>; --j)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (num &amp; <span class="hljs-number">1</span>)<br>            &#123;<br>                ans[<span class="hljs-number">0</span>][j] = <span class="hljs-number">1</span>;<br>                <span class="hljs-built_in">flip</span>(<span class="hljs-number">0</span>, j);<br>            &#125;<br>            num &gt;&gt;= <span class="hljs-number">1</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt; n; ++j)<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; m; ++k)<br>                <span class="hljs-keyword">if</span> (x[j - <span class="hljs-number">1</span>][k])<br>                    ans[j][k] = <span class="hljs-number">1</span>, <span class="hljs-built_in">flip</span>(j, k);<br><br>        <span class="hljs-type">bool</span> suc = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;j &lt; m;++j)<br>            <span class="hljs-keyword">if</span> (x[n - <span class="hljs-number">1</span>][j])  suc = <span class="hljs-literal">false</span>;<br><br>        <span class="hljs-keyword">if</span> (suc)<br>        &#123;<br>            out = <span class="hljs-literal">true</span>;<br>            string s;<br>            <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;j &lt; n;++j)<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>;k &lt; m;++k)<br>                &#123;<br>                    <span class="hljs-keyword">if</span> (ans[j][k]) ++cnt;<br>                    s += <span class="hljs-string">&#x27;0&#x27;</span> + ans[j][k];<br>                &#125;<br>            vecans.<span class="hljs-built_in">push_back</span>(&#123;cnt, s&#125;);<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-built_in">sort</span>(vecans.<span class="hljs-built_in">begin</span>(), vecans.<span class="hljs-built_in">end</span>());<br><br>    <span class="hljs-keyword">if</span> (!out) cout &lt;&lt; <span class="hljs-string">&quot;IMPOSSIBLE&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">else</span> <br>    &#123;<br>        <span class="hljs-type">int</span> idx = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (idx &lt; n * m)<br>        &#123;<br>            cout &lt;&lt; vecans[<span class="hljs-number">0</span>].second[idx++] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>            <span class="hljs-keyword">if</span> (idx % m == <span class="hljs-number">0</span>) cout &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>kuangbin专题</category>
      
      <category>专题一 简单搜索</category>
      
    </categories>
    
    
    <tags>
      
      <tag>二进制枚举</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>3. Catch That Cow</title>
    <link href="/2022/11/01/Catch%20That%20Cow/"/>
    <url>/2022/11/01/Catch%20That%20Cow/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Farmer John has been informed of the location of a fugitive cow and wants to catch her immediately. He starts at a point N (0 ≤ N ≤ 100,000) on a number line and the cow is at a point K (0 ≤ K ≤ 100,000) on the same number line. Farmer John has two modes of transportation: walking and teleporting.</p><ul><li>Walking: FJ can move from any point X to the points X - 1 or X + 1 in a single minute</li><li>Teleporting: FJ can move from any point X to the point 2 × X in a single minute.</li></ul><p>If the cow, unaware of its pursuit, does not move at all, how long does it take for Farmer John to retrieve it?</p><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>Line 1: Two space-separated integers: N and K</p><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>Line 1: The least amount of time, in minutes, it takes for Farmer John to catch the fugitive cow.</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">3</span>;<br><span class="hljs-type">int</span> op, ed;<br><span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br><br>queue&lt;<span class="hljs-type">int</span>&gt; q;<br><span class="hljs-type">int</span> vis[N];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>())<br>    &#123;<br>        <span class="hljs-type">int</span> x = q.<span class="hljs-built_in">front</span>();<br>        q.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">if</span> (x - <span class="hljs-number">1</span> == ed || x + <span class="hljs-number">1</span> == ed || x * <span class="hljs-number">2</span> == ed)<br>        &#123;<br>            ans = vis[x] + <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (x &gt;= <span class="hljs-number">0</span> &amp;&amp; !vis[x - <span class="hljs-number">1</span>]) q.<span class="hljs-built_in">push</span>(x - <span class="hljs-number">1</span>), vis[x - <span class="hljs-number">1</span>] = vis[x] + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (x + <span class="hljs-number">1</span> &lt;= N &amp;&amp; !vis[x + <span class="hljs-number">1</span>]) q.<span class="hljs-built_in">push</span>(x + <span class="hljs-number">1</span>), vis[x + <span class="hljs-number">1</span>] = vis[x] + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (x &lt;&lt; <span class="hljs-number">1</span> &lt;= N &amp;&amp; !vis[x &lt;&lt; <span class="hljs-number">1</span>]) q.<span class="hljs-built_in">push</span>(x &lt;&lt; <span class="hljs-number">1</span>), vis[x &lt;&lt; <span class="hljs-number">1</span>] = vis[x] + <span class="hljs-number">1</span>;<br><span class="hljs-comment">//      注意下面的书写方式 若先检测vis数组 而数组开的不够大 则可能出现数组越界现象</span><br><span class="hljs-comment">//      if (!vis[x - 1] &amp;&amp; x &gt;= 0) q.push(x - 1), vis[x - 1] = vis[x] + 1;</span><br><span class="hljs-comment">//      if (!vis[x + 1] &amp;&amp; x + 1 &lt;= N) q.push(x + 1), vis[x + 1] = vis[x] + 1;</span><br><span class="hljs-comment">//      if (!vis[x &lt;&lt; 1] &amp;&amp; x &lt;&lt; 1 &lt;= N) q.push(x &lt;&lt; 1), vis[x &lt;&lt; 1] = vis[x] + 1;</span><br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(vis, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> vis);<br>    cin &gt;&gt; op &gt;&gt; ed;<br>    <span class="hljs-keyword">if</span> (op == ed)<br>    &#123;<br>        cout &lt;&lt; <span class="hljs-number">0</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    q.<span class="hljs-built_in">push</span>(op);<br>    <span class="hljs-built_in">bfs</span>();<br>    cout &lt;&lt; ans &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>kuangbin专题</category>
      
      <category>专题一 简单搜索</category>
      
    </categories>
    
    
    <tags>
      
      <tag>BFS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2. Dungeon Master</title>
    <link href="/2022/10/31/Dungeon%20Master/"/>
    <url>/2022/10/31/Dungeon%20Master/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>You are trapped in a 3D dungeon and need to find the quickest way out! The dungeon is composed of unit cubes which may or may not be filled with rock. It takes one minute to move one unit north, south, east, west, up or down. You cannot move diagonally and the maze is surrounded by solid rock on all sides.</p><p>Is an escape possible? If yes, how long will it take?</p><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>The input consists of a number of dungeons. Each dungeon description starts with a line containing three integers L, R and C (all limited to 30 in size).<br>L is the number of levels making up the dungeon.<br>R and C are the number of rows and columns making up the plan of each level.<br>Then there will follow L blocks of R lines each containing C characters. Each character describes one cell of the dungeon. A cell full of rock is indicated by a ‘#’ and empty cells are represented by a ‘.’. Your starting position is indicated by ‘S’ and the exit by the letter ‘E’. There’s a single blank line after each level. Input is terminated by three zeroes for L, R and C.</p><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>Each maze generates one line of output. If it is possible to reach the exit, print a line of the form</p><blockquote><p>Escaped in x minute(s).</p></blockquote><p>where x is replaced by the shortest time it takes to escape.<br>If it is not possible to escape, print the line</p><blockquote><p>Trapped!</p></blockquote><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span><br>&#123;<br>    <span class="hljs-type">int</span> x, y, z, cost;<br>&#125; node;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">37</span>;<br><span class="hljs-type">int</span> l, r, c, ans;<br><span class="hljs-type">char</span> maze[N][N][N];<br><span class="hljs-type">bool</span> st[N][N][N];<br>queue&lt;node&gt; q;<br><br><span class="hljs-type">int</span> turn[<span class="hljs-number">6</span>][<span class="hljs-number">3</span>] = &#123;&#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>&#125;, &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>&#125;, &#123;<span class="hljs-number">0</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>&#125;, &#123;<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;, &#123;<span class="hljs-number">-1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>())<br>    &#123;<br>        node n = q.<span class="hljs-built_in">front</span>();<br>        q.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">6</span>;++i)<br>        &#123;<br>            <span class="hljs-type">int</span> nx = n.x + turn[i][<span class="hljs-number">0</span>], ny = n.y + turn[i][<span class="hljs-number">1</span>], nz = n.z + turn[i][<span class="hljs-number">2</span>], cost = n.cost + <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (nx &lt; <span class="hljs-number">0</span> || nx &gt;= l || ny &lt; <span class="hljs-number">0</span> || ny &gt;= r || nz &lt; <span class="hljs-number">0</span> || nz &gt;= c) <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">if</span> (maze[nx][ny][nz] == <span class="hljs-string">&#x27;E&#x27;</span>)<br>            &#123;<br>                ans = cost;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (!st[nx][ny][nz] &amp;&amp; maze[nx][ny][nz] != <span class="hljs-string">&#x27;#&#x27;</span>)<br>            &#123;<br>                node a;<br>                a.x = nx, a.y = ny, a.z = nz, a.cost = cost;<br>                st[nx][ny][nz] = <span class="hljs-literal">true</span>;<br>                q.<span class="hljs-built_in">push</span>(a);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span> (cin &gt;&gt; l &gt;&gt; r &gt;&gt; c &amp;&amp; (l + r + c) &gt; <span class="hljs-number">0</span>)<br>    &#123;<br>        q = <span class="hljs-built_in">queue</span>&lt;node&gt;(); <span class="hljs-comment">// 一定要记得初始化！！！！</span><br>        <span class="hljs-built_in">memset</span>(st, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> st); <span class="hljs-comment">// 这也是！！！！！</span><br>        ans = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; l;++i)<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;j &lt; r;++j)<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>;k &lt; c;++k)<br>                &#123;<br>                    cin &gt;&gt; maze[i][j][k];<br>                    <span class="hljs-keyword">if</span> (maze[i][j][k] == <span class="hljs-string">&#x27;S&#x27;</span>)   <br>                    &#123;<br>                        node n;<br>                        n.x = i, n.y = j, n.z = k, n.cost = <span class="hljs-number">0</span>;<br>                        q.<span class="hljs-built_in">push</span>(n);<br>                    &#125;<br>                &#125;<br>        <span class="hljs-built_in">bfs</span>();<br>        <span class="hljs-keyword">if</span> (ans) cout &lt;&lt; <span class="hljs-string">&quot;Escaped in &quot;</span> &lt;&lt; ans &lt;&lt; <span class="hljs-string">&quot; minute(s).&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">else</span> cout &lt;&lt; <span class="hljs-string">&quot;Trapped!&quot;</span> &lt;&lt; endl;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>kuangbin专题</category>
      
      <category>专题一 简单搜索</category>
      
    </categories>
    
    
    <tags>
      
      <tag>BFS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1. 棋盘问题</title>
    <link href="/2022/10/29/%E6%A3%8B%E7%9B%98%E9%97%AE%E9%A2%98/"/>
    <url>/2022/10/29/%E6%A3%8B%E7%9B%98%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>在一个给定形状的棋盘（形状可能是不规则的）上面摆放棋子，棋子没有区别。要求摆放时任意的两个棋子不能放在棋盘中的同一行或者同一列，请编程求解对于给定形状和大小的棋盘，摆放k个棋子的所有可行的摆放方案C。</p><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>输入含有多组测试数据。</p><p>每组数据的第一行是两个正整数，n k，用一个空格隔开，表示了将在一个n*n的矩阵内描述棋盘，以及摆放棋子的数目。 n &lt;= 8 , k &lt;= n</p><p>当为-1 -1时表示输入结束。</p><p>随后的n行描述了棋盘的形状：每行有n个字符，其中 # 表示棋盘区域， . 表示空白区域（数据保证不出现多余的空白行或者空白列）。</p><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>对于每一组数据，给出一行输出，输出摆放的方案数目C （数据保证C&lt;2^31）。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-type">int</span> n, k; <span class="hljs-comment">// n * n 行矩阵， 共放 k 枚棋子</span><br><span class="hljs-type">bool</span> st[<span class="hljs-number">10</span>]; <span class="hljs-comment">// 标记第 i 列已经放了棋子</span><br>ll ans = <span class="hljs-number">0</span>; <span class="hljs-comment">// 最终答案数</span><br>string s[<span class="hljs-number">10</span>]; <span class="hljs-comment">// 棋盘矩阵</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> cnt, <span class="hljs-type">int</span> line)</span> <span class="hljs-comment">// 已经放置了 cnt 枚棋子， 正要检测第 line 行</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (cnt == k) <span class="hljs-comment">// 放置棋子数 == 总棋子数 计算结果 返回</span><br>    &#123;<br>        ans++;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (line &gt;= n) <span class="hljs-keyword">return</span>; <span class="hljs-comment">// 超过矩阵行数 返回</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; n;++i)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (!st[i] &amp;&amp; s[line][i] == <span class="hljs-string">&#x27;#&#x27;</span>)<br>        &#123;<br>            <span class="hljs-comment">// 回溯过程</span><br>            st[i] = <span class="hljs-literal">true</span>; <span class="hljs-comment">// 标记第 i 列已经放置棋子</span><br>            <span class="hljs-built_in">dfs</span>(cnt + <span class="hljs-number">1</span>, line + <span class="hljs-number">1</span>);<br>            st[i] = <span class="hljs-literal">false</span>; <span class="hljs-comment">// 取消标记</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">dfs</span>(cnt, line + <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; fixed;<br>    <span class="hljs-built_in">memset</span>(st, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> st);<br>    <span class="hljs-keyword">while</span> (cin &gt;&gt; n &gt;&gt; k &amp;&amp; n != <span class="hljs-number">-1</span> &amp;&amp; k != <span class="hljs-number">-1</span>)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n;++i) cin &gt;&gt; s[i];<br>        ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">dfs</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<br>        cout &lt;&lt; ans &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>kuangbin专题</category>
      
      <category>专题一 简单搜索</category>
      
    </categories>
    
    
    <tags>
      
      <tag>DFS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构-顺序表</title>
    <link href="/2022/10/23/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%A1%BA%E5%BA%8F%E8%A1%A8/"/>
    <url>/2022/10/23/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%A1%BA%E5%BA%8F%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAX_SIZE = <span class="hljs-number">1e5</span>;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span><br>&#123;<br>    <span class="hljs-type">int</span> data[MAX_SIZE];<br>    <span class="hljs-type">int</span> length;<br>&#125; SqList;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">SqListInsertElem</span><span class="hljs-params">(SqList &amp;L, <span class="hljs-type">int</span> idx, <span class="hljs-type">int</span> val)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// 判断合法条件</span><br>    <span class="hljs-keyword">if</span> (idx &lt; <span class="hljs-number">1</span> || idx &gt; L.length) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">if</span> (L.length &gt;= MAX_SIZE) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-comment">// i - L.length 元素 向后平移</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = L.length; j &gt;= idx; --j)<br>        L.data[j] = L.data[j - <span class="hljs-number">1</span>];<br>    L.data[idx - <span class="hljs-number">1</span>] = val;<br><br>    ++L.length;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">SqListDeleteElem</span><span class="hljs-params">(SqList &amp;L, <span class="hljs-type">int</span> idx, <span class="hljs-type">int</span> &amp;val)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// 判断合法条件</span><br>    <span class="hljs-keyword">if</span> (idx &lt; <span class="hljs-number">1</span> || idx &gt; L.length) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-comment">// 数组元素向前平移覆盖元素</span><br>    val = L.data[idx - <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = idx; i &lt; L.length; ++i)<br>        L.data[i - <span class="hljs-number">1</span>] = L.data[i];<br><br>    --L.length;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">SqListVal</span><span class="hljs-params">(SqList &amp;L, <span class="hljs-type">int</span> idx, <span class="hljs-type">int</span> &amp;val)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (idx &lt; <span class="hljs-number">1</span> || idx &gt; L.length) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    val = L.data[idx - <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;   <br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">SqListSearch</span><span class="hljs-params">(SqList &amp;L, <span class="hljs-type">int</span> val, <span class="hljs-type">int</span> &amp;idx)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; L.length;++i)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (L.data[i] == val)<br>        &#123;<br>            idx = i + <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    SqList L;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">10</span>;++i)<br>    &#123;<br>        <span class="hljs-type">int</span> x;<br>        cin &gt;&gt; x;<br>        <span class="hljs-built_in">SqListInsertElem</span>(L, L.length, x);<br>    &#125;<br>    <span class="hljs-type">int</span> idx, val;<br>    cin &gt;&gt; val;<br>    <span class="hljs-built_in">SqListSearch</span>(L, val, idx);<br>    cout &lt;&lt; idx &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022CCPC网络预选赛</title>
    <link href="/2022/09/12/2022-CCPC-%E7%BD%91%E7%BB%9C%E9%A2%84%E9%80%89%E8%B5%9B/"/>
    <url>/2022/09/12/2022-CCPC-%E7%BD%91%E7%BB%9C%E9%A2%84%E9%80%89%E8%B5%9B/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://github.com/Boger0319/PicGo/raw/main/noteImages/2022CCPC%E7%BD%91%E7%BB%9C%E8%B5%9B%E9%A2%98%E7%9B%AE.pdf">https://github.com/Boger0319/PicGo/raw/main/noteImages/2022CCPC%E7%BD%91%E7%BB%9C%E8%B5%9B%E9%A2%98%E7%9B%AE.pdf</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p><a href="https://github.com/Boger0319/PicGo/raw/main/noteImages/2022CCPC%E7%BD%91%E7%BB%9C%E8%B5%9B%E9%A2%98%E8%A7%A3.pdf">https://github.com/Boger0319/PicGo/raw/main/noteImages/2022CCPC%E7%BD%91%E7%BB%9C%E8%B5%9B%E9%A2%98%E8%A7%A3.pdf</a></p>]]></content>
    
    
    <categories>
      
      <category>CCPC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CCPC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>P1002-NOIP2002普及组-过河卒</title>
    <link href="/2022/08/15/P1002-NOIP2002%E6%99%AE%E5%8F%8A%E7%BB%84-%E8%BF%87%E6%B2%B3%E5%8D%92/"/>
    <url>/2022/08/15/P1002-NOIP2002%E6%99%AE%E5%8F%8A%E7%BB%84-%E8%BF%87%E6%B2%B3%E5%8D%92/</url>
    
    <content type="html"><![CDATA[<h1 id="NOIP2002-普及组-过河卒"><a href="#NOIP2002-普及组-过河卒" class="headerlink" title="[NOIP2002 普及组] 过河卒"></a><a href="https://www.luogu.com.cn/problem/P1002">[NOIP2002 普及组] 过河卒</a></h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>棋盘上 $A$ 点有一个过河卒，需要走到目标 $B$ 点。卒行走的规则：可以向下、或者向右。同时在棋盘上 $C$ 点有一个对方的马，该马所在的点和所有跳跃一步可达的点称为对方马的控制点。因此称之为“马拦过河卒”。</p><p>棋盘用坐标表示，$A$ 点 $(0, 0)$、$B$ 点 $(n, m)$，同样马的位置坐标是需要给出的。</p><p><img src="https://cdn.jsdelivr.net/gh/Boger0319/PicGo@main/noteImages/202208152225483.png"></p><p>现在要求你计算出卒从 $A$ 点能够到达 $B$ 点的路径的条数，假设马的位置是固定不动的，并不是卒走一步马走一步。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>一行四个正整数，分别表示 $B$ 点坐标和马的坐标。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>一个整数，表示所有的路径条数。</p><h2 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">6 </span><span class="hljs-number">6</span> <span class="hljs-number">3</span> <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">6<br></code></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p>对于 $100 %$ 的数据，$1 \le n, m \le 20$，$0 \le$ 马的坐标 $\le 20$。</p><p><strong>【题目来源】</strong></p><p>NOIP 2002 普及组第四题</p><h2 id="个人题解"><a href="#个人题解" class="headerlink" title="个人题解"></a>个人题解</h2><blockquote><p>将马及其落脚点都设置为-1，意为不可走点，卒可下可右，即对每个位置取其上一层(i-1)以及左侧(j-1)之和，-1点跳过，最后B点位置即为结果</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rint register int</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> fastIo() ios::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr)</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-type">int</span> bx, by, hx, hy;<br>ll chess[<span class="hljs-number">21</span>][<span class="hljs-number">21</span>];<br><span class="hljs-type">int</span> horsex[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">-2</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125;;<br><span class="hljs-type">int</span> horsey[<span class="hljs-number">8</span>] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">-2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">-2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">fastIo</span>();<br>cin &gt;&gt; bx &gt;&gt; by &gt;&gt; hx &gt;&gt; hy;<br>chess[hx][hy] = <span class="hljs-number">-1</span>;<br><span class="hljs-keyword">for</span> (rint i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++)<br><span class="hljs-keyword">for</span> (rint j = i * <span class="hljs-number">2</span>; j &lt;= i * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>; j++)<br><span class="hljs-keyword">if</span> (horsex[i]+hx &gt;= <span class="hljs-number">0</span> &amp;&amp; horsey[j]+hy &gt;= <span class="hljs-number">0</span>)<br>chess[horsex[i]+hx][horsey[j]+hy] = <span class="hljs-number">-1</span>;<br><br><span class="hljs-keyword">for</span> (rint i = <span class="hljs-number">0</span>;i &lt;= <span class="hljs-number">20</span>;i++)<br><span class="hljs-keyword">if</span> (chess[<span class="hljs-number">0</span>][i] != <span class="hljs-number">-1</span>)<br>chess[<span class="hljs-number">0</span>][i] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">else</span> <br><span class="hljs-keyword">break</span>;<br><br><span class="hljs-keyword">for</span> (rint i = <span class="hljs-number">0</span>;i &lt;= <span class="hljs-number">20</span>;i++)<br><span class="hljs-keyword">if</span> (chess[i][<span class="hljs-number">0</span>] != <span class="hljs-number">-1</span>)<br>chess[i][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">else</span> <br><span class="hljs-keyword">break</span>;<br><br><span class="hljs-keyword">for</span> (rint i = <span class="hljs-number">1</span>;i &lt;= bx;i++)<br>&#123;<br><span class="hljs-keyword">for</span> (rint j = <span class="hljs-number">1</span>;j &lt;= by;j++)<br>&#123;<br><span class="hljs-keyword">if</span> (chess[i][j] == <span class="hljs-number">-1</span>) <span class="hljs-keyword">continue</span>;<br><span class="hljs-keyword">if</span> (chess[i][j<span class="hljs-number">-1</span>] != <span class="hljs-number">-1</span>) chess[i][j] += chess[i][j<span class="hljs-number">-1</span>];<br><span class="hljs-keyword">if</span> (chess[i<span class="hljs-number">-1</span>][j] != <span class="hljs-number">-1</span>) chess[i][j] += chess[i<span class="hljs-number">-1</span>][j];<br>&#125;<br>&#125;<br><br>cout &lt;&lt; chess[bx][by];<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>洛谷</category>
      
      <category>动态规划</category>
      
    </categories>
    
    
    <tags>
      
      <tag>动态规划</tag>
      
      <tag>洛谷</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>动态规划之背包DP</title>
    <link href="/2022/08/10/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E4%B9%8B%E8%83%8C%E5%8C%85DP/"/>
    <url>/2022/08/10/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E4%B9%8B%E8%83%8C%E5%8C%85DP/</url>
    
    <content type="html"><![CDATA[<h3 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h3><blockquote><p>动态规划是一种通过把原问题<strong>分解为</strong>相对简单的<strong>子问题</strong>的方式<strong>求解复杂问题</strong>的方法。</p></blockquote><h4 id="动态规划原理"><a href="#动态规划原理" class="headerlink" title="动态规划原理"></a>动态规划原理</h4><blockquote><p>能用动态规划解决的问题，需要满足三个条件：<strong>最优子结构</strong>，<strong>无后效性</strong>和<strong>子问题重叠</strong>。</p></blockquote><h3 id="0-1背包"><a href="#0-1背包" class="headerlink" title="0-1背包"></a>0-1背包</h3><blockquote><p>已知条件有第 $i$ 个物品的重量 $w_i$，价值 $v_i$，以及背包的总容量 $W$。</p><p><strong>选若干物品</strong>放入背包<strong>使背包中物品的总价值最大</strong>且背包中物品的<strong>总重量不超过背包的容量</strong>。</p></blockquote><blockquote><p>每个物体<strong>只有两种可能</strong>的状态（取与不取），对应二进制中的 和 ，这类问题便被称为「0-1 背包问题」</p></blockquote><h4 id="例题：-USACO07DEC-Charm-Bracelet-S"><a href="#例题：-USACO07DEC-Charm-Bracelet-S" class="headerlink" title="例题：[USACO07DEC]Charm Bracelet S"></a>例题：<a href="https://www.luogu.com.cn/problem/P2871">[USACO07DEC]Charm Bracelet S</a></h4><h5 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h5><p>有 $N$ 件物品和一个容量为 $M$ 的背包。第 $i$ 件物品的重量是 $W_i$，价值是 $D_i$。求解将哪些物品装入背包可使这些物品的重量总和不超过背包容量，且价值总和最大。</p><h5 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h5><p>第一行：物品个数 $N$ 和背包大小 $M$。</p><p>第二行至第 $N+1$ 行：第 $i$ 个物品的重量 $W_i$ 和价值 $D_i$。</p><h5 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h5><p>输出一行最大价值。</p><h5 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h5><h6 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h6><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">4 </span><span class="hljs-number">6</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">4</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">6</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">12</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">7</span><br></code></pre></td></tr></table></figure><h6 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">23<br></code></pre></td></tr></table></figure><h5 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> N,M;<br><span class="hljs-type">int</span> goods[(<span class="hljs-type">int</span>)<span class="hljs-number">1e8</span>][<span class="hljs-number">2</span>];<br><span class="hljs-type">int</span> dp[(<span class="hljs-type">int</span>)<span class="hljs-number">1e8</span>];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; N &gt;&gt; M;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; N;i++)<br>        cin &gt;&gt; goods[i][<span class="hljs-number">0</span>] &gt;&gt; goods[i][<span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; N;i++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = M;j &gt;= goods[i][<span class="hljs-number">0</span>];j--)<br>            dp[j] = <span class="hljs-built_in">max</span>(dp[j],dp[j-goods[i][<span class="hljs-number">0</span>]]+goods[i][<span class="hljs-number">1</span>]);<br>    cout &lt;&lt; dp[M] &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="完全背包"><a href="#完全背包" class="headerlink" title="完全背包"></a>完全背包</h3><blockquote><p>与 0-1 背包类似，与 0-1 背包的区别仅在于<strong>一个物品可以选取无限次</strong>。</p></blockquote><h4 id="疯狂的采药"><a href="#疯狂的采药" class="headerlink" title="疯狂的采药"></a><a href="https://www.luogu.com.cn/problem/P1616">疯狂的采药</a></h4><h5 id="题目背景"><a href="#题目背景" class="headerlink" title="题目背景"></a>题目背景</h5><p>此题为纪念 LiYuxiang 而生。</p><h5 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h5><p>LiYuxiang 是个天资聪颖的孩子，他的梦想是成为世界上最伟大的医师。为此，他想拜附近最有威望的医师为师。医师为了判断他的资质，给他出了一个难题。医师把他带到一个到处都是草药的山洞里对他说：“孩子，这个山洞里有一些不同种类的草药，采每一种都需要一些时间，每一种也有它自身的价值。我会给你一段时间，在这段时间里，你可以采到一些草药。如果你是一个聪明的孩子，你应该可以让采到的草药的总价值最大。”</p><p>如果你是 LiYuxiang，你能完成这个任务吗？</p><p>此题和原题的不同点：</p><p>$1$. 每种草药可以无限制地疯狂采摘。</p><p>$2$. 药的种类眼花缭乱，采药时间好长好长啊！师傅等得菊花都谢了！</p><h5 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h5><p>输入第一行有两个整数，分别代表总共能够用来采药的时间 $t$ 和代表山洞里的草药的数目 $m$。</p><p>第 $2$ 到第 $(m + 1)$ 行，每行两个整数，第 $(i + 1)$ 行的整数 $a_i, b_i$ 分别表示采摘第 $i$ 种草药的时间和该草药的价值。</p><h5 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h5><p>输出一行，这一行只包含一个整数，表示在规定的时间内，可以采到的草药的最大总价值。</p><h5 id="样例-1-1"><a href="#样例-1-1" class="headerlink" title="样例 #1"></a>样例 #1</h5><h6 id="样例输入-1-1"><a href="#样例输入-1-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h6><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">70 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">71 </span><span class="hljs-number">100</span><br><span class="hljs-symbol">69 </span><span class="hljs-number">1</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h6 id="样例输出-1-1"><a href="#样例输出-1-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">140<br></code></pre></td></tr></table></figure><h6 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h6><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br>ll t, m;<br>ll a[(<span class="hljs-type">int</span>)<span class="hljs-number">1.01e7</span>][<span class="hljs-number">2</span>];<br>ll dp[(<span class="hljs-type">int</span>)<span class="hljs-number">1.01e7</span>];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; t &gt;&gt; m;<br>    <span class="hljs-keyword">for</span> (ll i = <span class="hljs-number">0</span>; i &lt; m; i++)<br>        cin &gt;&gt; a[i][<span class="hljs-number">0</span>] &gt;&gt; a[i][<span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">for</span> (ll i = <span class="hljs-number">0</span>; i &lt; m; i++)<br>        <span class="hljs-keyword">for</span> (ll j = a[i][<span class="hljs-number">0</span>]; j &lt;= t; j++)<br>            <span class="hljs-keyword">if</span> (a[i][<span class="hljs-number">0</span>] &lt;= j)<br>                dp[j] = <span class="hljs-built_in">max</span>(dp[j], dp[j - a[i][<span class="hljs-number">0</span>]] + a[i][<span class="hljs-number">1</span>]);<br>    cout &lt;&lt; dp[t] &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="多重背包"><a href="#多重背包" class="headerlink" title="多重背包"></a>多重背包</h3><blockquote><p>多重背包也是 0-1 背包的一个变式。与 0-1 背包的区别在于每种物品有 $k_i$ 个，而非一个。</p></blockquote><blockquote><p>思路：把「每种物品选 $k_i$ 次」等价转换为「有 $k$ 个相同的物品，每个物品选一次」</p></blockquote><h4 id="多重背包问题-I"><a href="#多重背包问题-I" class="headerlink" title="多重背包问题 I"></a><a href="https://www.acwing.com/problem/content/4/">多重背包问题 I</a></h4><p>有 $N$ 种物品和一个容量是 $V$ 的背包。</p><p>第 $i$ 种物品最多有 $s_i$ 件，每件体积是 $v_i$，价值是 $w_i$。</p><p>求解将哪些物品装入背包，可使物品体积总和不超过背包容量，且价值总和最大。<br>输出最大价值。</p><h5 id="输入格式-2"><a href="#输入格式-2" class="headerlink" title="输入格式"></a>输入格式</h5><p>第一行两个整数，$N$，$V$，用空格隔开，分别表示物品种数和背包容积。</p><p>接下来有 $N$ 行，每行三个整数 $v_i$,$w_i$,$s_i$，用空格隔开，分别表示第 $i$ 种物品的体积、价值和数量。</p><h5 id="输出格式-2"><a href="#输出格式-2" class="headerlink" title="输出格式"></a>输出格式</h5><p>输出一个整数，表示最大价值。</p><h5 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h5><p>$0&lt;N,V≤100$<br>$0&lt;v_i,w_i,s_i≤100$</p><h5 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h5><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">4 </span><span class="hljs-number">5</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">4</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">4</span> <span class="hljs-number">3</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">5</span> <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h5 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">10<br></code></pre></td></tr></table></figure><h5 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> dp[<span class="hljs-number">1005</span>], n, t, v, w, s;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (n--)<br>    &#123;<br>        cin &gt;&gt; w &gt;&gt; v &gt;&gt; s;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= s; i++)<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = t; j &gt;= w; j--)<br>                dp[j] = <span class="hljs-built_in">max</span>(dp[j], dp[j - w] + v);<br>    &#125;<br>    cout &lt;&lt; dp[t];<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h4><h5 id="二进制分组"><a href="#二进制分组" class="headerlink" title="二进制分组"></a>二进制分组</h5><blockquote><p>将 $i$ 物品可购买 $k$ 件用二进制进行拆分</p></blockquote><p>例：1 花费 1价值的物品有20件</p><p>​    用0-1背包思路要考虑20次，对其进行二进制优化，可拆分为 $2^4 + 2^2$，即只考虑两次0-1背包。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// C++ Version</span><br>index = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;<br>  <span class="hljs-type">int</span> c = <span class="hljs-number">1</span>, p, h, k;<br>  cin &gt;&gt; p &gt;&gt; h &gt;&gt; k;<br>  <span class="hljs-keyword">while</span> (k - c &gt; <span class="hljs-number">0</span>) &#123;<br>    k -= c;<br>    list[++index].w = c * p;<br>    list[index].v = c * h;<br>    c *= <span class="hljs-number">2</span>;<br>  &#125;<br>  list[++index].w = p * k;<br>  list[index].v = h * k;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="单调队列优化"><a href="#单调队列优化" class="headerlink" title="单调队列优化"></a>单调队列优化</h5><h3 id="混合背包"><a href="#混合背包" class="headerlink" title="混合背包"></a>混合背包</h3><blockquote><p>混合背包就是将前面三种的背包问题混合起来，有的只能取一次，有的能取无限次，有的只能取 $k$ 次。</p></blockquote><h5 id="伪代码"><a href="#伪代码" class="headerlink" title="伪代码"></a>伪代码</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span> (循环物品种类) &#123;<br>  <span class="hljs-keyword">if</span> (是 <span class="hljs-number">0</span> - <span class="hljs-number">1</span> 背包)<br>    套用 <span class="hljs-number">0</span> - <span class="hljs-number">1</span> 背包代码;<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (是完全背包)<br>    套用完全背包代码;<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (是多重背包)<br>    套用多重背包代码;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="二维费用背包"><a href="#二维费用背包" class="headerlink" title="二维费用背包"></a>二维费用背包</h3><blockquote><p>明显的 0-1 背包问题，可是不同的是选一个物品会<strong>消耗两种价值</strong>（经费、时间），只需在状态中<strong>增加一维存放第二种价值即可</strong>。</p></blockquote><h4 id="榨取kkksc03"><a href="#榨取kkksc03" class="headerlink" title="榨取kkksc03"></a><a href="https://www.luogu.com.cn/problem/P1855">榨取kkksc03</a></h4><p>洛谷的运营组决定，如果一名 OIer 向他的教练推荐洛谷，并能够成功的使用（成功使用的定义是：该团队有 $20$ 个或以上的成员，上传 $10$ 道以上的私有题目，布置过一次作业并成功举办过一次公开比赛），那么他可以浪费掉 kkksc03 的一些时间的同时消耗掉 kkksc03 的一些金钱以满足自己的一个愿望。</p><p>kkksc03 的时间和金钱是有限的，所以他很难满足所有同学的愿望。所以他想知道在自己的能力范围内，最多可以完成多少同学的愿望？</p><h5 id="输入格式-3"><a href="#输入格式-3" class="headerlink" title="输入格式"></a>输入格式</h5><p>第一行三个整数 $n,M,T$，表示一共有 $n$（$1 \le n \le 100$）个愿望， kkksc03 的手上还剩 $M$（$0 \le M \le 200$）元，他的暑假有 $T$（$0 \le T \le 200$）分钟时间。</p><p>第 $2$~$n+1$ 行 $m_{i}$ , $t_{i}$ 表示第 $i$ 个愿望所需要的金钱和时间。</p><h5 id="输出格式-3"><a href="#输出格式-3" class="headerlink" title="输出格式"></a>输出格式</h5><p>一行，一个数，表示 kkksc03 最多可以实现愿望的个数。</p><h5 id="样例-1-2"><a href="#样例-1-2" class="headerlink" title="样例 #1"></a>样例 #1</h5><h6 id="样例输入-1-2"><a href="#样例输入-1-2" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h6><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">6 </span><span class="hljs-number">10</span> <span class="hljs-number">10</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">1</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">3</span> <br><span class="hljs-symbol">3 </span><span class="hljs-number">2</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">5</span><br><span class="hljs-symbol">5 </span><span class="hljs-number">2</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h5 id="样例输出-1-2"><a href="#样例输出-1-2" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">4<br></code></pre></td></tr></table></figure><h5 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> N,M,T;<br><span class="hljs-type">int</span> m[(<span class="hljs-type">int</span>)<span class="hljs-number">1.01e5</span>],t[(<span class="hljs-type">int</span>)<span class="hljs-number">1.01e5</span>];<br><span class="hljs-type">int</span> dp[<span class="hljs-number">300</span>][<span class="hljs-number">300</span>];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">fastIo</span>();<br>    cin &gt;&gt; N &gt;&gt; M &gt;&gt; T;<br>    <span class="hljs-keyword">for</span> (rint i = <span class="hljs-number">0</span>;i &lt; N;i++)<br>        cin &gt;&gt; m[i] &gt;&gt; t[i];<br>    <span class="hljs-keyword">for</span> (rint i = <span class="hljs-number">0</span>;i &lt; N;i++)<br>        <span class="hljs-keyword">for</span> (rint j = M;j &gt;= m[i];j--)<br>            <span class="hljs-keyword">for</span> (rint k = T;k &gt;= t[i];k--)<br>                dp[j][k] = <span class="hljs-built_in">max</span>(dp[j][k],dp[j-m[i]][k-t[i]]+<span class="hljs-number">1</span>);<br>    cout &lt;&lt; dp[M][T] &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="分组背包"><a href="#分组背包" class="headerlink" title="分组背包"></a>分组背包</h3><blockquote><p>有 $n$ 件物品和一个大小为 $m$ 的背包，第 $i$ 个物品的价值为 $w_i$，体积为 $v_i$。同时，每个物品属于一个组，同组内最多只能选择一个物品。求背包能装载物品的最大总价值。</p></blockquote><blockquote><p>从「在所有物品中选择一件」变成了「从当前组中选择一件」，于是就<strong>对每一组进行一次 0-1 背包</strong>就可以了</p></blockquote><h4 id="通天之分组背包"><a href="#通天之分组背包" class="headerlink" title="通天之分组背包"></a><a href="https://www.luogu.com.cn/problem/P1757">通天之分组背包</a></h4><h5 id="题目背景-1"><a href="#题目背景-1" class="headerlink" title="题目背景"></a>题目背景</h5><p>直达通天路·小 A 历险记第二篇</p><h5 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h5><p>自 $01$ 背包问世之后，小 A 对此深感兴趣。一天，小 A 去远游，却发现他的背包不同于 $01$ 背包，他的物品大致可分为 $k$ 组，每组中的物品相互冲突，现在，他想知道最大的利用价值是多少。</p><h5 id="输入格式-4"><a href="#输入格式-4" class="headerlink" title="输入格式"></a>输入格式</h5><p>两个数 $m,n$，表示一共有 $n$ 件物品，总重量为 $m$。</p><p>接下来 $n$ 行，每行 $3$ 个数 $a_i,b_i,c_i$，表示物品的重量，利用价值，所属组数。</p><h5 id="输出格式-4"><a href="#输出格式-4" class="headerlink" title="输出格式"></a>输出格式</h5><p>一个数，最大的利用价值。</p><h5 id="样例-1-3"><a href="#样例-1-3" class="headerlink" title="样例 #1"></a>样例 #1</h5><h6 id="样例输入-1-3"><a href="#样例输入-1-3" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h6><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">45 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">10 </span><span class="hljs-number">10</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">10 </span><span class="hljs-number">5</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">50 </span><span class="hljs-number">400</span> <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h6 id="样例输出-1-3"><a href="#样例输出-1-3" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">10<br></code></pre></td></tr></table></figure><h5 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h5><p>$1 \leq m, n \leq 1000$。</p><h5 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a>题解</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> v,n,t;<br><span class="hljs-type">int</span> x;<br><span class="hljs-type">int</span> g[<span class="hljs-number">205</span>][<span class="hljs-number">205</span>];<br><span class="hljs-type">int</span> i,j,k;<br><span class="hljs-type">int</span> w[<span class="hljs-number">10001</span>],z[<span class="hljs-number">10001</span>];<br><span class="hljs-type">int</span> b[<span class="hljs-number">10001</span>];<br><span class="hljs-type">int</span> dp[<span class="hljs-number">10001</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin&gt;&gt;v&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        cin&gt;&gt;w[i]&gt;&gt;z[i]&gt;&gt;x;<br>        t=<span class="hljs-built_in">max</span>(t,x);<br>        b[x]++;<br>        g[x][b[x]]=i;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=t;i++)<br>        <span class="hljs-keyword">for</span>(j=v;j&gt;=<span class="hljs-number">0</span>;j--)<br>            <span class="hljs-keyword">for</span>(k=<span class="hljs-number">1</span>;k&lt;=b[i];k++)<br>                <span class="hljs-keyword">if</span>(j&gt;=w[g[i][k]])<br>                    dp[j]=<span class="hljs-built_in">max</span>(dp[j],dp[j-w[g[i][k]]]+z[g[i][k]]);<br>    cout&lt;&lt;dp[v];<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="有依赖背包"><a href="#有依赖背包" class="headerlink" title="有依赖背包"></a>有依赖背包</h3><blockquote><p>金明有 $n$ 元钱，想要买 $m$ 个物品，第 $i$ 件物品的价格为 $v_i$ ，重要度为 $p_i$。有些物品是从属于某个主件物品的附件，要买这个物品，必须购买它的主件。</p><p>目标是让所有购买的物品的 $v_i×p_i$ 之和最大。</p></blockquote><p>考虑分类讨论。对于一个主件和它的若干附件，有以下几种可能：<strong>只买主件</strong>，<strong>买主件 + 某些附件</strong>。因为这几种可能性只能选一种，所以可以将这<strong>看成分组背包</strong>。</p><p>如果是多叉树的集合，则要先算子节点的集合，最后算父节点的集合。</p><h3 id="泛化物品背包"><a href="#泛化物品背包" class="headerlink" title="泛化物品背包"></a>泛化物品背包</h3><blockquote><p>没有固定的费用和价值，它的价值是随着分配给它的费用而定</p><p>当分配给它的费用为 时，能得到的价值就是 。这时，将固定的价值换成函数的引用即可。### 动态规划</p></blockquote><blockquote><p>动态规划是一种通过把原问题<strong>分解为</strong>相对简单的<strong>子问题</strong>的方式<strong>求解复杂问题</strong>的方法。</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>动态规划</tag>
      
      <tag>背包</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基础算法模板</title>
    <link href="/2022/07/30/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/"/>
    <url>/2022/07/30/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/</url>
    
    <content type="html"><![CDATA[<blockquote><p>代码来源：Acwing Y大 仅用作自用学习<br><a href="https://www.acwing.com/blog/content/277/">原文章链接</a></p></blockquote><blockquote><p>采用 图片 形式避免自己过度依赖复制粘贴而不去自己敲写</p></blockquote><h3 id="快速排序算法模板"><a href="#快速排序算法模板" class="headerlink" title="快速排序算法模板"></a>快速排序算法模板</h3><p><img src="https://api2.mubu.com/v3/document_image/155f24d6-8807-41cc-ae9b-622ecc0b37ea-785422.jpg" alt="quick_sort"></p><h3 id="归并排序算法模板"><a href="#归并排序算法模板" class="headerlink" title="归并排序算法模板"></a>归并排序算法模板</h3><p><img src="https://api2.mubu.com/v3/document_image/f66fd10d-c19d-40ff-b4d4-e08b61dddec6-785422.jpg" alt="merge_sort"></p><h3 id="整数二分算法模板"><a href="#整数二分算法模板" class="headerlink" title="整数二分算法模板"></a>整数二分算法模板</h3><p><img src="https://api2.mubu.com/v3/document_image/4a421a57-ece8-41da-8222-1aa3772851a0-785422.jpg" alt="bsearch"></p><h3 id="浮点数二分算法模板"><a href="#浮点数二分算法模板" class="headerlink" title="浮点数二分算法模板"></a>浮点数二分算法模板</h3><p><img src="https://api2.mubu.com/v3/document_image/d3a38119-af1c-40fc-ae29-67dee505af9b-785422.jpg" alt="bsearch2"></p><h3 id="高精度加法"><a href="#高精度加法" class="headerlink" title="高精度加法"></a>高精度加法</h3><p><img src="https://api2.mubu.com/v3/document_image/7475bbed-af8d-47ce-9f6e-0107a7d900d6-785422.jpg" alt="add"></p><h3 id="高精度减法"><a href="#高精度减法" class="headerlink" title="高精度减法"></a>高精度减法</h3><p><img src="https://api2.mubu.com/v3/document_image/6741b7eb-246e-4fea-a0ca-354b563d053f-785422.jpg" alt="sub"></p><h3 id="高精度乘低精度"><a href="#高精度乘低精度" class="headerlink" title="高精度乘低精度"></a>高精度乘低精度</h3><p><img src="https://api2.mubu.com/v3/document_image/2a425f19-ab63-48a2-91c0-da390881f86a-785422.jpg" alt="mul"></p><h3 id="高精度除以低精度"><a href="#高精度除以低精度" class="headerlink" title="高精度除以低精度"></a>高精度除以低精度</h3><p><img src="https://api2.mubu.com/v3/document_image/055a13af-778f-4f0b-926e-189a04db463c-785422.jpg" alt="div"></p><h3 id="一维前缀和"><a href="#一维前缀和" class="headerlink" title="一维前缀和"></a>一维前缀和</h3><p><img src="https://api2.mubu.com/v3/document_image/311bbbc3-73de-49a9-8f82-135dca3c5454-785422.jpg" alt="一堆前缀和"></p><h3 id="二维前缀和"><a href="#二维前缀和" class="headerlink" title="二维前缀和"></a>二维前缀和</h3><p><img src="https://api2.mubu.com/v3/document_image/8c1ce399-f6d6-46c9-abbb-9b20c3a12517-785422.jpg" alt="二堆前缀和"></p><h3 id="一维差分"><a href="#一维差分" class="headerlink" title="一维差分"></a>一维差分</h3><p><img src="https://api2.mubu.com/v3/document_image/905070a5-432e-448a-be84-f06b444449ca-785422.jpg" alt="一维差分"></p><h3 id="二维差分"><a href="#二维差分" class="headerlink" title="二维差分"></a>二维差分</h3><p><img src="https://api2.mubu.com/v3/document_image/f774b77a-2503-4cef-a994-b0b7f0b85a76-785422.jpg" alt="二维差分"></p><h3 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h3><p><img src="https://api2.mubu.com/v3/document_image/5bda0721-fc84-40d4-8cb2-fe8240989ea6-785422.jpg" alt="位运算"></p><h3 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h3><p><img src="https://api2.mubu.com/v3/document_image/55563d25-af2a-431a-a444-dd8653e37f16-785422.jpg" alt="双指针"></p><h3 id="离散化"><a href="#离散化" class="headerlink" title="离散化"></a>离散化</h3><p><img src="https://api2.mubu.com/v3/document_image/2eeca185-661a-4add-9e9e-e5518d751f25-785422.jpg" alt="离散化"></p><h3 id="区间合并"><a href="#区间合并" class="headerlink" title="区间合并"></a>区间合并</h3><p><img src="https://api2.mubu.com/v3/document_image/897df877-c3dc-46f5-a44d-ceecd7d73e06-785422.jpg" alt="区间合并"></p>]]></content>
    
    
    
    <tags>
      
      <tag>模板</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>能力综合提升Part1</title>
    <link href="/2022/07/25/%E8%83%BD%E5%8A%9B%E7%BB%BC%E5%90%88%E6%8F%90%E5%8D%87Part1/"/>
    <url>/2022/07/25/%E8%83%BD%E5%8A%9B%E7%BB%BC%E5%90%88%E6%8F%90%E5%8D%87Part1/</url>
    
    <content type="html"><![CDATA[<h1 id="小玉买文具"><a href="#小玉买文具" class="headerlink" title="小玉买文具"></a>小玉买文具</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>班主任给小玉一个任务，到文具店里买尽量多的签字笔。已知一只签字笔的价格是 $1$ 元 $9$ 角，而班主任给小玉的钱是 $a$ 元 $b$ 角，小玉想知道，她最多能买多少只签字笔呢。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>输入只有一行两个整数，分别表示 $a$ 和 $b$。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出一行一个整数，表示小玉最多能买多少只签字笔。</p><h2 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">10 </span><span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">5<br></code></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><h4 id="数据规模与约定"><a href="#数据规模与约定" class="headerlink" title="数据规模与约定"></a>数据规模与约定</h4><p>对于全部的测试点，保证 $0 \leq a \leq 10^4$，$0 \leq b \leq 9$。</p><h2 id="个人题解"><a href="#个人题解" class="headerlink" title="个人题解"></a>个人题解</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> a,b;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; a &gt;&gt; b;<br>    cout &lt;&lt; (a * <span class="hljs-number">10</span> + b) / <span class="hljs-number">19</span> &lt;&lt; endl;    <br>&#125;<br></code></pre></td></tr></table></figure><h1 id="买铅笔"><a href="#买铅笔" class="headerlink" title="买铅笔"></a>买铅笔</h1><h2 id="题目背景"><a href="#题目背景" class="headerlink" title="题目背景"></a>题目背景</h2><p>NOIP2016 普及组 T1</p><h2 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h2><p>P 老师需要去商店买 $n$ 支铅笔作为小朋友们参加 NOIP 的礼物。她发现商店一共有 $3$ 种包装的铅笔，不同包装内的铅笔数量有可能不同，价格也有可能不同。为了公平起 见，P 老师决定只买同一种包装的铅笔。</p><p>商店不允许将铅笔的包装拆开，因此 P 老师可能需要购买超过 $n$ 支铅笔才够给小朋友们发礼物。</p><p>现在 P 老师想知道，在商店每种包装的数量都足够的情况下，要买够至少 $n$ 支铅笔最少需要花费多少钱。</p><h2 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行包含一个正整数 $n$，表示需要的铅笔数量。</p><p>接下来三行，每行用 $2$ 个正整数描述一种包装的铅笔：其中第 $1$ 个整数表示这种包装内铅笔的数量，第 $2$ 个整数表示这种包装的价格。</p><p>保证所有的 $7$ 个数都是不超过 $10000$ 的正整数。</p><h2 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h2><p>$1$ 个整数，表示 P 老师最少需要花费的钱。</p><h2 id="样例-1-1"><a href="#样例-1-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1-1"><a href="#样例输入-1-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">57</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">2</span><br><span class="hljs-symbol">50 </span><span class="hljs-number">30</span><br><span class="hljs-symbol">30 </span><span class="hljs-number">27</span><br></code></pre></td></tr></table></figure><h3 id="样例输出-1-1"><a href="#样例输出-1-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">54<br></code></pre></td></tr></table></figure><h2 id="样例-2"><a href="#样例-2" class="headerlink" title="样例 #2"></a>样例 #2</h2><h3 id="样例输入-2"><a href="#样例输入-2" class="headerlink" title="样例输入 #2"></a>样例输入 #2</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">9998</span><br><span class="hljs-symbol">128 </span><span class="hljs-number">233</span><br><span class="hljs-symbol">128 </span><span class="hljs-number">2333</span><br><span class="hljs-symbol">128 </span><span class="hljs-number">666</span><br></code></pre></td></tr></table></figure><h3 id="样例输出-2"><a href="#样例输出-2" class="headerlink" title="样例输出 #2"></a>样例输出 #2</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">18407<br></code></pre></td></tr></table></figure><h2 id="样例-3"><a href="#样例-3" class="headerlink" title="样例 #3"></a>样例 #3</h2><h3 id="样例输入-3"><a href="#样例输入-3" class="headerlink" title="样例输入 #3"></a>样例输入 #3</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">9999</span><br><span class="hljs-symbol">101 </span><span class="hljs-number">1111</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">9999</span><br><span class="hljs-symbol">1111 </span><span class="hljs-number">9999</span><br></code></pre></td></tr></table></figure><h3 id="样例输出-3"><a href="#样例输出-3" class="headerlink" title="样例输出 #3"></a>样例输出 #3</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">89991<br></code></pre></td></tr></table></figure><h2 id="提示-1"><a href="#提示-1" class="headerlink" title="提示"></a>提示</h2><p>铅笔的三种包装分别是：</p><ul><li>$2$ 支装，价格为 $2$;</li><li>$50$ 支装，价格为 $30$;</li><li>$30$ 支装，价格为 $27$。</li></ul><p>P老师需要购买至少 $57$ 支铅笔。</p><p>如果她选择购买第一种包装，那么她需要购买 $29$ 份，共计 $2 \times 29 = 58$ 支，需要花费的钱为 $2 \times 29 = 58$。</p><p>实际上，P 老师会选择购买第三种包装，这样需要买 $2$ 份。虽然最后买到的铅笔数量更多了，为 $30 \times 2 = 60$ 支，但花费却减少为 $27 \times 2 = 54$，比第一种少。</p><p>对于第二种包装，虽然每支铅笔的价格是最低的，但要够发必须买 $2$ 份，实际的花费达到了 $30  \times 2 = 60$，因此 P 老师也不会选择。</p><p>所以最后输出的答案是 $54$。</p><p>【数据范围】</p><p>保证所有的 $7$ 个数都是不超过 $10000$ 的正整数。</p><p>【子任务】</p><p>子任务会给出部分测试数据的特点。如果你在解决题目中遇到了困难，可以尝试只解决一部分测试数据。</p><p>每个测试点的数据规模及特点如下表：</p><p> <img src="https://cdn.luogu.com.cn/upload/pic/3449.png"> </p><p>上表中“整倍数”的意义为：若为 $K$，表示对应数据所需要的铅笔数量 $n$ —定是每种包装铅笔数量的整倍数（这意味着一定可以不用多买铅笔）。</p><h2 id="个人题解-1"><a href="#个人题解-1" class="headerlink" title="个人题解"></a>个人题解</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> sum,i = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> package,price;<br><span class="hljs-type">int</span> nprice[<span class="hljs-number">3</span>];<br><span class="hljs-type">int</span> out = INT_MAX;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; sum;<br>    <span class="hljs-keyword">while</span> (i &lt; <span class="hljs-number">3</span>)<br>    &#123;<br>        cin &gt;&gt; package &gt;&gt; price;<br>        <span class="hljs-type">int</span> times = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (times * package &lt; sum) times++;<br>        nprice[i] = times * price;<br>        i++;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">3</span>;i++) out = <span class="hljs-built_in">min</span>(out,nprice[i]);<br>    cout &lt;&lt; out &lt;&lt; endl;    <br>&#125;<br></code></pre></td></tr></table></figure><h1 id="津津的储蓄计划"><a href="#津津的储蓄计划" class="headerlink" title="津津的储蓄计划"></a>津津的储蓄计划</h1><h2 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h2><p>津津的零花钱一直都是自己管理。每个月的月初妈妈给津津 $300$ 元钱，津津会预算这个月的花销，并且总能做到实际花销和预算的相同。</p><p>为了让津津学习如何储蓄，妈妈提出，津津可以随时把整百的钱存在她那里，到了年末她会加上 $20%$ 还给津津。因此津津制定了一个储蓄计划：每个月的月初，在得到妈妈给的零花钱后，如果她预计到这个月的月末手中还会有多于 $100$ 元或恰好 $100$ 元，她就会把整百的钱存在妈妈那里，剩余的钱留在自己手中。</p><p>例如 $11$月初津津手中还有 $83$ 元，妈妈给了津津 $300$ 元。津津预计$11$月的花销是 $180$ 元，那么她就会在妈妈那里存 $200$ 元，自己留下 $183$ 元。到了 $11$ 月月末，津津手中会剩下 $3$ 元钱。</p><p>津津发现这个储蓄计划的主要风险是，存在妈妈那里的钱在年末之前不能取出。有可能在某个月的月初，津津手中的钱加上这个月妈妈给的钱，不够这个月的原定预算。如果出现这种情况，津津将不得不在这个月省吃俭用，压缩预算。</p><p>现在请你根据 $2004$ 年 $1$ 月到 $12$ 月每个月津津的预算，判断会不会出现这种情况。如果不会，计算到 $2004$ 年年末，妈妈将津津平常存的钱加上 $20%$ 还给津津之后，津津手中会有多少钱。</p><h2 id="输入格式-2"><a href="#输入格式-2" class="headerlink" title="输入格式"></a>输入格式</h2><p>$12$ 行数据，每行包含一个小于 $350$ 的非负整数，分别表示 $1$ 月到 $12$ 月津津的预算。</p><h2 id="输出格式-2"><a href="#输出格式-2" class="headerlink" title="输出格式"></a>输出格式</h2><p>一个整数。如果储蓄计划实施过程中出现某个月钱不够用的情况，输出 $-X$，$X$ 表示出现这种情况的第一个月；否则输出到 $2004$ 年年末津津手中会有多少钱。</p><p>注意，洛谷不需要进行文件输入输出，而是标准输入输出。</p><h2 id="样例-1-2"><a href="#样例-1-2" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1-2"><a href="#样例输入-1-2" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">290</span><br><span class="hljs-number">230</span><br><span class="hljs-number">280</span><br><span class="hljs-number">200</span><br><span class="hljs-number">300</span><br><span class="hljs-number">170</span><br><span class="hljs-number">340</span><br><span class="hljs-symbol">50 </span><br><span class="hljs-symbol">90 </span><br><span class="hljs-symbol">80 </span><br><span class="hljs-number">200</span><br><span class="hljs-number">60</span><br></code></pre></td></tr></table></figure><h3 id="样例输出-1-2"><a href="#样例输出-1-2" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-7</span><br></code></pre></td></tr></table></figure><h2 id="样例-2-1"><a href="#样例-2-1" class="headerlink" title="样例 #2"></a>样例 #2</h2><h3 id="样例输入-2-1"><a href="#样例输入-2-1" class="headerlink" title="样例输入 #2"></a>样例输入 #2</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">290 </span><br><span class="hljs-symbol">230 </span><br><span class="hljs-symbol">280 </span><br><span class="hljs-symbol">200 </span><br><span class="hljs-symbol">300 </span><br><span class="hljs-symbol">170 </span><br><span class="hljs-symbol">330 </span><br><span class="hljs-symbol">50 </span><br><span class="hljs-symbol">90 </span><br><span class="hljs-symbol">80 </span><br><span class="hljs-symbol">200 </span><br><span class="hljs-number">60</span><br></code></pre></td></tr></table></figure><h3 id="样例输出-2-1"><a href="#样例输出-2-1" class="headerlink" title="样例输出 #2"></a>样例输出 #2</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-number">1580</span><br></code></pre></td></tr></table></figure><h2 id="个人题解-2"><a href="#个人题解-2" class="headerlink" title="个人题解"></a>个人题解</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> month = <span class="hljs-number">12</span>;<br><span class="hljs-type">int</span> surplus = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> hundred = <span class="hljs-number">0</span>;<br><span class="hljs-type">bool</span> continueStop = <span class="hljs-literal">false</span>;<br><span class="hljs-type">int</span> X;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (i &lt; month)<br>    &#123;<br>        <span class="hljs-type">int</span> money;<br>        cin &gt;&gt; money;<br>        surplus = <span class="hljs-number">300</span> + surplus - money;<br>        <span class="hljs-keyword">while</span> (surplus &gt;= <span class="hljs-number">100</span>)<br>        &#123;<br>            surplus -= <span class="hljs-number">100</span>;<br>            hundred += <span class="hljs-number">100</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (surplus &lt; <span class="hljs-number">0</span> &amp;&amp; !continueStop)<br>        &#123;<br>            continueStop = <span class="hljs-literal">true</span>;<br>            X = i + <span class="hljs-number">1</span>;<br>        &#125;<br>        i++;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (continueStop)<br>        cout &lt;&lt; <span class="hljs-string">&quot;-&quot;</span> &lt;&lt; X &lt;&lt; endl;<br>    <span class="hljs-keyword">else</span><br>        cout &lt;&lt; hundred * <span class="hljs-number">1.2</span> + surplus &lt;&lt; endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="不高兴的津津"><a href="#不高兴的津津" class="headerlink" title="不高兴的津津"></a>不高兴的津津</h1><h2 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h2><p>津津上初中了。妈妈认为津津应该更加用功学习，所以津津除了上学之外，还要参加妈妈为她报名的各科复习班。另外每周妈妈还会送她去学习朗诵、舞蹈和钢琴。但是津津如果一天上课超过八个小时就会不高兴，而且上得越久就会越不高兴。假设津津不会因为其它事不高兴，并且她的不高兴不会持续到第二天。请你帮忙检查一下津津下周的日程安排，看看下周她会不会不高兴；如果会的话，哪天最不高兴。</p><h2 id="输入格式-3"><a href="#输入格式-3" class="headerlink" title="输入格式"></a>输入格式</h2><p>输入包括 $7$ 行数据，分别表示周一到周日的日程安排。每行包括两个小于 $10$ 的非负整数，用空格隔开，分别表示津津在学校上课的时间和妈妈安排她上课的时间。</p><h2 id="输出格式-3"><a href="#输出格式-3" class="headerlink" title="输出格式"></a>输出格式</h2><p>一个数字。如果不会不高兴则输出 $0$，如果会则输出最不高兴的是周几（用 $1, 2, 3, 4, 5, 6, 7$ 分别表示周一，周二，周三，周四，周五，周六，周日）。如果有两天或两天以上不高兴的程度相当，则输出时间最靠前的一天。</p><h2 id="样例-1-3"><a href="#样例-1-3" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1-3"><a href="#样例输入-1-3" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">5 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">6 </span><span class="hljs-number">2</span><br><span class="hljs-symbol">7 </span><span class="hljs-number">2</span><br><span class="hljs-symbol">5 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">5 </span><span class="hljs-number">4</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">4</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><h3 id="样例输出-1-3"><a href="#样例输出-1-3" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">3<br></code></pre></td></tr></table></figure><h2 id="提示-2"><a href="#提示-2" class="headerlink" title="提示"></a>提示</h2><p>NOIP2004 普及组第 1 题</p><ul><li>2021-10-27：增加一组 hack 数据</li><li>2022-06-05：又增加一组 hack 数据</li></ul><h2 id="个人题解-3"><a href="#个人题解-3" class="headerlink" title="个人题解"></a>个人题解</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">bool</span> nohappy = <span class="hljs-literal">false</span>;<br><span class="hljs-type">int</span> maxnohappyday;<br><span class="hljs-type">int</span> maxnohappyvalue = INT_MIN;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (i++ &lt; <span class="hljs-number">7</span>)<br>    &#123;<br>        <span class="hljs-type">int</span> a,b;<br>        cin &gt;&gt; a &gt;&gt; b;<br>        <span class="hljs-keyword">if</span> (a + b &gt; <span class="hljs-number">8</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (maxnohappyvalue &lt; a + b)<br>            &#123;<br>                nohappy = <span class="hljs-literal">true</span>;<br>                maxnohappyday = i;<br>                maxnohappyvalue = a + b;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (nohappy) cout &lt;&lt; maxnohappyday &lt;&lt; endl;<br>    <span class="hljs-keyword">else</span> cout &lt;&lt; <span class="hljs-number">0</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="级数求和"><a href="#级数求和" class="headerlink" title="级数求和"></a>级数求和</h1><h2 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h2><p>已知：$S_n= 1+\frac{1}{2}+\frac{1}{3}+…+\frac{1}{n}$。显然对于任意一个整数 $k$，当 $n$ 足够大的时候，$S_n&gt;k$。</p><p>现给出一个整数 $k$，要求计算出一个最小的 $n$，使得 $S_n&gt;k$。</p><h2 id="输入格式-4"><a href="#输入格式-4" class="headerlink" title="输入格式"></a>输入格式</h2><p>一个正整数 $k$。</p><h2 id="输出格式-4"><a href="#输出格式-4" class="headerlink" title="输出格式"></a>输出格式</h2><p>一个正整数 $n$。</p><h2 id="样例-1-4"><a href="#样例-1-4" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1-4"><a href="#样例输入-1-4" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">1<br></code></pre></td></tr></table></figure><h3 id="样例输出-1-4"><a href="#样例输出-1-4" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">2<br></code></pre></td></tr></table></figure><h2 id="提示-3"><a href="#提示-3" class="headerlink" title="提示"></a>提示</h2><p><strong>【数据范围】</strong></p><p>对于 $100%$ 的数据，$1\le k \le 15$。</p><p><strong>【题目来源】</strong></p><p>NOIP 2002 普及组第一题</p><h2 id="个人题解-4"><a href="#个人题解-4" class="headerlink" title="个人题解"></a>个人题解</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">double</span> sum = <span class="hljs-number">0</span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> k;<br>    cin &gt;&gt; k;<br>    <span class="hljs-keyword">while</span> (sum &lt;= k)<br>        sum += (<span class="hljs-type">double</span>)<span class="hljs-number">1</span>/++i;<br>    cout &lt;&lt; i;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="计数问题"><a href="#计数问题" class="headerlink" title="计数问题"></a>计数问题</h1><h2 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述"></a>题目描述</h2><p>试计算在区间 $1$ 到 $n$ 的所有整数中，数字 $x$（$0\le x\le9$）共出现了多少次？例如，在 $1$ 到 $11$ 中，即在 $1,2,3,4,5,6,7,8,9,10,11$ 中，数字 $1$ 出现了 $4$ 次。</p><h2 id="输入格式-5"><a href="#输入格式-5" class="headerlink" title="输入格式"></a>输入格式</h2><p>$2$ 个整数 $n,x$，之间用一个空格隔开。</p><h2 id="输出格式-5"><a href="#输出格式-5" class="headerlink" title="输出格式"></a>输出格式</h2><p>$1$ 个整数，表示 $x$ 出现的次数。</p><h2 id="样例-1-5"><a href="#样例-1-5" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1-5"><a href="#样例输入-1-5" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">11 </span><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h3 id="样例输出-1-5"><a href="#样例输出-1-5" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">4<br></code></pre></td></tr></table></figure><h2 id="提示-4"><a href="#提示-4" class="headerlink" title="提示"></a>提示</h2><p>对于 $100%$ 的数据，$1\le n\le 10^6$，$0\le x \le 9$。</p><h2 id="个人题解-5"><a href="#个人题解-5" class="headerlink" title="个人题解"></a>个人题解</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> number, num;<br>    cin &gt;&gt; number &gt;&gt; num;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= number; i++)<br>    &#123;<br>        <span class="hljs-type">int</span> tmp = i;<br>        <span class="hljs-keyword">while</span> (tmp &gt; <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (tmp % <span class="hljs-number">10</span> == num) sum++;<br>            tmp /= <span class="hljs-number">10</span>;<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; sum &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Cantor-表"><a href="#Cantor-表" class="headerlink" title="Cantor 表"></a>Cantor 表</h1><h2 id="题目描述-6"><a href="#题目描述-6" class="headerlink" title="题目描述"></a>题目描述</h2><p>现代数学的著名证明之一是 Georg Cantor 证明了有理数是可枚举的。他是用下面这一张表来证明这一命题的：</p><p>$1/1$ ,   $1/2$ ,   $1/3$ ,   $1/4$,    $1/5$,   …</p><p>$2/1$,   $2/2$ ,   $2/3$,    $2/4$,    …</p><p>$3/1$ ,   $3/2$,    $3/3$,    …</p><p>$4/1$,    $4/2$,    …</p><p>$5/1$,   …</p><p>…</p><p>我们以 Z 字形给上表的每一项编号。第一项是 $1/1$，然后是 $1/2$，$2/1$，$3/1$，$2/2$，…</p><h2 id="输入格式-6"><a href="#输入格式-6" class="headerlink" title="输入格式"></a>输入格式</h2><p>整数$N$（$1 \leq N \leq 10^7$）。</p><h2 id="输出格式-6"><a href="#输出格式-6" class="headerlink" title="输出格式"></a>输出格式</h2><p>表中的第 $N$ 项。</p><h2 id="样例-1-6"><a href="#样例-1-6" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1-6"><a href="#样例输入-1-6" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">7<br></code></pre></td></tr></table></figure><h3 id="样例输出-1-6"><a href="#样例输出-1-6" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>/<span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><h2 id="个人题解-6"><a href="#个人题解-6" class="headerlink" title="个人题解"></a>个人题解</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> N;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; N;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>, tmp = N;<br>    <span class="hljs-keyword">while</span> (tmp &gt; <span class="hljs-number">0</span>)<br>        tmp -= i++;<br>    <span class="hljs-comment">// cout &lt;&lt; tmp &lt;&lt; endl;</span><br>    <span class="hljs-keyword">if</span> (i % <span class="hljs-number">2</span>)<br>        cout &lt;&lt; tmp + i - <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-string">&quot;/&quot;</span> &lt;&lt; <span class="hljs-built_in">abs</span>(tmp) + <span class="hljs-number">1</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">else</span><br>        cout &lt;&lt; <span class="hljs-built_in">abs</span>(tmp) + <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-string">&quot;/&quot;</span> &lt;&lt; tmp + i - <span class="hljs-number">1</span> &lt;&lt; endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="数字反转"><a href="#数字反转" class="headerlink" title="数字反转"></a>数字反转</h1><h2 id="题目描述-7"><a href="#题目描述-7" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个整数 $N$，请将该数各个位上数字反转得到一个新数。新数也应满足整数的常见形式，即除非给定的原数为零，否则反转后得到的新数的最高位数字不应为零（参见样例 2）。</p><h2 id="输入格式-7"><a href="#输入格式-7" class="headerlink" title="输入格式"></a>输入格式</h2><p>一个整数 $N$。</p><h2 id="输出格式-7"><a href="#输出格式-7" class="headerlink" title="输出格式"></a>输出格式</h2><p>一个整数，表示反转后的新数。</p><h2 id="样例-1-7"><a href="#样例-1-7" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1-7"><a href="#样例输入-1-7" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">123<br></code></pre></td></tr></table></figure><h3 id="样例输出-1-7"><a href="#样例输出-1-7" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">321<br></code></pre></td></tr></table></figure><h2 id="样例-2-2"><a href="#样例-2-2" class="headerlink" title="样例 #2"></a>样例 #2</h2><h3 id="样例输入-2-2"><a href="#样例输入-2-2" class="headerlink" title="样例输入 #2"></a>样例输入 #2</h3><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-380</span><br></code></pre></td></tr></table></figure><h3 id="样例输出-2-2"><a href="#样例输出-2-2" class="headerlink" title="样例输出 #2"></a>样例输出 #2</h3><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-83</span><br></code></pre></td></tr></table></figure><h2 id="提示-5"><a href="#提示-5" class="headerlink" title="提示"></a>提示</h2><p><strong>【数据范围】</strong></p><p>$-1,000,000,000\leq N\leq 1,000,000,000 $。</p><p>noip2011 普及组第一题</p><h2 id="个人题解-7"><a href="#个人题解-7" class="headerlink" title="个人题解"></a>个人题解</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> start = <span class="hljs-number">0</span>;<br>string N;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; N;<br>    <span class="hljs-keyword">if</span> (N[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; N.<span class="hljs-built_in">size</span>() == <span class="hljs-number">1</span>)<br>        cout &lt;&lt; N;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (N[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;-&#x27;</span>)<br>            start = <span class="hljs-number">1</span>;<br>        <span class="hljs-built_in">reverse</span>(N.<span class="hljs-built_in">begin</span>() + start, N.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = start; N[i] == <span class="hljs-string">&#x27;0&#x27;</span>; i++)<br>            N.<span class="hljs-built_in">erase</span>(i--, <span class="hljs-number">1</span>);<br>        cout &lt;&lt; N;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="陶陶摘苹果"><a href="#陶陶摘苹果" class="headerlink" title="陶陶摘苹果"></a>陶陶摘苹果</h1><h2 id="题目描述-8"><a href="#题目描述-8" class="headerlink" title="题目描述"></a>题目描述</h2><p>陶陶家的院子里有一棵苹果树，每到秋天树上就会结出 $10$ 个苹果。苹果成熟的时候，陶陶就会跑去摘苹果。陶陶有个 $30$ 厘米高的板凳，当她不能直接用手摘到苹果的时候，就会踩到板凳上再试试。</p><p>现在已知 $10$ 个苹果到地面的高度，以及陶陶把手伸直的时候能够达到的最大高度，请帮陶陶算一下她能够摘到的苹果的数目。假设她碰到苹果，苹果就会掉下来。</p><h2 id="输入格式-8"><a href="#输入格式-8" class="headerlink" title="输入格式"></a>输入格式</h2><p>输入包括两行数据。第一行包含 $10$ 个 $100$ 到 $200$ 之间（包括 $100$ 和 $200$ ）的整数（以厘米为单位）分别表示 $10$ 个苹果到地面的高度，两个相邻的整数之间用一个空格隔开。第二行只包括一个 $100$ 到 $120$ 之间（包含 $100$ 和 $120$ ）的整数（以厘米为单位），表示陶陶把手伸直的时候能够达到的最大高度。</p><h2 id="输出格式-8"><a href="#输出格式-8" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出包括一行，这一行只包含一个整数，表示陶陶能够摘到的苹果的数目。</p><h2 id="样例-1-8"><a href="#样例-1-8" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1-8"><a href="#样例输入-1-8" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">100 </span><span class="hljs-number">200</span> <span class="hljs-number">150</span> <span class="hljs-number">140</span> <span class="hljs-number">129</span> <span class="hljs-number">134</span> <span class="hljs-number">167</span> <span class="hljs-number">198</span> <span class="hljs-number">200</span> <span class="hljs-number">111</span><br><span class="hljs-number">110</span><br></code></pre></td></tr></table></figure><h3 id="样例输出-1-8"><a href="#样例输出-1-8" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">5<br></code></pre></td></tr></table></figure><h2 id="提示-6"><a href="#提示-6" class="headerlink" title="提示"></a>提示</h2><p><strong>【题目来源】</strong></p><p>NOIP 2005 普及组第一题</p><h2 id="个人题解-8"><a href="#个人题解-8" class="headerlink" title="个人题解"></a>个人题解</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> height[<span class="hljs-number">10</span>];<br><span class="hljs-type">int</span> H,sum = <span class="hljs-number">0</span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">10</span>;i++) cin &gt;&gt; height[i];<br>    cin &gt;&gt; H;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">10</span>;i++) <span class="hljs-keyword">if</span> (height[i] &lt;= H + <span class="hljs-number">30</span>) sum++;<br>    cout &lt;&lt; sum ;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="校门外的树"><a href="#校门外的树" class="headerlink" title="校门外的树"></a>校门外的树</h1><h2 id="题目描述-9"><a href="#题目描述-9" class="headerlink" title="题目描述"></a>题目描述</h2><p>某校大门外长度为 $l$ 的马路上有一排树，每两棵相邻的树之间的间隔都是 $1$ 米。我们可以把马路看成一个数轴，马路的一端在数轴 $0$ 的位置，另一端在 $l$ 的位置；数轴上的每个整数点，即 $0,1,2,\dots,l$，都种有一棵树。</p><p>由于马路上有一些区域要用来建地铁。这些区域用它们在数轴上的起始点和终止点表示。已知任一区域的起始点和终止点的坐标都是整数，区域之间可能有重合的部分。现在要把这些区域中的树（包括区域端点处的两棵树）移走。你的任务是计算将这些树都移走后，马路上还有多少棵树。</p><h2 id="输入格式-9"><a href="#输入格式-9" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行有两个整数，分别表示马路的长度 $l$ 和区域的数目 $m$。</p><p>接下来 $m$ 行，每行两个整数 $u, v$，表示一个区域的起始点和终止点的坐标。</p><h2 id="输出格式-9"><a href="#输出格式-9" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出一行一个整数，表示将这些树都移走后，马路上剩余的树木数量。</p><h2 id="样例-1-9"><a href="#样例-1-9" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1-9"><a href="#样例输入-1-9" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">500 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">150 </span><span class="hljs-number">300</span><br><span class="hljs-symbol">100 </span><span class="hljs-number">200</span><br><span class="hljs-symbol">470 </span><span class="hljs-number">471</span><br></code></pre></td></tr></table></figure><h3 id="样例输出-1-9"><a href="#样例输出-1-9" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">298<br></code></pre></td></tr></table></figure><h2 id="提示-7"><a href="#提示-7" class="headerlink" title="提示"></a>提示</h2><p><strong>【数据范围】</strong></p><ul><li>对于 $20%$ 的数据，保证区域之间没有重合的部分。</li><li>对于 $100%$ 的数据，保证 $1 \leq l \leq 10^4$，$1 \leq m \leq 100$，$0 \leq u \leq v \leq l$。</li></ul><p><strong>【题目来源】</strong></p><p>NOIP 2005 普及组第二题</p><h2 id="个人题解-9"><a href="#个人题解-9" class="headerlink" title="个人题解"></a>个人题解</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> start[<span class="hljs-number">10010</span>], endm[<span class="hljs-number">10010</span>];<br><span class="hljs-type">int</span> l, m, sum = <span class="hljs-number">0</span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; l &gt;&gt; m;<br>    <span class="hljs-built_in">memset</span>(start, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> start);<br>    <span class="hljs-built_in">memset</span>(endm, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> endm);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)<br>        cin &gt;&gt; start[i] &gt;&gt; endm[i];<br>    <span class="hljs-built_in">sort</span>(start, start + m);<br>    <span class="hljs-built_in">sort</span>(endm, endm + m);<br>    <span class="hljs-type">int</span> lastend = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (start[i] &lt; lastend)<br>            sum += endm[i] - lastend;<br>        <span class="hljs-keyword">else</span><br>            sum += endm[i] - start[i] + <span class="hljs-number">1</span>;<br>        lastend = endm[i];<br>    &#125;<br>    cout &lt;&lt; l + <span class="hljs-number">1</span> - sum&lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="小鱼的数字游戏"><a href="#小鱼的数字游戏" class="headerlink" title="小鱼的数字游戏"></a>小鱼的数字游戏</h1><h2 id="题目描述-10"><a href="#题目描述-10" class="headerlink" title="题目描述"></a>题目描述</h2><p>小鱼最近被要求参加一个数字游戏，要求它把看到的一串数字 $a_i$（长度不一定，以 $0$ 结束），记住了然后反着念出来（表示结束的数字 $0$ 就不要念出来了）。这对小鱼的那点记忆力来说实在是太难了，你也不想想小鱼的整个脑袋才多大，其中一部分还是好吃的肉！所以请你帮小鱼编程解决这个问题。</p><h2 id="输入格式-10"><a href="#输入格式-10" class="headerlink" title="输入格式"></a>输入格式</h2><p>一行内输入一串整数，以 $0$ 结束，以空格间隔。</p><h2 id="输出格式-10"><a href="#输出格式-10" class="headerlink" title="输出格式"></a>输出格式</h2><p>一行内倒着输出这一串整数，以空格间隔。</p><h2 id="样例-1-10"><a href="#样例-1-10" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1-10"><a href="#样例输入-1-10" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">3 </span><span class="hljs-number">65</span> <span class="hljs-number">23</span> <span class="hljs-number">5</span> <span class="hljs-number">34</span> <span class="hljs-number">1</span> <span class="hljs-number">30</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h3 id="样例输出-1-10"><a href="#样例输出-1-10" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">30 </span><span class="hljs-number">1</span> <span class="hljs-number">34</span> <span class="hljs-number">5</span> <span class="hljs-number">23</span> <span class="hljs-number">65</span> <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h2 id="提示-8"><a href="#提示-8" class="headerlink" title="提示"></a>提示</h2><h4 id="数据规模与约定-1"><a href="#数据规模与约定-1" class="headerlink" title="数据规模与约定"></a>数据规模与约定</h4><p>对于 $100%$ 的数据，保证 $0 \leq a_i \leq 2^{31} - 1$，数字个数不超过 $100$。</p><h2 id="个人题解-10"><a href="#个人题解-10" class="headerlink" title="个人题解"></a>个人题解</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ull;<br>ull nums[<span class="hljs-number">101</span>];<br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ull tmp;<br>    cin &gt;&gt; tmp;<br>    <span class="hljs-keyword">while</span> (tmp != <span class="hljs-number">0</span>)<br>    &#123;<br>        nums[i++] = tmp;<br>        cin &gt;&gt; tmp;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i - <span class="hljs-number">1</span>;j &gt;= <span class="hljs-number">0</span>;j--) cout &lt;&lt; nums[j] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="珠心算测验"><a href="#珠心算测验" class="headerlink" title="珠心算测验"></a>珠心算测验</h1><h2 id="题目描述-11"><a href="#题目描述-11" class="headerlink" title="题目描述"></a>题目描述</h2><p>珠心算是一种通过在脑中模拟算盘变化来完成快速运算的一种计算技术。珠心算训练，既能够开发智力，又能够为日常生活带来很多便利，因而在很多学校得到普及。</p><p>某学校的珠心算老师采用一种快速考察珠心算加法能力的测验方法。他随机生成一个正整数集合，集合中的数各不相同，然后要求学生回答：其中有多少个数，恰好等于集合中另外两个（不同的）数之和？</p><p>最近老师出了一些测验题，请你帮忙求出答案。</p><p>(本题目为 2014NOIP 普及 T1)</p><h2 id="输入格式-11"><a href="#输入格式-11" class="headerlink" title="输入格式"></a>输入格式</h2><p>共两行，第一行包含一个整数 $n$，表示测试题中给出的正整数个数。</p><p>第二行有 $n$ 个正整数，每两个正整数之间用一个空格隔开，表示测试题中给出的正整数。</p><h2 id="输出格式-11"><a href="#输出格式-11" class="headerlink" title="输出格式"></a>输出格式</h2><p>一个整数，表示测验题答案。</p><h2 id="样例-1-11"><a href="#样例-1-11" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1-11"><a href="#样例输入-1-11" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">4</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><h3 id="样例输出-1-11"><a href="#样例输出-1-11" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">2<br></code></pre></td></tr></table></figure><h2 id="提示-9"><a href="#提示-9" class="headerlink" title="提示"></a>提示</h2><p>【样例说明】</p><p>由 $1+2=3,1+3=4$，故满足测试要求的答案为 $2$。  </p><p>注意，加数和被加数必须是集合中的两个不同的数。</p><p>【数据说明】</p><p>对于 $100%$ 的数据，$3 \leq n \leq 100$，测验题给出的正整数大小不超过 $10,000$。</p><h2 id="个人题解-11"><a href="#个人题解-11" class="headerlink" title="个人题解"></a>个人题解</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> N, sum = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> nums[<span class="hljs-number">101</span>];<br><span class="hljs-type">bool</span> numsuc[<span class="hljs-number">101</span>];<span class="hljs-comment">// 问： 其中有多少个数</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; N;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++)<br>        cin &gt;&gt; nums[i];<br>    <span class="hljs-built_in">sort</span>(nums, nums + N);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt; N; i++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; i; j++)<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = j + <span class="hljs-number">1</span>; k &lt; i; k++)<br>                <span class="hljs-keyword">if</span> (nums[j] + nums[k] == nums[i])<br>                    numsuc[i] = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++)<br>        <span class="hljs-keyword">if</span> (numsuc[i])<br>            sum++;<br>    cout &lt;&lt; sum;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="【XR-4】模拟赛"><a href="#【XR-4】模拟赛" class="headerlink" title="【XR-4】模拟赛"></a>【XR-4】模拟赛</h1><h2 id="题目描述-12"><a href="#题目描述-12" class="headerlink" title="题目描述"></a>题目描述</h2><p>X 校正在进行 CSP 前的校内集训。</p><p>一共有 $n$ 名 OIer 参与这次集训，教练为他们精心准备了 $m$ 套模拟赛题。</p><p>然而，每名 OIer 都有各自的时间安排，巧合的是，他们在接下来的 $k$ 天中都恰好有 $m$ 天有空打模拟赛。</p><p>为了方便管理，教练规定一个人必须按顺序打完 $m$ 套模拟赛题。</p><p>比如，小 X 在接下来的第 $2,3,5$ 天有空打模拟赛，那么他就必须在第 $2$ 天打第 $1$ 套模拟赛题，第 $3$ 天打第 $2$ 套模拟赛题，第 $5$ 天打第 $3$ 套模拟赛题。</p><p>教练需要为每一个人的每一次模拟赛做准备，为了减小工作量，如果在某一天有多个人打同一套模拟赛题，那么教练只需要在这一天准备一场使用这一套题的模拟赛即可。</p><p>你作为机房大佬，教练想请你帮他计算一下，他每天需要准备多少场模拟赛。</p><h2 id="输入格式-12"><a href="#输入格式-12" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行三个整数 $n,m,k$。</p><p>接下来 $n$ 行，每行 $m$ 个整数，第 $i$ 行第 $j$ 列的整数 $a_{i,j}$ 表示第 $i$ 个人在接下来的 $k$ 天中第 $j$ 个有空的日子为第 $a_{i,j}$ 天。</p><h2 id="输出格式-12"><a href="#输出格式-12" class="headerlink" title="输出格式"></a>输出格式</h2><p>一行 $k$ 个整数，第 $i$ 个整数表示接下来的第 $i$ 天教练需要准备的模拟赛场数。</p><h2 id="样例-1-12"><a href="#样例-1-12" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1-12"><a href="#样例输入-1-12" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span><span class="hljs-number">3</span> <span class="hljs-number">5</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">3</span> <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><h3 id="样例输出-1-12"><a href="#样例输出-1-12" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">0 </span><span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h2 id="样例-2-3"><a href="#样例-2-3" class="headerlink" title="样例 #2"></a>样例 #2</h2><h3 id="样例输入-2-3"><a href="#样例输入-2-3" class="headerlink" title="样例输入 #2"></a>样例输入 #2</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">6 </span><span class="hljs-number">3</span> <span class="hljs-number">7</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">3</span> <span class="hljs-number">4</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">5</span> <span class="hljs-number">7</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">5</span> <span class="hljs-number">7</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">3</span> <span class="hljs-number">5</span><br><span class="hljs-symbol">5 </span><span class="hljs-number">6</span> <span class="hljs-number">7</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h3 id="样例输出-2-3"><a href="#样例输出-2-3" class="headerlink" title="样例输出 #2"></a>样例输出 #2</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h2 id="样例-3-1"><a href="#样例-3-1" class="headerlink" title="样例 #3"></a>样例 #3</h2><h3 id="样例输入-3-1"><a href="#样例输入-3-1" class="headerlink" title="样例输入 #3"></a>样例输入 #3</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">10 </span><span class="hljs-number">10</span> <span class="hljs-number">20</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span> <span class="hljs-number">11</span> <span class="hljs-number">12</span> <span class="hljs-number">16</span> <span class="hljs-number">17</span> <span class="hljs-number">18</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">3</span> <span class="hljs-number">6</span> <span class="hljs-number">10</span> <span class="hljs-number">12</span> <span class="hljs-number">13</span> <span class="hljs-number">14</span> <span class="hljs-number">15</span> <span class="hljs-number">19</span> <span class="hljs-number">20</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">3</span> <span class="hljs-number">7</span> <span class="hljs-number">10</span> <span class="hljs-number">11</span> <span class="hljs-number">13</span> <span class="hljs-number">14</span> <span class="hljs-number">15</span> <span class="hljs-number">17</span> <span class="hljs-number">19</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">4</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">9</span> <span class="hljs-number">15</span> <span class="hljs-number">17</span> <span class="hljs-number">19</span> <span class="hljs-number">20</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">3</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">9</span> <span class="hljs-number">11</span> <span class="hljs-number">14</span> <span class="hljs-number">16</span> <span class="hljs-number">19</span> <span class="hljs-number">20</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span> <span class="hljs-number">10</span> <span class="hljs-number">11</span> <span class="hljs-number">12</span> <span class="hljs-number">15</span> <span class="hljs-number">19</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">4</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">9</span> <span class="hljs-number">12</span> <span class="hljs-number">13</span> <span class="hljs-number">17</span> <span class="hljs-number">18</span> <span class="hljs-number">19</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span> <span class="hljs-number">10</span> <span class="hljs-number">11</span> <span class="hljs-number">13</span> <span class="hljs-number">15</span> <span class="hljs-number">18</span> <span class="hljs-number">20</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span> <span class="hljs-number">13</span> <span class="hljs-number">16</span> <span class="hljs-number">18</span> <span class="hljs-number">19</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">5</span> <span class="hljs-number">7</span> <span class="hljs-number">10</span> <span class="hljs-number">11</span> <span class="hljs-number">13</span> <span class="hljs-number">14</span> <span class="hljs-number">17</span> <span class="hljs-number">18</span> <span class="hljs-number">20</span><br></code></pre></td></tr></table></figure><h3 id="样例输出-3-1"><a href="#样例输出-3-1" class="headerlink" title="样例输出 #3"></a>样例输出 #3</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">4</span> <span class="hljs-number">3</span> <span class="hljs-number">3</span> <span class="hljs-number">3</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h2 id="提示-10"><a href="#提示-10" class="headerlink" title="提示"></a>提示</h2><p><strong>本题采用捆绑测试。</strong></p><ul><li>Subtask 1（13 points）：$n = m = k = 1$。</li><li>Subtask 2（24 points）：$n = 1$。</li><li>Subtask 3（24 points）：$m = 1$。</li><li>Subtask 4（39 points）：无特殊限制。</li></ul><p>对于 $100%$ 的数据，$1 \le n,m,k \le 10^3$，$m \le k$，$1 \le a_{i,1} &lt; a_{i,2} &lt; \cdots &lt; a_{i,m} \le k$。</p><h2 id="个人题解-12"><a href="#个人题解-12" class="headerlink" title="个人题解"></a>个人题解</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> n, m, k;<br><span class="hljs-type">int</span> nums[<span class="hljs-number">1010</span>][<span class="hljs-number">1010</span>];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-number">0</span>);<br>    cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j++)<br>        &#123;<br>            <span class="hljs-type">int</span> tmp;<br>            cin &gt;&gt; tmp;<br>            nums[tmp][j] = <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= k; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j++)<br>            nums[i][j] += nums[i][j<span class="hljs-number">-1</span>];<br>        cout &lt;&lt; nums[i][m] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="标题统计"><a href="#标题统计" class="headerlink" title="标题统计"></a>标题统计</h1><h2 id="题目描述-13"><a href="#题目描述-13" class="headerlink" title="题目描述"></a>题目描述</h2><p>凯凯刚写了一篇美妙的作文，请问这篇作文的标题中有多少个字符？   注意：标题中可能包含大、小写英文字母、数字字符、空格和换行符。统计标题字 符数时，空格和换行符不计算在内。</p><h2 id="输入格式-13"><a href="#输入格式-13" class="headerlink" title="输入格式"></a>输入格式</h2><p>输入文件只有一行，一个字符串 $s$。</p><h2 id="输出格式-13"><a href="#输出格式-13" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出文件只有一行，包含一个整数，即作文标题的字符数（不含空格和换行符）。</p><h2 id="样例-1-13"><a href="#样例-1-13" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1-13"><a href="#样例输入-1-13" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">234<br></code></pre></td></tr></table></figure><h3 id="样例输出-1-13"><a href="#样例输出-1-13" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">3<br></code></pre></td></tr></table></figure><h2 id="样例-2-4"><a href="#样例-2-4" class="headerlink" title="样例 #2"></a>样例 #2</h2><h3 id="样例输入-2-4"><a href="#样例输入-2-4" class="headerlink" title="样例输入 #2"></a>样例输入 #2</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Ca</span> <span class="hljs-number">45</span><br></code></pre></td></tr></table></figure><h3 id="样例输出-2-4"><a href="#样例输出-2-4" class="headerlink" title="样例输出 #2"></a>样例输出 #2</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">4<br></code></pre></td></tr></table></figure><h2 id="提示-11"><a href="#提示-11" class="headerlink" title="提示"></a>提示</h2><p>【输入输出样例 1 说明】<br>标题中共有 3 个字符，这 3 个字符都是数字字符。   </p><p>【输入输出样例 2 说明】 标题中共有$ 5$ 个字符，包括 $1$ 个大写英文字母， $1$ 个小写英文字母和 $2$ 个数字字符， 还有 $1$ 个空格。由于空格不计入结果中，故标题的有效字符数为 $4$ 个。   </p><p>【数据规模与约定】<br>规定 $|s|$ 表示字符串 $s$ 的长度（即字符串中的字符和空格数）。<br>对于 $40%$ 的数据，$1 ≤ |s| ≤ 5$，保证输入为数字字符及行末换行符。<br>对于 $80%$ 的数据，$1 ≤ |s| ≤ 5$，输入只可能包含大、小写英文字母、数字字符及行末换行符。<br>对于 $100%$ 的数据，$1 ≤ |s| ≤ 5$，输入可能包含大、小写英文字母、数字字符、空格和行末换行符。</p><h2 id="个人题解-13"><a href="#个人题解-13" class="headerlink" title="个人题解"></a>个人题解</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br>string str;<br><span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">getline</span>(cin, str);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; str.<span class="hljs-built_in">size</span>(); i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (str[i] != <span class="hljs-string">&#x27; &#x27;</span> || str[i] == <span class="hljs-string">&#x27;\n&#x27;</span>)<br>            sum++;<br>    &#125;<br>    cout &lt;&lt; sum;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="ISBN-号码"><a href="#ISBN-号码" class="headerlink" title="ISBN 号码"></a>ISBN 号码</h1><h2 id="题目描述-14"><a href="#题目描述-14" class="headerlink" title="题目描述"></a>题目描述</h2><p>每一本正式出版的图书都有一个 ISBN 号码与之对应，ISBN 码包括 $9$ 位数字、$1$ 位识别码和 $3$ 位分隔符，其规定格式如 <code>x-xxx-xxxxx-x</code>，其中符号 <code>-</code> 就是分隔符（键盘上的减号），最后一位是识别码，例如 <code>0-670-82162-4</code>就是一个标准的 ISBN 码。ISBN 码的首位数字表示书籍的出版语言，例如 $0$ 代表英语；第一个分隔符 <code>-</code> 之后的三位数字代表出版社，例如 $670$ 代表维京出版社；第二个分隔符后的五位数字代表该书在该出版社的编号；最后一位为识别码。</p><p>识别码的计算方法如下：</p><p>首位数字乘以 $1$ 加上次位数字乘以 $2$ ……以此类推，用所得的结果 $ \bmod 11$，所得的余数即为识别码，如果余数为 $10$，则识别码为大写字母 $X$。例如 ISBN 号码 <code>0-670-82162-4</code> 中的识别码 $4$ 是这样得到的：对 <code>067082162</code> 这 $9$ 个数字，从左至右，分别乘以 $1,2,\dots,9$ 再求和，即 $0\times 1+6\times 2+……+2\times 9=158$，然后取 $158 \bmod 11$ 的结果 $4$ 作为识别码。</p><p>你的任务是编写程序判断输入的 ISBN 号码中识别码是否正确，如果正确，则仅输出 <code>Right</code>；如果错误，则输出你认为是正确的 ISBN 号码。</p><h2 id="输入格式-14"><a href="#输入格式-14" class="headerlink" title="输入格式"></a>输入格式</h2><p>一个字符序列，表示一本书的 ISBN 号码（保证输入符合 ISBN 号码的格式要求）。</p><h2 id="输出格式-14"><a href="#输出格式-14" class="headerlink" title="输出格式"></a>输出格式</h2><p>一行，假如输入的 ISBN 号码的识别码正确，那么输出 <code>Right</code>，否则，按照规定的格式，输出正确的 ISBN 号码（包括分隔符 <code>-</code>）。</p><h2 id="样例-1-14"><a href="#样例-1-14" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1-14"><a href="#样例输入-1-14" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">0</span>-<span class="hljs-number">670</span>-<span class="hljs-number">82162</span>-<span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><h3 id="样例输出-1-14"><a href="#样例输出-1-14" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq"><span class="hljs-keyword">Right</span><br></code></pre></td></tr></table></figure><h2 id="样例-2-5"><a href="#样例-2-5" class="headerlink" title="样例 #2"></a>样例 #2</h2><h3 id="样例输入-2-5"><a href="#样例输入-2-5" class="headerlink" title="样例输入 #2"></a>样例输入 #2</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">0</span>-<span class="hljs-number">670</span>-<span class="hljs-number">82162</span>-<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h3 id="样例输出-2-5"><a href="#样例输出-2-5" class="headerlink" title="样例输出 #2"></a>样例输出 #2</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">0</span>-<span class="hljs-number">670</span>-<span class="hljs-number">82162</span>-<span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><h2 id="提示-12"><a href="#提示-12" class="headerlink" title="提示"></a>提示</h2><p>2008 普及组第一题</p><h2 id="个人题解-14"><a href="#个人题解-14" class="headerlink" title="个人题解"></a>个人题解</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod = <span class="hljs-number">11</span>;<br>string str;<br><span class="hljs-type">int</span> x = <span class="hljs-number">0</span>,sum = <span class="hljs-number">0</span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; str;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">12</span>;i++)<br>        <span class="hljs-keyword">if</span> (str[i] &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; str[i] &lt;= <span class="hljs-string">&#x27;9&#x27;</span>)<br>            sum += (str[i] - <span class="hljs-string">&#x27;0&#x27;</span>) * ++x;<br>    sum %= mod;<br>    <span class="hljs-keyword">if</span> (sum == str[<span class="hljs-number">12</span>] - <span class="hljs-string">&#x27;0&#x27;</span> || sum == <span class="hljs-number">10</span> &amp;&amp; str[<span class="hljs-number">12</span>] == <span class="hljs-string">&#x27;X&#x27;</span>) cout &lt;&lt; <span class="hljs-string">&quot;Right&quot;</span>;<br>    <span class="hljs-keyword">else</span> <br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">12</span>;i++) cout &lt;&lt; str[i];<br>        <span class="hljs-keyword">if</span> (sum != <span class="hljs-number">10</span>) cout &lt;&lt; sum;<br>        <span class="hljs-keyword">else</span> cout &lt;&lt; <span class="hljs-string">&quot;X&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="统计单词数"><a href="#统计单词数" class="headerlink" title="统计单词数"></a>统计单词数</h1><h2 id="题目描述-15"><a href="#题目描述-15" class="headerlink" title="题目描述"></a>题目描述</h2><p>一般的文本编辑器都有查找单词的功能，该功能可以快速定位特定单词在文章中的位置，有的还能统计出特定单词在文章中出现的次数。</p><p>现在，请你编程实现这一功能，具体要求是：给定一个单词，请你输出它在给定的文章中出现的次数和第一次出现的位置。注意：匹配单词时，不区分大小写，但要求完全匹配，即给定单词必须与文章中的某一独立单词在不区分大小写的情况下完全相同（参见样例 1），如果给定单词仅是文章中某一单词的一部分则不算匹配（参见样例 2）。</p><h2 id="输入格式-15"><a href="#输入格式-15" class="headerlink" title="输入格式"></a>输入格式</h2><p>共 $2$ 行。</p><p>第 $1$ 行为一个字符串，其中只含字母，表示给定单词；</p><p>第 $2$ 行为一个字符串，其中只可能包含字母和空格，表示给定的文章。</p><h2 id="输出格式-15"><a href="#输出格式-15" class="headerlink" title="输出格式"></a>输出格式</h2><p>一行，如果在文章中找到给定单词则输出两个整数，两个整数之间用一个空格隔开，分别是单词在文章中出现的次数和第一次出现的位置（即在文章中第一次出现时，单词首字母在文章中的位置，位置从 $0$ 开始）；如果单词在文章中没有出现，则直接输出一个整数 $-1$。</p><h2 id="样例-1-15"><a href="#样例-1-15" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1-15"><a href="#样例输入-1-15" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim">To<br><span class="hljs-keyword">to</span> <span class="hljs-keyword">be</span> <span class="hljs-built_in">or</span> not <span class="hljs-keyword">to</span> <span class="hljs-keyword">be</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">a</span> question<br></code></pre></td></tr></table></figure><h3 id="样例输出-1-15"><a href="#样例输出-1-15" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">2 </span><span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h2 id="样例-2-6"><a href="#样例-2-6" class="headerlink" title="样例 #2"></a>样例 #2</h2><h3 id="样例输入-2-6"><a href="#样例输入-2-6" class="headerlink" title="样例输入 #2"></a>样例输入 #2</h3><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-keyword">to</span><br>Did <span class="hljs-keyword">the</span> Ottoman Empire lose <span class="hljs-keyword">its</span> power <span class="hljs-keyword">at</span> <span class="hljs-keyword">that</span> <span class="hljs-built_in">time</span><br></code></pre></td></tr></table></figure><h3 id="样例输出-2-6"><a href="#样例输出-2-6" class="headerlink" title="样例输出 #2"></a>样例输出 #2</h3><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-1</span><br></code></pre></td></tr></table></figure><h2 id="提示-13"><a href="#提示-13" class="headerlink" title="提示"></a>提示</h2><p>数据范围</p><p>$1\leq $ 第一行单词长度 $\leq10$。</p><p>$1\leq $ 文章长度 $\leq10^6$。</p><p>noip2011 普及组第 2 题</p><h2 id="个人题解-15"><a href="#个人题解-15" class="headerlink" title="个人题解"></a>个人题解</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br>string word, str;<br><span class="hljs-type">int</span> times = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> idx = <span class="hljs-number">-1</span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">getline</span>(cin, word);<br>    <span class="hljs-built_in">getline</span>(cin, str);<br><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; word.<span class="hljs-built_in">size</span>(); i++)<br>        <span class="hljs-keyword">if</span> (word[i] &lt; <span class="hljs-string">&#x27;a&#x27;</span>)<br>            word[i] += <span class="hljs-number">32</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; str.<span class="hljs-built_in">size</span>(); i++)<br>        <span class="hljs-keyword">if</span> (str[i] &lt; <span class="hljs-string">&#x27;a&#x27;</span> &amp;&amp; str[i] != <span class="hljs-string">&#x27; &#x27;</span>)<br>            str[i] += <span class="hljs-number">32</span>;<br><br>    word = <span class="hljs-string">&#x27; &#x27;</span> + word + <span class="hljs-string">&#x27; &#x27;</span>;<br>    str = <span class="hljs-string">&#x27; &#x27;</span> + str + <span class="hljs-string">&#x27; &#x27;</span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; str.<span class="hljs-built_in">size</span>(); i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (str[i] == word[<span class="hljs-number">0</span>])<br>        &#123;<br>            string tmp = str.<span class="hljs-built_in">substr</span>(i, word.<span class="hljs-built_in">size</span>());<br>            <span class="hljs-keyword">if</span> (tmp == word)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (idx == <span class="hljs-number">-1</span>)<br>                    idx = i;<br>                times++;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (times)<br>        cout &lt;&lt; times &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; idx;<br>    <span class="hljs-keyword">else</span><br>        cout &lt;&lt; idx;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="回文日期"><a href="#回文日期" class="headerlink" title="回文日期"></a>回文日期</h1><h2 id="题目背景-1"><a href="#题目背景-1" class="headerlink" title="题目背景"></a>题目背景</h2><p>NOIP2016 普及组 T2</p><h2 id="题目描述-16"><a href="#题目描述-16" class="headerlink" title="题目描述"></a>题目描述</h2><p>在日常生活中，通过年、月、日这三个要素可以表示出一个唯一确定的日期。</p><p>牛牛习惯用$8$位数字表示一个日期，其中，前$4$位代表年份，接下来$2$位代表月 份，最后$2$位代表日期。显然：一个日期只有一种表示方法，而两个不同的日期的表 示方法不会相同。</p><p>牛牛认为，一个日期是回文的，当且仅当表示这个日期的8位数字是回文的。现 在，牛牛想知道：在他指定的两个日期之间包含这两个日期本身），有多少个真实存 在的日期是回文的。</p><p>一个$8$位数字是回文的，当且仅当对于所有的$i ( 1  \le i \le  8)$从左向右数的第i个 数字和第$9-i$个数字（即从右向左数的第$i$个数字）是相同的。</p><p>例如：</p><p>•对于2016年11月19日，用$8$位数字$20161119$表示，它不是回文的。</p><p>•对于2010年1月2日，用$8$位数字$20100102$表示，它是回文的。</p><p>•对于2010年10月2日，用$8$位数字$20101002$表示，它不是回文的。</p><p>每一年中都有$12$个月份：</p><p>其中，$1,3,5,7,8,10,12$月每个月有$31$天；$4,6,9,11$月每个月有$30$天；而对于$2$月，闰年时有$29$天，平年时有$28$天。</p><p>一个年份是闰年当且仅当它满足下列两种情况其中的一种：</p><p>1.这个年份是$4$的整数倍，但不是$100$的整数倍；</p><p>2.这个年份是$400$的整数倍。</p><p>例如：</p><p>•以下几个年份都是闰年：$2000,2012,2016$。</p><p>•以下几个年份是平年：$1900,2011,2014$。</p><h2 id="输入格式-16"><a href="#输入格式-16" class="headerlink" title="输入格式"></a>输入格式</h2><p>两行，每行包括一个$8$位数字。</p><p>第一行表示牛牛指定的起始日期。</p><p>第二行表示牛牛指定的终止日期。</p><p>保证$ date_i $和都是真实存在的日期，且年份部分一定为$4$位数字，且首位数字不为$0$。</p><p>保证$ date 1 $ —定不晚于$ date 2 $。</p><h2 id="输出格式-16"><a href="#输出格式-16" class="headerlink" title="输出格式"></a>输出格式</h2><p>一个整数，表示在$date1$和$date2$之间，有多少个日期是回文的。</p><h2 id="样例-1-16"><a href="#样例-1-16" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1-16"><a href="#样例输入-1-16" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dns"><span class="hljs-number">20110101</span><br><span class="hljs-number">20111231</span><br></code></pre></td></tr></table></figure><h3 id="样例输出-1-16"><a href="#样例输出-1-16" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">1<br></code></pre></td></tr></table></figure><h2 id="样例-2-7"><a href="#样例-2-7" class="headerlink" title="样例 #2"></a>样例 #2</h2><h3 id="样例输入-2-7"><a href="#样例输入-2-7" class="headerlink" title="样例输入 #2"></a>样例输入 #2</h3><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dns"><span class="hljs-number">20000101</span><br><span class="hljs-number">20101231</span><br></code></pre></td></tr></table></figure><h3 id="样例输出-2-7"><a href="#样例输出-2-7" class="headerlink" title="样例输出 #2"></a>样例输出 #2</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">2<br></code></pre></td></tr></table></figure><h2 id="提示-14"><a href="#提示-14" class="headerlink" title="提示"></a>提示</h2><p>【样例说明】</p><p>对于样例1，符合条件的日期是$20111102$。</p><p>对于样例2，符合条件的日期是$20011002$和$20100102$。</p><p>【子任务】</p><p>对于$60%$的数据，满足$date1 = date2$。</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><blockquote><p>回文日期数量很少，所以可以先枚举，在判断是否在日期之间</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span> </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span> </span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> i,j,n,m,a,b,c,sum,ans;<br><span class="hljs-type">int</span> s[<span class="hljs-number">13</span>]=&#123;<span class="hljs-number">0</span>,<span class="hljs-number">31</span>,<span class="hljs-number">29</span>,<span class="hljs-number">31</span>,<span class="hljs-number">30</span>,<span class="hljs-number">31</span>,<span class="hljs-number">30</span>,<span class="hljs-number">31</span>,<span class="hljs-number">31</span>,<span class="hljs-number">30</span>,<span class="hljs-number">31</span>,<span class="hljs-number">30</span>,<span class="hljs-number">31</span>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);<br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">12</span>;i++)<span class="hljs-comment">//枚举月和日 </span><br>        <span class="hljs-keyword">for</span> (j=<span class="hljs-number">1</span>;j&lt;=s[i];j++)<br>        &#123;<br>            c=(j%<span class="hljs-number">10</span>)*<span class="hljs-number">1000</span>+<br>              (j/<span class="hljs-number">10</span>)*<span class="hljs-number">100</span>+<br>              (i%<span class="hljs-number">10</span>)*<span class="hljs-number">10</span>+<br>              (i/<span class="hljs-number">10</span>);<span class="hljs-comment">//算出前四位。</span><br>            sum=c*<span class="hljs-number">10000</span>+i*<span class="hljs-number">100</span>+j;<span class="hljs-comment">//算出整个日期 </span><br>            <span class="hljs-keyword">if</span> (sum&lt;n||sum&gt;m) <span class="hljs-keyword">continue</span>;<br>            ans++;<span class="hljs-comment">//统计 </span><br>        &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="拼数"><a href="#拼数" class="headerlink" title="拼数"></a>拼数</h1><h2 id="题目描述-17"><a href="#题目描述-17" class="headerlink" title="题目描述"></a>题目描述</h2><p>设有 $n$ 个正整数 $a_1 \dots a_n$，将它们联接成一排，相邻数字首尾相接，组成一个最大的整数。</p><h2 id="输入格式-17"><a href="#输入格式-17" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行有一个整数，表示数字个数 $n$。</p><p>第二行有 $n$ 个整数，表示给出的 $n$ 个整数 $a_i$。</p><h2 id="输出格式-17"><a href="#输出格式-17" class="headerlink" title="输出格式"></a>输出格式</h2><p>一个正整数，表示最大的整数</p><h2 id="样例-1-17"><a href="#样例-1-17" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1-17"><a href="#样例输入-1-17" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">3</span><br><span class="hljs-symbol">13 </span><span class="hljs-number">312</span> <span class="hljs-number">343</span><br></code></pre></td></tr></table></figure><h3 id="样例输出-1-17"><a href="#样例输出-1-17" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dns"><span class="hljs-number">34331213</span><br></code></pre></td></tr></table></figure><h2 id="样例-2-8"><a href="#样例-2-8" class="headerlink" title="样例 #2"></a>样例 #2</h2><h3 id="样例输入-2-8"><a href="#样例输入-2-8" class="headerlink" title="样例输入 #2"></a>样例输入 #2</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">4</span><br><span class="hljs-symbol">7 </span><span class="hljs-number">13</span> <span class="hljs-number">4</span> <span class="hljs-number">246</span><br></code></pre></td></tr></table></figure><h3 id="样例输出-2-8"><a href="#样例输出-2-8" class="headerlink" title="样例输出 #2"></a>样例输出 #2</h3><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dns"><span class="hljs-number">7424613</span><br></code></pre></td></tr></table></figure><h2 id="提示-15"><a href="#提示-15" class="headerlink" title="提示"></a>提示</h2><p>对于全部的测试点，保证 $1 \leq n \leq 20$，$1 \leq a_i \leq 10^9$。</p><h2 id="个人题解-16"><a href="#个人题解-16" class="headerlink" title="个人题解"></a>个人题解</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> N;<br>string nums[<span class="hljs-number">21</span>];<br><br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(string &amp;a,string &amp;b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> a+b &gt; b+a; <span class="hljs-comment">// 巧妙 避免32132&gt;32321</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; N;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; N;i++) cin &gt;&gt; nums[i];<br>    <span class="hljs-built_in">sort</span>(nums,nums+N,cmp);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; N;i++) cout &lt;&lt; nums[i];<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <br>&#125;<br></code></pre></td></tr></table></figure><h1 id="打字练习"><a href="#打字练习" class="headerlink" title="打字练习"></a>打字练习</h1><h2 id="题目描述-18"><a href="#题目描述-18" class="headerlink" title="题目描述"></a>题目描述</h2><p>R 君在练习打字。</p><p>有这样一个打字练习网站，给定一个范文和输入框，会根据你的输入计算准确率和打字速度。可以输入的字符有小写字母、空格和 <code>.</code>（英文句号），输入字符后，光标也会跟着移动。</p><p>输入的文本有多行，R 君可以通过换行键来换行，换行后光标移动到下一行的开头。</p><p>R 君也可以按退格键（为了方便，退格键用 <code>&lt;</code> 表示），以删除上一个打的字符，并将光标回移一格。特殊的，如果此时光标已经在一行的开头，则不能继续退格（即忽略此时输入的退格键）。</p><p>网站的比较方式遵循以下两个原则：</p><ul><li>逐行比较，即对于范文和输入的每一行依次比较，不同行之间不会产生影响，多余的行会被忽略。</li><li>逐位比较，即对于两行的每一个字符依次比较，当且仅当字符相同时才会被算作一次正确，否则会被算作错误。计算答案时，只统计相同的字符个数。</li></ul><p>需要注意的是，回车键不会被计入正确的字符个数。</p><p>R 君看到网站上显示他花了 $T$ 秒完成了这次的打字游戏，请你计算出他的 KPM（Keys per minutes，每分钟输入的字符个数），答案四舍五入保留整数部分。</p><h2 id="输入格式-18"><a href="#输入格式-18" class="headerlink" title="输入格式"></a>输入格式</h2><p>R 君会依次告诉你网站的范文，他的输入和花费的时间。</p><p>其中范文和输入将会这样读入：给定若干行字符串，以单独的一行 <code>EOF</code> 结束，其中 <code>EOF</code> 不算入输入的文本。</p><p>最后一行一个整数 $T$，表示他打字花费了 $T$ 秒。</p><p>可以参考样例输入输出文件和样例解释辅助理解。</p><h2 id="输出格式-18"><a href="#输出格式-18" class="headerlink" title="输出格式"></a>输出格式</h2><p>一行一个整数，表示 KPM。</p><h2 id="样例-1-18"><a href="#样例-1-18" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1-18"><a href="#样例输入-1-18" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs erlang">hello world.<br>aaabbbb<br>x<br>EOF<br>heelo world.<br>aaacbbbb<br>y&lt;x<br>EOF<br><span class="hljs-number">60</span><br></code></pre></td></tr></table></figure><h3 id="样例输出-1-18"><a href="#样例输出-1-18" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">18<br></code></pre></td></tr></table></figure><h2 id="提示-16"><a href="#提示-16" class="headerlink" title="提示"></a>提示</h2><h4 id="样例解释"><a href="#样例解释" class="headerlink" title="样例解释"></a>样例解释</h4><p>第一行的正确字符数为 11。<br>第二行的正确字符数为 6，错误的字符 <code>c</code> 仍会占据一个位置。<br>第三行的正确字符数为 1，R 君使用退格键删除了被打错的字符 <code>y</code></p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>对于 $20%$ 的数据，不存在换行键。<br>对于 $40%$ 的数据，不存在退格键。<br>对于 $100%$ 的数据，$T \leq 10^3$，保证每个文本段的总字符数（包括换行）不超过 $10^5$ 个且总行数不超过 $10^4$。</p><h2 id="个人题解-17"><a href="#个人题解-17" class="headerlink" title="个人题解"></a>个人题解</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> hs,es,cds,rig,kpm;<br><span class="hljs-type">double</span> t;<br><span class="hljs-type">char</span> s[<span class="hljs-number">100005</span>];<br>stack&lt;<span class="hljs-type">char</span>&gt;s1[<span class="hljs-number">10005</span>],s2;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-built_in">gets</span>(s);<br>        cds=<span class="hljs-built_in">strlen</span>(s);<br>        <span class="hljs-keyword">if</span>(cds==<span class="hljs-number">3</span>&amp;&amp;s[<span class="hljs-number">0</span>]==<span class="hljs-string">&#x27;E&#x27;</span>&amp;&amp;s[<span class="hljs-number">1</span>]==<span class="hljs-string">&#x27;O&#x27;</span>&amp;&amp;s[<span class="hljs-number">2</span>]==<span class="hljs-string">&#x27;F&#x27;</span>)<span class="hljs-keyword">break</span>;<br>        hs++;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;cds;i++)&#123;<br>            <span class="hljs-keyword">if</span>(s[i]==<span class="hljs-string">&#x27;&lt;&#x27;</span>&amp;&amp;s1[hs].<span class="hljs-built_in">empty</span>()==<span class="hljs-number">0</span>)s1[hs].<span class="hljs-built_in">pop</span>();<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((s[i]&gt;=<span class="hljs-string">&#x27;a&#x27;</span>&amp;&amp;s[i]&lt;=<span class="hljs-string">&#x27;z&#x27;</span>)||s[i]==<span class="hljs-string">&#x27; &#x27;</span>||s[i]==<span class="hljs-string">&#x27;.&#x27;</span>)s1[hs].<span class="hljs-built_in">push</span>(s[i]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-built_in">gets</span>(s);<br>        cds=<span class="hljs-built_in">strlen</span>(s);<br>        <span class="hljs-keyword">if</span>(cds==<span class="hljs-number">3</span>&amp;&amp;s[<span class="hljs-number">0</span>]==<span class="hljs-string">&#x27;E&#x27;</span>&amp;&amp;s[<span class="hljs-number">1</span>]==<span class="hljs-string">&#x27;O&#x27;</span>&amp;&amp;s[<span class="hljs-number">2</span>]==<span class="hljs-string">&#x27;F&#x27;</span>)<span class="hljs-keyword">break</span>;<br>        es++;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;cds;i++)&#123;<br>            <span class="hljs-keyword">if</span>(s[i]==<span class="hljs-string">&#x27;&lt;&#x27;</span>&amp;&amp;s2.<span class="hljs-built_in">empty</span>()==<span class="hljs-number">0</span>)s2.<span class="hljs-built_in">pop</span>();<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((s[i]&gt;=<span class="hljs-string">&#x27;a&#x27;</span>&amp;&amp;s[i]&lt;=<span class="hljs-string">&#x27;z&#x27;</span>)||s[i]==<span class="hljs-string">&#x27; &#x27;</span>||s[i]==<span class="hljs-string">&#x27;.&#x27;</span>)s2.<span class="hljs-built_in">push</span>(s[i]);<br>        &#125;<br>        stack&lt;<span class="hljs-type">char</span>&gt;t1,t2;<br>        <span class="hljs-keyword">while</span>(s1[es].<span class="hljs-built_in">empty</span>()==<span class="hljs-number">0</span>)&#123;<br>        t1.<span class="hljs-built_in">push</span>(s1[es].<span class="hljs-built_in">top</span>());<br>        s1[es].<span class="hljs-built_in">pop</span>();<br>&#125;<br><span class="hljs-keyword">while</span>(s2.<span class="hljs-built_in">empty</span>()==<span class="hljs-number">0</span>)&#123;<br>t2.<span class="hljs-built_in">push</span>(s2.<span class="hljs-built_in">top</span>());<br>s2.<span class="hljs-built_in">pop</span>();<br>&#125;<br>cds=<span class="hljs-built_in">min</span>(t1.<span class="hljs-built_in">size</span>(),t2.<span class="hljs-built_in">size</span>());<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=cds;i++)&#123;<br>            <span class="hljs-keyword">if</span>(t1.<span class="hljs-built_in">top</span>()==t2.<span class="hljs-built_in">top</span>())rig++;<br>            t1.<span class="hljs-built_in">pop</span>();<br>            t2.<span class="hljs-built_in">pop</span>();<br>        &#125;<br>    &#125;<br>    cin&gt;&gt;t;<br>    kpm=rig*<span class="hljs-number">60.0</span>/t+<span class="hljs-number">0.5</span>;<br>    cout&lt;&lt;kpm&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="数的计算"><a href="#数的计算" class="headerlink" title="数的计算"></a>数的计算</h1><h2 id="题目描述-19"><a href="#题目描述-19" class="headerlink" title="题目描述"></a>题目描述</h2><p>我们要求找出具有下列性质数的个数（包含输入的正整数 $n$）。</p><p>先输入一个正整数 $n$（$n \le 1000$），然后对此正整数按照如下方法进行处理：</p><ol><li><p>不作任何处理；</p></li><li><p>在它的左边拼接一个正整数，但该正整数不能超过原数，或者是上一个被拼接的数的一半；</p></li><li><p>加上数后，继续按此规则进行处理，直到不能再加正整数为止。</p></li></ol><h2 id="输入格式-19"><a href="#输入格式-19" class="headerlink" title="输入格式"></a>输入格式</h2><p>一行，一个正整数 $n$（$n \le 1000$）。</p><h2 id="输出格式-19"><a href="#输出格式-19" class="headerlink" title="输出格式"></a>输出格式</h2><p>一个整数，表示具有该性质数的个数。</p><h2 id="样例-1-19"><a href="#样例-1-19" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1-19"><a href="#样例输入-1-19" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">6<br></code></pre></td></tr></table></figure><h3 id="样例输出-1-19"><a href="#样例输出-1-19" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">6<br></code></pre></td></tr></table></figure><h2 id="提示-17"><a href="#提示-17" class="headerlink" title="提示"></a>提示</h2><p><strong>【样例解释】</strong></p><p>满足条件的数为：$6$，$16$，$26$，$126$，$36$，$136$。</p><p><strong>【题目来源】</strong></p><p>NOIP 2001 普及组第一题</p><h2 id="个人题解-18"><a href="#个人题解-18" class="headerlink" title="个人题解"></a>个人题解</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span><span class="hljs-comment">//万能头文件</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> f[<span class="hljs-number">1001</span>];<span class="hljs-comment">//存每一位数的种类</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123; <span class="hljs-comment">//1-n的递推</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=i/<span class="hljs-number">2</span>;j++)&#123;<br>            f[i]+=f[j]; <span class="hljs-comment">//每一位叠加，递推走起</span><br>        &#125;<br>        f[i]++; <span class="hljs-comment">//加上本身</span><br>    &#125;<br>    cout&lt;&lt;f[n];<span class="hljs-comment">//输出n的种类</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="选数"><a href="#选数" class="headerlink" title="选数"></a>选数</h1><h2 id="题目描述-20"><a href="#题目描述-20" class="headerlink" title="题目描述"></a>题目描述</h2><p>已知 $n$ 个整数 $x_1,x_2,\cdots,x_n$，以及 $1$ 个整数 $k$（$k&lt;n$）。从 $n$ 个整数中任选 $k$ 个整数相加，可分别得到一系列的和。例如当 $n=4$，$k=3$，$4$ 个整数分别为 $3,7,12,19$ 时，可得全部的组合与它们的和为：</p><p>$3+7+12=22$</p><p>$3+7+19=29$</p><p>$7+12+19=38$</p><p>$3+12+19=34$</p><p>现在，要求你计算出和为素数共有多少种。</p><p>例如上例，只有一种的和为素数：$3+7+19=29$。</p><h2 id="输入格式-20"><a href="#输入格式-20" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行两个空格隔开的整数 $n,k$（$1 \le n \le 20$，$k&lt;n$）。</p><p>第二行 $n$ 个整数，分别为 $x_1,x_2,\cdots,x_n$（$1 \le x_i \le 5\times 10^6$）。</p><h2 id="输出格式-20"><a href="#输出格式-20" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出一个整数，表示种类数。</p><h2 id="样例-1-20"><a href="#样例-1-20" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1-20"><a href="#样例输入-1-20" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">4 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">7</span> <span class="hljs-number">12</span> <span class="hljs-number">19</span><br></code></pre></td></tr></table></figure><h3 id="样例输出-1-20"><a href="#样例输出-1-20" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">1<br></code></pre></td></tr></table></figure><h2 id="提示-18"><a href="#提示-18" class="headerlink" title="提示"></a>提示</h2><p><strong>【题目来源】</strong></p><p>NOIP 2002 普及组第二题</p><h2 id="个人题解-19"><a href="#个人题解-19" class="headerlink" title="个人题解"></a>个人题解</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// #include &lt;bits/stdc++.h&gt;</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;utility&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unordered_map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unordered_set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Tp</span>&gt;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> _Tp &amp;<span class="hljs-title">read</span><span class="hljs-params">(_Tp &amp;x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">bool</span> sign = <span class="hljs-literal">false</span>;<br>    <span class="hljs-type">char</span> ch = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-type">double</span> tmp = <span class="hljs-number">1.0</span>;<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(ch); ch = <span class="hljs-built_in">getchar</span>())<br>        sign |= (ch == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (x = <span class="hljs-number">0</span>; <span class="hljs-built_in">isdigit</span>(ch); ch = <span class="hljs-built_in">getchar</span>())<br>        x = x * <span class="hljs-number">10</span> + (ch ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">&#x27;.&#x27;</span>)<br>        <span class="hljs-keyword">for</span> (ch = <span class="hljs-built_in">getchar</span>(); <span class="hljs-built_in">isdigit</span>(ch); ch = <span class="hljs-built_in">getchar</span>())<br>            tmp /= <span class="hljs-number">10.0</span>, x += tmp * (ch ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> sign ? (x = -x) : x;<br>&#125;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Tp</span>&gt;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">write</span><span class="hljs-params">(_Tp x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">0</span>)<br>        <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;-&#x27;</span>), x = -x;<br>    <span class="hljs-keyword">if</span> (x &gt; <span class="hljs-number">9</span>)<br>        <span class="hljs-built_in">write</span>(x / <span class="hljs-number">10</span>);<br>    <span class="hljs-built_in">putchar</span>((x % <span class="hljs-number">10</span>) ^ <span class="hljs-number">48</span>);<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> fastIo() ios::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr)</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ull;<br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; pii;<br><span class="hljs-keyword">typedef</span> pair&lt;ll, ll&gt; pll;<br><br><span class="hljs-type">int</span> n, k, ans = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> nums[<span class="hljs-number">21</span>];<br><span class="hljs-type">bool</span> used[<span class="hljs-number">21</span>];<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">prime</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= num / i; i++)<br>        <span class="hljs-keyword">if</span> (num % i == <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> c, <span class="hljs-type">int</span> choosed, <span class="hljs-type">int</span> sum)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (choosed &gt; k || c &gt; n) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">if</span> (choosed == k)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">prime</span>(sum))<br>            ans++;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-built_in">dfs</span>(c+<span class="hljs-number">1</span>,choosed,sum); <span class="hljs-comment">// 不选当前数字</span><br>    <span class="hljs-built_in">dfs</span>(c+<span class="hljs-number">1</span>,choosed+<span class="hljs-number">1</span>,sum+nums[c]); <span class="hljs-comment">// 选当前数字</span><br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">fastIo</span>();<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">read</span>(n);<br>    <span class="hljs-built_in">read</span>(k);<br>    <span class="hljs-keyword">while</span> (i &lt; n)<br>        <span class="hljs-built_in">read</span>(nums[i++]);<br><br>    <span class="hljs-built_in">dfs</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>    cout &lt;&lt; ans &lt;&lt; endl;<br>    <span class="hljs-comment">// for (int i = 0;i &lt; n;i++) write(nums[i]);</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h1><h2 id="题目描述-21"><a href="#题目描述-21" class="headerlink" title="题目描述"></a>题目描述</h2><p>对于一个递归函数 $w(a,b,c)$</p><ul><li>如果 $a \le 0$ 或 $b \le 0$ 或 $c \le 0$ 就返回值$ 1$。</li><li>如果 $a&gt;20$ 或 $b&gt;20$ 或 $c&gt;20$ 就返回 $w(20,20,20)$</li><li>如果 $a&lt;b$ 并且 $b&lt;c$ 就返回$ w(a,b,c-1)+w(a,b-1,c-1)-w(a,b-1,c)$。</li><li>其它的情况就返回 $w(a-1,b,c)+w(a-1,b-1,c)+w(a-1,b,c-1)-w(a-1,b-1,c-1)$</li></ul><p>这是个简单的递归函数，但实现起来可能会有些问题。当 $a,b,c$ 均为 $15$ 时，调用的次数将非常的多。你要想个办法才行。</p><p>注意：例如 $w(30,-1,0)$ 又满足条件 $1$ 又满足条件 $2$，请按照最上面的条件来算，答案为 $1$。</p><h2 id="输入格式-21"><a href="#输入格式-21" class="headerlink" title="输入格式"></a>输入格式</h2><p>会有若干行。</p><p>并以 $-1,-1,-1$ 结束。</p><p>保证输入的数在 $[-9223372036854775808,9223372036854775807]$ 之间，并且是整数。</p><h2 id="输出格式-21"><a href="#输出格式-21" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出若干行，每一行格式：</p><p><code>w(a, b, c) = ans</code></p><p>注意空格。</p><h2 id="样例-1-21"><a href="#样例-1-21" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1-21"><a href="#样例输入-1-21" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs subunit">1 1 1<br>2 2 2<br><span class="hljs-string">-1</span> <span class="hljs-string">-1</span> <span class="hljs-string">-1</span><br></code></pre></td></tr></table></figure><h3 id="样例输出-1-21"><a href="#样例输出-1-21" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">w</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>) = <span class="hljs-number">2</span><br><span class="hljs-attribute">w</span>(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>) = <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><h2 id="个人题解-20"><a href="#个人题解-20" class="headerlink" title="个人题解"></a>个人题解</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> W_MEM(x,y,z) (w_mem[x][y][z] ? w_mem[x][y][z] : w_mem[x][y][z] = w(x, y, z))</span><br><br><span class="hljs-type">int</span> a=<span class="hljs-number">1</span>,b=<span class="hljs-number">1</span>,c=<span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> w_mem[<span class="hljs-number">25</span>][<span class="hljs-number">25</span>][<span class="hljs-number">25</span>];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">w</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> c)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(a&lt;=<span class="hljs-number">0</span> || b&lt;=<span class="hljs-number">0</span> || c&lt;=<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(a &gt; <span class="hljs-number">20</span> || b &gt; <span class="hljs-number">20</span> || c &gt; <span class="hljs-number">20</span>) <span class="hljs-keyword">return</span> <span class="hljs-built_in">W_MEM</span>(<span class="hljs-number">20</span>,<span class="hljs-number">20</span>,<span class="hljs-number">20</span>);<br>    <span class="hljs-keyword">if</span>(a &lt; b &amp;&amp; b &lt; c) <span class="hljs-keyword">return</span> <span class="hljs-built_in">W_MEM</span>(a,b,c<span class="hljs-number">-1</span>)+<span class="hljs-built_in">W_MEM</span>(a,b<span class="hljs-number">-1</span>,c<span class="hljs-number">-1</span>) - <span class="hljs-built_in">W_MEM</span>(a,b<span class="hljs-number">-1</span>,c);<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">W_MEM</span>(a<span class="hljs-number">-1</span>,b,c)+<span class="hljs-built_in">W_MEM</span>(a<span class="hljs-number">-1</span>,b<span class="hljs-number">-1</span>,c)+<span class="hljs-built_in">W_MEM</span>(a<span class="hljs-number">-1</span>,b,c<span class="hljs-number">-1</span>) - <span class="hljs-built_in">W_MEM</span>(a<span class="hljs-number">-1</span>,b<span class="hljs-number">-1</span>,c<span class="hljs-number">-1</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;<br><span class="hljs-keyword">if</span>(a==<span class="hljs-number">-1</span> &amp;&amp; b==<span class="hljs-number">-1</span> &amp;&amp; c==<span class="hljs-number">-1</span>) <span class="hljs-keyword">break</span>;<br>    cout&lt;&lt;<span class="hljs-string">&quot;w(&quot;</span>&lt;&lt;a&lt;&lt;<span class="hljs-string">&quot;, &quot;</span>&lt;&lt;b&lt;&lt;<span class="hljs-string">&quot;, &quot;</span>&lt;&lt;c&lt;&lt;<span class="hljs-string">&quot;) = &quot;</span>&lt;&lt;<span class="hljs-built_in">w</span>(a,b,c)&lt;&lt;endl;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="【XR-3】等差数列"><a href="#【XR-3】等差数列" class="headerlink" title="【XR-3】等差数列"></a>【XR-3】等差数列</h1><h2 id="题目描述-22"><a href="#题目描述-22" class="headerlink" title="题目描述"></a>题目描述</h2><p>小 X 给了你一个等差数列的前两项以及项数，请你求出这个等差数列各项之和。</p><p>等差数列：对于一个 $n$ 项数列 $a$，如果满足对于任意 $i \in [1,n)$，有 $a_{i+1} - a_i = d$，其中 $d$ 为定值，则称这个数列为一个等差数列。</p><h2 id="输入格式-22"><a href="#输入格式-22" class="headerlink" title="输入格式"></a>输入格式</h2><p>一行 $3$ 个整数 $a_1, a_2, n$，表示等差数列的第 $1,2$ 项以及项数。</p><p><strong>数据范围：</strong></p><ul><li>$|a_1|,|a_2| \le 10^6$。</li><li>$3 \le n \le 10^6$。</li></ul><h2 id="输出格式-22"><a href="#输出格式-22" class="headerlink" title="输出格式"></a>输出格式</h2><p>一行一个整数，表示答案。</p><h2 id="样例-1-22"><a href="#样例-1-22" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1-22"><a href="#样例输入-1-22" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h3 id="样例输出-1-22"><a href="#样例输出-1-22" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">6<br></code></pre></td></tr></table></figure><h2 id="样例-2-9"><a href="#样例-2-9" class="headerlink" title="样例 #2"></a>样例 #2</h2><h3 id="样例输入-2-9"><a href="#样例输入-2-9" class="headerlink" title="样例输入 #2"></a>样例输入 #2</h3><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs subunit"><span class="hljs-string">-5</span> <span class="hljs-string">-10</span> 5<br></code></pre></td></tr></table></figure><h3 id="样例输出-2-9"><a href="#样例输出-2-9" class="headerlink" title="样例输出 #2"></a>样例输出 #2</h3><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-75</span><br></code></pre></td></tr></table></figure><h2 id="提示-19"><a href="#提示-19" class="headerlink" title="提示"></a>提示</h2><p>【样例 $1$ 说明】</p><p>这个等差数列为 <code>1 2 3</code>，其各项之和为 $6$。</p><h2 id="个人题解-21"><a href="#个人题解-21" class="headerlink" title="个人题解"></a>个人题解</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// #include &lt;bits/stdc++.h&gt;</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;utility&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unordered_map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unordered_set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Tp</span>&gt;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> _Tp&amp; <span class="hljs-title">read</span><span class="hljs-params">(_Tp&amp; x)</span> </span>&#123;<br>    <span class="hljs-type">bool</span> sign = <span class="hljs-literal">false</span>;<br>    <span class="hljs-type">char</span> ch = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-type">double</span> tmp = <span class="hljs-number">1.0</span>;<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(ch); ch = <span class="hljs-built_in">getchar</span>())<br>        sign |= (ch == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (x = <span class="hljs-number">0</span>; <span class="hljs-built_in">isdigit</span>(ch); ch = <span class="hljs-built_in">getchar</span>())<br>        x = x * <span class="hljs-number">10</span> + (ch ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">&#x27;.&#x27;</span>)<br>        <span class="hljs-keyword">for</span> (ch = <span class="hljs-built_in">getchar</span>(); <span class="hljs-built_in">isdigit</span>(ch); ch = <span class="hljs-built_in">getchar</span>())<br>            tmp /= <span class="hljs-number">10.0</span>, x += tmp * (ch ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> sign ? (x = -x) : x;<br>&#125;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Tp</span>&gt;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">write</span><span class="hljs-params">(_Tp x)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">0</span>)<br>        <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;-&#x27;</span>), x = -x;<br>    <span class="hljs-keyword">if</span> (x &gt; <span class="hljs-number">9</span>)<br>        <span class="hljs-built_in">write</span>(x / <span class="hljs-number">10</span>);<br>    <span class="hljs-built_in">putchar</span>((x % <span class="hljs-number">10</span>) ^ <span class="hljs-number">48</span>);<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> fastIo() ios::sync_with_stdio(false),cin.tie(nullptr),cout.tie(nullptr)</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ull;<br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; pii;<br><span class="hljs-keyword">typedef</span> pair&lt;ll,ll&gt; pll;<br><br>ll a,b,n,d;<br>ll ans;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">fastIo</span>();<br>    <span class="hljs-built_in">read</span>(a),<span class="hljs-built_in">read</span>(b),<span class="hljs-built_in">read</span>(n);<br>    d = b - a;<br>    ans = (n * (n - <span class="hljs-number">1</span>) * d / <span class="hljs-number">2</span>) + n * a;<br>    <span class="hljs-built_in">write</span>(ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="台阶问题"><a href="#台阶问题" class="headerlink" title="台阶问题"></a>台阶问题</h1><h2 id="题目描述-23"><a href="#题目描述-23" class="headerlink" title="题目描述"></a>题目描述</h2><p>有$N$级的台阶，你一开始在底部，每次可以向上迈最多$K$级台阶（最少$1$级），问到达第$N$级台阶有多少种不同方式。</p><h2 id="输入格式-23"><a href="#输入格式-23" class="headerlink" title="输入格式"></a>输入格式</h2><p>两个正整数N，K。</p><h2 id="输出格式-23"><a href="#输出格式-23" class="headerlink" title="输出格式"></a>输出格式</h2><p>一个正整数，为不同方式数，由于答案可能很大，你需要输出$ans \bmod 100003$后的结果。</p><h2 id="样例-1-23"><a href="#样例-1-23" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1-23"><a href="#样例输入-1-23" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">5 </span><span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h3 id="样例输出-1-23"><a href="#样例输出-1-23" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">8<br></code></pre></td></tr></table></figure><h2 id="提示-20"><a href="#提示-20" class="headerlink" title="提示"></a>提示</h2><p>对于$20%$的数据,有$N ≤ 10, K ≤ 3$;</p><p>对于$40%$的数据，有$N ≤ 1000$;</p><p>对于$100%$的数据，有$N ≤ 100000,K ≤ 100$。</p><h2 id="个人题解-22"><a href="#个人题解-22" class="headerlink" title="个人题解"></a>个人题解</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// #include &lt;bits/stdc++.h&gt;</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;utility&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unordered_map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unordered_set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Tp</span>&gt;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> _Tp&amp; <span class="hljs-title">read</span><span class="hljs-params">(_Tp&amp; x)</span> </span>&#123;<br>    <span class="hljs-type">bool</span> sign = <span class="hljs-literal">false</span>;<br>    <span class="hljs-type">char</span> ch = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-type">double</span> tmp = <span class="hljs-number">1.0</span>;<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(ch); ch = <span class="hljs-built_in">getchar</span>())<br>        sign |= (ch == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (x = <span class="hljs-number">0</span>; <span class="hljs-built_in">isdigit</span>(ch); ch = <span class="hljs-built_in">getchar</span>())<br>        x = x * <span class="hljs-number">10</span> + (ch ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">&#x27;.&#x27;</span>)<br>        <span class="hljs-keyword">for</span> (ch = <span class="hljs-built_in">getchar</span>(); <span class="hljs-built_in">isdigit</span>(ch); ch = <span class="hljs-built_in">getchar</span>())<br>            tmp /= <span class="hljs-number">10.0</span>, x += tmp * (ch ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> sign ? (x = -x) : x;<br>&#125;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Tp</span>&gt;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">write</span><span class="hljs-params">(_Tp x)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">0</span>)<br>        <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;-&#x27;</span>), x = -x;<br>    <span class="hljs-keyword">if</span> (x &gt; <span class="hljs-number">9</span>)<br>        <span class="hljs-built_in">write</span>(x / <span class="hljs-number">10</span>);<br>    <span class="hljs-built_in">putchar</span>((x % <span class="hljs-number">10</span>) ^ <span class="hljs-number">48</span>);<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> fastIo() ios::sync_with_stdio(false),cin.tie(nullptr),cout.tie(nullptr)</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ull;<br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; pii;<br><span class="hljs-keyword">typedef</span> pair&lt;ll,ll&gt; pll;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod = <span class="hljs-number">100003</span>;<br><span class="hljs-type">int</span> n,k,ans;<br><span class="hljs-type">int</span> dp[<span class="hljs-number">100010</span>];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">fastIo</span>();<br>    <span class="hljs-built_in">read</span>(n),<span class="hljs-built_in">read</span>(k);<br>    dp[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt;= n;i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>;j &lt;= k;j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (i - j &gt;= <span class="hljs-number">0</span>) dp[i] = (dp[i] + dp[i-j]) % mod;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">write</span>(dp[n]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="数的划分"><a href="#数的划分" class="headerlink" title="数的划分"></a>数的划分</h1><h2 id="题目描述-24"><a href="#题目描述-24" class="headerlink" title="题目描述"></a>题目描述</h2><p>将整数 $n$ 分成 $k$ 份，且每份不能为空，任意两个方案不相同（不考虑顺序）。</p><p>例如：$n=7$，$k=3$，下面三种分法被认为是相同的。</p><p>$1,1,5$;<br>$1,5,1$;<br>$5,1,1$.</p><p>问有多少种不同的分法。</p><h2 id="输入格式-24"><a href="#输入格式-24" class="headerlink" title="输入格式"></a>输入格式</h2><p>$n,k$ （$6&lt;n \le 200$，$2  \le k  \le  6$）</p><h2 id="输出格式-24"><a href="#输出格式-24" class="headerlink" title="输出格式"></a>输出格式</h2><p>$1$ 个整数，即不同的分法。</p><h2 id="样例-1-24"><a href="#样例-1-24" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1-24"><a href="#样例输入-1-24" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">7 </span><span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h3 id="样例输出-1-24"><a href="#样例输出-1-24" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">4<br></code></pre></td></tr></table></figure><h2 id="提示-21"><a href="#提示-21" class="headerlink" title="提示"></a>提示</h2><p>四种分法为：<br>$1,1,5$;<br>$1,2,4$;<br>$1,3,3$;<br>$2,2,3$.</p><p><strong>【题目来源】</strong></p><p>NOIP 2001 提高组第二题</p><h2 id="个人题解-23"><a href="#个人题解-23" class="headerlink" title="个人题解"></a>个人题解</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// #include &lt;bits/stdc++.h&gt;</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;utility&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unordered_map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unordered_set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Tp</span>&gt;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> _Tp &amp;<span class="hljs-title">read</span><span class="hljs-params">(_Tp &amp;x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">bool</span> sign = <span class="hljs-literal">false</span>;<br>    <span class="hljs-type">char</span> ch = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-type">double</span> tmp = <span class="hljs-number">1.0</span>;<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(ch); ch = <span class="hljs-built_in">getchar</span>())<br>        sign |= (ch == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (x = <span class="hljs-number">0</span>; <span class="hljs-built_in">isdigit</span>(ch); ch = <span class="hljs-built_in">getchar</span>())<br>        x = x * <span class="hljs-number">10</span> + (ch ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">&#x27;.&#x27;</span>)<br>        <span class="hljs-keyword">for</span> (ch = <span class="hljs-built_in">getchar</span>(); <span class="hljs-built_in">isdigit</span>(ch); ch = <span class="hljs-built_in">getchar</span>())<br>            tmp /= <span class="hljs-number">10.0</span>, x += tmp * (ch ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> sign ? (x = -x) : x;<br>&#125;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Tp</span>&gt;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">write</span><span class="hljs-params">(_Tp x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">0</span>)<br>        <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;-&#x27;</span>), x = -x;<br>    <span class="hljs-keyword">if</span> (x &gt; <span class="hljs-number">9</span>)<br>        <span class="hljs-built_in">write</span>(x / <span class="hljs-number">10</span>);<br>    <span class="hljs-built_in">putchar</span>((x % <span class="hljs-number">10</span>) ^ <span class="hljs-number">48</span>);<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> fastIo() ios::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr)</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ull;<br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; pii;<br><span class="hljs-keyword">typedef</span> pair&lt;ll, ll&gt; pll;<br><br><span class="hljs-type">int</span> n, k;<br><span class="hljs-type">int</span> f[<span class="hljs-number">201</span>][<span class="hljs-number">201</span>];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">fastIo</span>();<br>    <span class="hljs-built_in">read</span>(n), <span class="hljs-built_in">read</span>(k);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        f[i][<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">2</span>; j &lt;= k; j++)<br>            <span class="hljs-keyword">if</span> (i &gt;= j)<br>                f[i][j] = f[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>] + f[i - j][j];<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, f[n][k]);            <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="终于结束的起点"><a href="#终于结束的起点" class="headerlink" title="终于结束的起点"></a>终于结束的起点</h1><h2 id="题目背景-2"><a href="#题目背景-2" class="headerlink" title="题目背景"></a>题目背景</h2><blockquote><p>终于结束的起点<br>终于写下句点<br>终于我们告别<br>终于我们又回到原点<br>……</p></blockquote><p>一个个 OIer 的竞赛生涯总是从一场 NOIp 开始，大多也在一场 NOIp 中结束，好似一次次轮回在不断上演。<br>如果这次 NOIp 是你的起点，那么祝你的 OI 生涯如同夏花般绚烂。<br>如果这次 NOIp 是你的终点，那么祝你的 OI 回忆宛若繁星般璀璨。<br>也许这是你最后一次在洛谷上打比赛，也许不是。<br>不过，无论如何，祝你在一周后的比赛里，好运。</p><p>当然，这道题也和轮回有关系。</p><h2 id="题目描述-25"><a href="#题目描述-25" class="headerlink" title="题目描述"></a>题目描述</h2><p>广为人知的斐波拉契数列 $\mathrm{fib}(n)$ 是这么计算的</p><p><img src="https://cdn.luogu.com.cn/upload/pic/41010.png"></p><p>也就是 $0, 1, 1, 2, 3, 5, 8, 13 \cdots$，每一项都是前两项之和。</p><p>小 F 发现，如果把斐波拉契数列的每一项对任意大于 $1$ 的正整数 $M$ 取模的时候，数列都会产生循环。</p><p>当然，小 F 很快就明白了，因为 ($\mathrm{fib}(n - 1) \bmod M$) 和 ($\mathrm{fib}(n - 2) \bmod M)$ 最多只有 $M ^ 2$ 种取值，所以在 $M  ^ 2$ 次计算后一定出现过循环。</p><p>甚至更一般地，我们可以证明，无论取什么模数 $M$，最终模 $M$ 下的斐波拉契数列都会是 $0, 1, \cdots, 0, 1, \cdots$。</p><p>现在，给你一个模数 $M$，请你求出最小的 $n &gt; 0$，使得 $\mathrm{fib}(n) \bmod M = 0, \mathrm{fib}(n + 1) \bmod M = 1$。</p><h2 id="输入格式-25"><a href="#输入格式-25" class="headerlink" title="输入格式"></a>输入格式</h2><p>输入一行一个正整数 $M$。</p><h2 id="输出格式-25"><a href="#输出格式-25" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出一行一个正整数 $n$。</p><h2 id="样例-1-25"><a href="#样例-1-25" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1-25"><a href="#样例输入-1-25" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">2<br></code></pre></td></tr></table></figure><h3 id="样例输出-1-25"><a href="#样例输出-1-25" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">3<br></code></pre></td></tr></table></figure><h2 id="样例-2-10"><a href="#样例-2-10" class="headerlink" title="样例 #2"></a>样例 #2</h2><h3 id="样例输入-2-10"><a href="#样例输入-2-10" class="headerlink" title="样例输入 #2"></a>样例输入 #2</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">6<br></code></pre></td></tr></table></figure><h3 id="样例输出-2-10"><a href="#样例输出-2-10" class="headerlink" title="样例输出 #2"></a>样例输出 #2</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">24<br></code></pre></td></tr></table></figure><h2 id="提示-22"><a href="#提示-22" class="headerlink" title="提示"></a>提示</h2><h4 id="样例-1-解释"><a href="#样例-1-解释" class="headerlink" title="样例 1 解释"></a>样例 1 解释</h4><p>斐波拉契数列为 $0, 1, 1, 2, 3, 5, 8, 13, 21, 34, \cdots$，在对 $2$ 取模后结果为 $0, 1, 1, 0, 1, 1, 0, 1, 1, 0, \cdots$。</p><p>我们可以发现，当 $n = 3$ 时，$f(n) \bmod 2= 0, f(n + 1) \bmod 2 = 1$，也就是我们要求的 $n$ 的最小值。</p><h4 id="数据范围-1"><a href="#数据范围-1" class="headerlink" title="数据范围"></a>数据范围</h4><p>对于 $30%$ 的数据，$M \leq 18$；</p><p>对于 $70%$ 的数据，$M \leq 2018$；</p><p>对于 $100%$ 的数据，$2 \leq M \leq 706150=$<code>0xAC666</code>。</p><h4 id="提示-23"><a href="#提示-23" class="headerlink" title="提示"></a>提示</h4><p>如果你还不知道什么是取模 $(\bmod)$，那我也很乐意告诉你，模运算是求整数除法得到的余数，也就是竖式除法最终「除不尽」的部分，也即<br>$$a \bmod M =k \iff a = bM + k\ (M &gt; 0, 0 \leq k &lt; M)$$<br>其中 $a, b, k$ 都是非负整数。</p><p>如果你使用 <code>C</code> / <code>C++</code>，你可以使用 <code>%</code> 来进行模运算。</p><p>如果你使用 <code>Pascal</code>，你可以使用 <code>mod</code> 来进行模运算。</p><h2 id="个人题解-24"><a href="#个人题解-24" class="headerlink" title="个人题解"></a>个人题解</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// #include &lt;bits/stdc++.h&gt;</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;utility&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unordered_map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unordered_set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Tp</span>&gt;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> _Tp &amp;<span class="hljs-title">read</span><span class="hljs-params">(_Tp &amp;x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">bool</span> sign = <span class="hljs-literal">false</span>;<br>    <span class="hljs-type">char</span> ch = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-type">double</span> tmp = <span class="hljs-number">1.0</span>;<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(ch); ch = <span class="hljs-built_in">getchar</span>())<br>        sign |= (ch == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (x = <span class="hljs-number">0</span>; <span class="hljs-built_in">isdigit</span>(ch); ch = <span class="hljs-built_in">getchar</span>())<br>        x = x * <span class="hljs-number">10</span> + (ch ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">&#x27;.&#x27;</span>)<br>        <span class="hljs-keyword">for</span> (ch = <span class="hljs-built_in">getchar</span>(); <span class="hljs-built_in">isdigit</span>(ch); ch = <span class="hljs-built_in">getchar</span>())<br>            tmp /= <span class="hljs-number">10.0</span>, x += tmp * (ch ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> sign ? (x = -x) : x;<br>&#125;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Tp</span>&gt;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">write</span><span class="hljs-params">(_Tp x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">0</span>)<br>        <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;-&#x27;</span>), x = -x;<br>    <span class="hljs-keyword">if</span> (x &gt; <span class="hljs-number">9</span>)<br>        <span class="hljs-built_in">write</span>(x / <span class="hljs-number">10</span>);<br>    <span class="hljs-built_in">putchar</span>((x % <span class="hljs-number">10</span>) ^ <span class="hljs-number">48</span>);<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> fastIo() ios::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr)</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ull;<br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; pii;<br><span class="hljs-keyword">typedef</span> pair&lt;ll, ll&gt; pll;<br><br><span class="hljs-type">int</span> m;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">fastIo</span>();<br>    <span class="hljs-built_in">read</span>(m);<br>    <span class="hljs-type">int</span> a = <span class="hljs-number">0</span>, b = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (ll i = <span class="hljs-number">1</span>; i &lt; INT32_MAX; i++)<br>    &#123;<br>        <span class="hljs-type">int</span> tmp = b;<br>        b = a + b % m;<br>        a = tmp % m;<br>        <span class="hljs-keyword">if</span> (a == <span class="hljs-number">0</span> &amp;&amp; b == <span class="hljs-number">1</span>)<br>        &#123;<br>            cout &lt;&lt; i &lt;&lt; endl;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>洛谷</category>
      
    </categories>
    
    
    <tags>
      
      <tag>洛谷</tag>
      
      <tag>入门</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>3381.手机键盘</title>
    <link href="/2022/07/13/3381-%E6%89%8B%E6%9C%BA%E9%94%AE%E7%9B%98/"/>
    <url>/2022/07/13/3381-%E6%89%8B%E6%9C%BA%E9%94%AE%E7%9B%98/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://www.acwing.com/problem/content/3384/">AcWing链接</a></p><p>请你计算按照手机键盘（9 键输入法）输入字母的方式，键入给定字符串（由小写字母构成）所花费的时间。</p><p><img src="https://cdn.acwing.com/media/article/image/2021/04/09/19_927882c499-11.png"></p><p>具体键入规则和花费时间如下描述：</p><p>对于同一键上的字符，例如 a,b,c 都在 “1” 键上，输入 a 只需要按一次，输入 c 需要连续按三次。</p><p>如果连续两个字符不在同一个按键上，则可直接按，如：ad 需要按两下，kz 需要按 6 下。</p><p>如果连续两字符在同一个按键上，则两个按键之间需要等一段时间，如 ac，在按了 a 之后，需要等一会儿才能按 c。</p><p>现在假设每按一次需要花费一个时间段，等待时间需要花费两个时间段。</p><p><strong>输入格式</strong></p><p>输入包含多组测试数据。</p><p>每组数据占一行，包含一个由小写字母构成的字符串。</p><p><strong>输出格式</strong></p><p>对于每组输入，输出一行结果表示键入给定字符串所需要花费的时间。</p><p><strong>数据范围</strong></p><p>每个输入最多包含 100 组测试数据。<br>所有字符串的长度都不超过 100。</p><p><strong>输入样例：</strong></p><pre><code class="hljs">bobwww</code></pre><p><strong>输出样例：</strong></p><pre><code class="hljs">77</code></pre><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><blockquote><p>并非最优解，仅为本人作答答案！</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> alpha[<span class="hljs-number">27</span>] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;;<br>    <span class="hljs-type">int</span> part[<span class="hljs-number">27</span>] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">4</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">5</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">6</span>,<span class="hljs-number">6</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">7</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">8</span>,<span class="hljs-number">8</span>,<span class="hljs-number">8</span>&#125;;<br>    string a;<br>    <span class="hljs-keyword">while</span>(cin &gt;&gt; a)<br>    &#123;<br>        <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>,x = <span class="hljs-number">0</span>,sec = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; a.<span class="hljs-built_in">size</span>();i++)<br>        &#123;<br>            sum += alpha[a[i] - <span class="hljs-string">&#x27;a&#x27;</span>];<br>            <span class="hljs-keyword">if</span> (part[x] == part[a[i] - <span class="hljs-string">&#x27;a&#x27;</span>] &amp;&amp; sec)<br>            &#123;<br>                sum += <span class="hljs-number">2</span>;<br>            &#125; <br>            x = a[i] - <span class="hljs-string">&#x27;a&#x27;</span>;<br>            sec = <span class="hljs-number">1</span>;<br>        &#125;<br>        cout &lt;&lt; sum &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>AcWing</category>
      
    </categories>
    
    
    <tags>
      
      <tag>模拟</tag>
      
      <tag>AcWing</tag>
      
      <tag>暑假每日一题2022</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>硬件课程设计-代码汇总</title>
    <link href="/2022/07/09/%E7%A1%AC%E4%BB%B6%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1%E6%B1%87%E6%80%BB/"/>
    <url>/2022/07/09/%E7%A1%AC%E4%BB%B6%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1%E6%B1%87%E6%80%BB/</url>
    
    <content type="html"><![CDATA[<h3 id="经典全选16题"><a href="#经典全选16题" class="headerlink" title="经典全选16题"></a>经典全选16题</h3><h4 id="1-构建基本组合电路器件，然后生成对应的IP核"><a href="#1-构建基本组合电路器件，然后生成对应的IP核" class="headerlink" title="(1) 构建基本组合电路器件，然后生成对应的IP核"></a>(1) 构建基本组合电路器件，然后生成对应的IP核</h4><ul><li>加法器<ul><li><a href="/2022/07/07/Verilog-1%E4%BD%8D%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%8A%A0%E6%B3%95%E5%99%A8%E4%BB%A3%E7%A0%81%E4%B8%8E%E4%BB%BF%E7%9C%9F/" title="二进制加法器">二进制加法器</a></li><li><a href="/2022/07/07/Verilog-1%E4%BD%8D%E5%8D%81%E8%BF%9B%E5%88%B6%E5%8A%A0%E6%B3%95%E5%99%A8%E4%BB%A3%E7%A0%81%E4%B8%8E%E4%BB%BF%E7%9C%9F/" title="十进制加法器">十进制加法器</a></li></ul></li><li>全加器<ul><li><a href="/2022/07/06/Verilog-1%E4%BD%8D%E5%8D%8A%E5%8A%A0%E5%99%A8%E4%BB%A3%E7%A0%81%E4%B8%8E%E4%BB%BF%E7%9C%9F/" title="半加器">半加器</a></li><li><a href="/2022/07/06/Verilog-1%E4%BD%8D%E5%85%A8%E5%8A%A0%E5%99%A8%E4%BB%A3%E7%A0%81%E4%B8%8E%E4%BB%BF%E7%9C%9F/" title="一位全加器">一位全加器</a></li></ul></li><li>选择器<ul><li><a href="/2022/07/06/Verilog-2%E9%80%891%E6%95%B0%E9%80%89%E5%99%A8%E4%BB%A3%E7%A0%81%E4%B8%8E%E4%BB%BF%E7%9C%9F/" title="2选1数选器">2选1数选器</a></li></ul></li><li>编码器<ul><li><a href="/2022/07/07/Verilog-3%E4%BD%8D%E4%BA%8C%E8%BF%9B%E5%88%B6%E7%BC%96%E7%A0%81%E5%99%A8%E4%BB%A3%E7%A0%81%E4%B8%8E%E4%BB%BF%E7%9C%9F/" title="二进制编码器">二进制编码器</a></li><li><a href="/2022/07/07/Verilog-%E4%BA%8C-%E5%8D%81%E8%BF%9B%E5%88%B6%E7%BC%96%E7%A0%81%E5%99%A8%E4%BB%A3%E7%A0%81%E4%B8%8E%E4%BB%BF%E7%9C%9F/" title="二-十进制编码器">二-十进制编码器</a></li><li><a href="/2022/07/07/Verilog-%E4%BC%98%E5%85%88%E7%BC%96%E7%A0%81%E5%99%A8%E4%BB%A3%E7%A0%81%E4%B8%8E%E4%BB%BF%E7%9C%9F/" title="优先编码器">优先编码器</a></li></ul></li><li>译码器<ul><li><a href="/2022/07/07/Verilog-%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%AF%91%E7%A0%81%E5%99%A8%E4%BB%A3%E7%A0%81%E4%B8%8E%E4%BB%BF%E7%9C%9F/" title="二进制译码器">二进制译码器</a></li><li><a href="/2022/07/07/Verilog-%E4%BA%8C-%E5%8D%81%E8%BF%9B%E5%88%B6%E8%AF%91%E7%A0%81%E5%99%A8%E4%BB%A3%E7%A0%81%E4%B8%8E%E4%BB%BF%E7%9C%9F/" title="二-十进制译码器">二-十进制译码器</a></li></ul></li><li>数值比较器<ul><li><a href="/2022/07/07/Verilog-1%E4%BD%8D%E6%95%B0%E5%80%BC%E6%AF%94%E8%BE%83%E5%99%A8%E4%BB%A3%E7%A0%81%E4%B8%8E%E4%BB%BF%E7%9C%9F/" title="1位数值比较器">1位数值比较器</a></li><li><a href="/2022/07/08/Verilog-1%E4%BD%8D%E6%95%B0%E5%80%BC%E6%AF%94%E8%BE%83%E5%99%A8-%E5%B8%A6%E8%BE%93%E5%85%A5%E7%AB%AF-%E4%BB%A3%E7%A0%81%E4%B8%8E%E4%BB%BF%E7%9C%9F/" title="1位数值比较器（带输入端）">1位数值比较器（带输入端）</a> <span style="color: red;">！用这个</span></li></ul></li><li>数据分配器<ul><li><a href="/2022/07/07/Verilog-2%E8%B7%AF%E5%88%86%E9%85%8D%E5%99%A8%E4%BB%A3%E7%A0%81%E4%B8%8E%E4%BB%BF%E7%9C%9F/" title="2路分配器">2路分配器</a></li></ul></li></ul><h4 id="2-分别通过例化、IP核调用两种方法扩充功能"><a href="#2-分别通过例化、IP核调用两种方法扩充功能" class="headerlink" title="(2) 分别通过例化、IP核调用两种方法扩充功能"></a>(2) 分别通过例化、IP核调用两种方法扩充功能</h4><ul><li>加法器<ul><li><a href="/2022/07/06/Verilog-4%E4%BD%8D%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%8A%A0%E6%B3%95%E5%99%A8%E4%BB%A3%E7%A0%81%E4%B8%8E%E4%BB%BF%E7%9C%9F/" title="由1位二进制加法器生成4位二进制加法器">由1位二进制加法器生成4位二进制加法器</a></li><li><a href="/2022/07/07/Verilog-4%E4%BD%8D%E5%8D%81%E8%BF%9B%E5%88%B6%E5%8A%A0%E6%B3%95%E5%99%A8%E4%BB%A3%E7%A0%81%E4%B8%8E%E4%BB%BF%E7%9C%9F/" title="由1位十进制加法器生成4位十进制加法器">由1位十进制加法器生成4位十进制加法器</a></li></ul></li><li>全加器<ul><li><a href="/2022/07/07/Verilog-4%E4%BD%8D%E5%85%A8%E5%8A%A0%E5%99%A8%E4%BB%A3%E7%A0%81%E4%B8%8E%E4%BB%BF%E7%9C%9F/" title="由一位全加器生成四位全加器">由一位全加器生成四位全加器</a></li></ul></li><li>选择器<ul><li><a href="/2022/07/06/Verilog-2%E9%80%891%E6%95%B0%E9%80%89%E5%99%A8%E4%BB%A3%E7%A0%81%E4%B8%8E%E4%BB%BF%E7%9C%9F/" title="由2选1数选器生成4选1数选器">由2选1数选器生成4选1数选器</a></li></ul></li><li>数值比较器<ul><li><a href="/2022/07/08/Verilog-4%E4%BD%8D%E6%95%B0%E5%80%BC%E6%AF%94%E8%BE%83%E5%99%A8%E4%BB%A3%E7%A0%81%E4%B8%8E%E4%BB%BF%E7%9C%9F/" title="由1位数值比较器生成4位数值比较器">由1位数值比较器生成4位数值比较器</a></li></ul></li><li>数据分配器<ul><li><a href="/2022/07/09/Verilog-4%E8%B7%AF%E5%88%86%E9%85%8D%E5%99%A8%E4%BB%A3%E7%A0%81%E4%B8%8E%E4%BB%BF%E7%9C%9F/" title="由2路分配器生成4路分配器">由2路分配器生成4路分配器</a></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>硬件课程设计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Verilog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Verilog-选择器-4路分配器代码与仿真</title>
    <link href="/2022/07/09/Verilog-4%E8%B7%AF%E5%88%86%E9%85%8D%E5%99%A8%E4%BB%A3%E7%A0%81%E4%B8%8E%E4%BB%BF%E7%9C%9F/"/>
    <url>/2022/07/09/Verilog-4%E8%B7%AF%E5%88%86%E9%85%8D%E5%99%A8%E4%BB%A3%E7%A0%81%E4%B8%8E%E4%BB%BF%E7%9C%9F/</url>
    
    <content type="html"><![CDATA[<h3 id="4路分配器"><a href="#4路分配器" class="headerlink" title="4路分配器"></a>4路分配器</h3><h4 id="IP核组成线路"><a href="#IP核组成线路" class="headerlink" title="IP核组成线路"></a>IP核组成线路</h4><p>四组<a href="/2022/07/07/Verilog-2%E8%B7%AF%E5%88%86%E9%85%8D%E5%99%A8%E4%BB%A3%E7%A0%81%E4%B8%8E%E4%BB%BF%E7%9C%9F/" title="2路分配器">2路分配器</a></p><p><img src="https://api2.mubu.com/v3/document_image/5c8fe51c-311f-4ebb-9df0-9fb5b68e5712-785422.jpg"></p><h4 id="Verilog-代码"><a href="#Verilog-代码" class="headerlink" title="Verilog 代码"></a>Verilog 代码</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs Verilog"><span class="hljs-comment">//Copyright 1986-2018 Xilinx, Inc. All Rights Reserved.</span><br><span class="hljs-comment">//--------------------------------------------------------------------------------</span><br><span class="hljs-comment">//Tool Version: Vivado v.2018.3 (win64) Build 2405991 Thu Dec  6 23:38:27 MST 2018</span><br><span class="hljs-comment">//Date        : Sat Jul  9 15:29:13 2022</span><br><span class="hljs-comment">//Host        : WIN-M6SVA3A7MOS running 64-bit major release  (build 9200)</span><br><span class="hljs-comment">//Command     : generate_target otof.bd</span><br><span class="hljs-comment">//Design      : otof</span><br><span class="hljs-comment">//Purpose     : IP block netlist</span><br><span class="hljs-comment">//--------------------------------------------------------------------------------</span><br><span class="hljs-meta">`<span class="hljs-keyword">timescale</span> 1 ps / 1 ps</span><br><br>(* CORE_GENERATION_INFO = <span class="hljs-string">&quot;otof,IP_Integrator,&#123;x_ipVendor=xilinx.com,x_ipLibrary=BlockDiagram,x_ipName=otof,x_ipVersion=1.00.a,x_ipLanguage=VERILOG,numBlks=3,numReposBlks=3,numNonXlnxBlks=0,numHierBlks=0,maxHierDepth=0,numSysgenBlks=0,numHlsBlks=0,numHdlrefBlks=0,numPkgbdBlks=0,bdsource=USER,synth_mode=OOC_per_IP&#125;&quot;</span> *) (* HW_HANDOFF = <span class="hljs-string">&quot;otof.hwdef&quot;</span> *) <br><span class="hljs-keyword">module</span> otof<br>   (D_0,<br>    a_0,<br>    a_1,<br>    y0,<br>    y1,<br>    y2,<br>    y3);<br>  <span class="hljs-keyword">input</span> D_0;<br>  <span class="hljs-keyword">input</span> a_0;<br>  <span class="hljs-keyword">input</span> a_1;<br>  <span class="hljs-keyword">output</span> y0;<br>  <span class="hljs-keyword">output</span> y1;<br>  <span class="hljs-keyword">output</span> y2;<br>  <span class="hljs-keyword">output</span> y3;<br><br>  <span class="hljs-keyword">wire</span> D_0_1;<br>  <span class="hljs-keyword">wire</span> a_0_1;<br>  <span class="hljs-keyword">wire</span> a_1_1;<br>  <span class="hljs-keyword">wire</span> ototwo_0_y0;<br>  <span class="hljs-keyword">wire</span> ototwo_0_y1;<br>  <span class="hljs-keyword">wire</span> ototwo_1_y0;<br>  <span class="hljs-keyword">wire</span> ototwo_1_y1;<br>  <span class="hljs-keyword">wire</span> ototwo_2_y0;<br>  <span class="hljs-keyword">wire</span> ototwo_2_y1;<br><br>  <span class="hljs-keyword">assign</span> D_0_1 = D_0;<br>  <span class="hljs-keyword">assign</span> a_0_1 = a_1;<br>  <span class="hljs-keyword">assign</span> a_1_1 = a_0;<br>  <span class="hljs-keyword">assign</span> y0 = ototwo_2_y1;<br>  <span class="hljs-keyword">assign</span> y1 = ototwo_2_y0;<br>  <span class="hljs-keyword">assign</span> y2 = ototwo_1_y1;<br>  <span class="hljs-keyword">assign</span> y3 = ototwo_1_y0;<br>  otof_ototwo_0_0 ototwo_0<br>       (<span class="hljs-variable">.D</span>(D_0_1),<br>        <span class="hljs-variable">.a</span>(a_0_1),<br>        <span class="hljs-variable">.y0</span>(ototwo_0_y0),<br>        <span class="hljs-variable">.y1</span>(ototwo_0_y1));<br>  otof_ototwo_1_0 ototwo_1<br>       (<span class="hljs-variable">.D</span>(ototwo_0_y0),<br>        <span class="hljs-variable">.a</span>(a_1_1),<br>        <span class="hljs-variable">.y0</span>(ototwo_1_y0),<br>        <span class="hljs-variable">.y1</span>(ototwo_1_y1));<br>  otof_ototwo_2_0 ototwo_2<br>       (<span class="hljs-variable">.D</span>(ototwo_0_y1),<br>        <span class="hljs-variable">.a</span>(a_1_1),<br>        <span class="hljs-variable">.y0</span>(ototwo_2_y0),<br>        <span class="hljs-variable">.y1</span>(ototwo_2_y1));<br><span class="hljs-keyword">endmodule</span><br><br></code></pre></td></tr></table></figure><h4 id="Verilog-仿真-代码"><a href="#Verilog-仿真-代码" class="headerlink" title="Verilog 仿真 代码"></a>Verilog 仿真 代码</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs Verilog"><span class="hljs-comment">//Copyright 1986-2018 Xilinx, Inc. All Rights Reserved.</span><br><span class="hljs-comment">//--------------------------------------------------------------------------------</span><br><span class="hljs-comment">//Tool Version: Vivado v.2018.3 (win64) Build 2405991 Thu Dec  6 23:38:27 MST 2018</span><br><span class="hljs-comment">//Date        : Sat Jul  9 15:28:51 2022</span><br><span class="hljs-comment">//Host        : WIN-M6SVA3A7MOS running 64-bit major release  (build 9200)</span><br><span class="hljs-comment">//Command     : generate_target otof_wrapper.bd</span><br><span class="hljs-comment">//Design      : otof_wrapper</span><br><span class="hljs-comment">//Purpose     : IP block netlist</span><br><span class="hljs-comment">//--------------------------------------------------------------------------------</span><br><span class="hljs-meta">`<span class="hljs-keyword">timescale</span> 1 ps / 1 ps</span><br><br><span class="hljs-comment">//Copyright 1986-2018 Xilinx, Inc. All Rights Reserved.</span><br><span class="hljs-comment">//--------------------------------------------------------------------------------</span><br><span class="hljs-comment">//Tool Version: Vivado v.2018.3 (win64) Build 2405991 Thu Dec  6 23:38:27 MST 2018</span><br><span class="hljs-comment">//Date        : Sat Jul  9 15:08:50 2022</span><br><span class="hljs-comment">//Host        : WIN-M6SVA3A7MOS running 64-bit major release  (build 9200)</span><br><span class="hljs-comment">//Command     : generate_target otof_wrapper.bd</span><br><span class="hljs-comment">//Design      : otof_wrapper</span><br><span class="hljs-comment">//Purpose     : IP block netlist</span><br><span class="hljs-comment">//--------------------------------------------------------------------------------</span><br><span class="hljs-meta">`<span class="hljs-keyword">timescale</span> 1 ps / 1 ps</span><br><br><span class="hljs-keyword">module</span> otof_wrapper;<br>  <span class="hljs-keyword">reg</span> D_0;<br>  <span class="hljs-keyword">reg</span> a_0;<br>  <span class="hljs-keyword">reg</span> a_1;<br>  <span class="hljs-keyword">wire</span> y0;<br>  <span class="hljs-keyword">wire</span> y1;<br>  <span class="hljs-keyword">wire</span> y2;<br>  <span class="hljs-keyword">wire</span> y3;<br><br>  otof otof_i<br>       (<span class="hljs-variable">.D_0</span>(D_0),<br>        <span class="hljs-variable">.a_0</span>(a_0),<br>        <span class="hljs-variable">.a_1</span>(a_1),<br>        <span class="hljs-variable">.y0</span>(y0),<br>        <span class="hljs-variable">.y1</span>(y1),<br>        <span class="hljs-variable">.y2</span>(y2),<br>        <span class="hljs-variable">.y3</span>(y3));<br>        <br>    <span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span><br>        # <span class="hljs-number">0</span> D_0 &lt;= <span class="hljs-number">1&#x27;b0</span>; <br>        # <span class="hljs-number">0</span> a_1 &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>        # <span class="hljs-number">0</span> a_0 &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>    <span class="hljs-keyword">end</span><br>    <br>    <span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span><br>        # <span class="hljs-number">40</span> D_0 = <span class="hljs-number">1&#x27;b1</span>;<br>    <span class="hljs-keyword">end</span><br>    <br>    <span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span><br>        # <span class="hljs-number">20</span> a_1 = <span class="hljs-number">1&#x27;b1</span>;<br>        # <span class="hljs-number">20</span> a_1 = <span class="hljs-number">1&#x27;b0</span>;<br>        # <span class="hljs-number">20</span> a_1 = <span class="hljs-number">1&#x27;b1</span>;<br>        # <span class="hljs-number">20</span> <span class="hljs-built_in">$stop</span>;<br>    <span class="hljs-keyword">end</span><br>    <br>    <span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span><br>        # <span class="hljs-number">10</span> a_0 = <span class="hljs-number">1&#x27;b1</span>;<br>        # <span class="hljs-number">10</span> a_0 = <span class="hljs-number">1&#x27;b0</span>;<br>        # <span class="hljs-number">10</span> a_0 = <span class="hljs-number">1&#x27;b1</span>;<br>        # <span class="hljs-number">10</span> a_0 = <span class="hljs-number">1&#x27;b0</span>;<br>        # <span class="hljs-number">10</span> a_0 = <span class="hljs-number">1&#x27;b1</span>;<br>        # <span class="hljs-number">10</span> a_0 = <span class="hljs-number">1&#x27;b0</span>;<br>        # <span class="hljs-number">10</span> a_0 = <span class="hljs-number">1&#x27;b1</span>;<br>        # <span class="hljs-number">10</span> <span class="hljs-built_in">$stop</span>;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>硬件课程设计</category>
      
      <category>IP核调用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Verilog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Verilog-数值比较器-1位数值比较器（带输入端）代码与仿真</title>
    <link href="/2022/07/08/Verilog-1%E4%BD%8D%E6%95%B0%E5%80%BC%E6%AF%94%E8%BE%83%E5%99%A8-%E5%B8%A6%E8%BE%93%E5%85%A5%E7%AB%AF-%E4%BB%A3%E7%A0%81%E4%B8%8E%E4%BB%BF%E7%9C%9F/"/>
    <url>/2022/07/08/Verilog-1%E4%BD%8D%E6%95%B0%E5%80%BC%E6%AF%94%E8%BE%83%E5%99%A8-%E5%B8%A6%E8%BE%93%E5%85%A5%E7%AB%AF-%E4%BB%A3%E7%A0%81%E4%B8%8E%E4%BB%BF%E7%9C%9F/</url>
    
    <content type="html"><![CDATA[<h3 id="1位数值比较器（带输入端）"><a href="#1位数值比较器（带输入端）" class="headerlink" title="1位数值比较器（带输入端）"></a>1位数值比较器（带输入端）</h3><h4 id="Verilog-代码"><a href="#Verilog-代码" class="headerlink" title="Verilog 代码"></a>Verilog 代码</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs Verilog"><span class="hljs-keyword">module</span> com (<br>        <span class="hljs-keyword">input</span> [<span class="hljs-number">2</span>:<span class="hljs-number">0</span>] i,<br>        <span class="hljs-keyword">input</span> a,<br>        <span class="hljs-keyword">input</span> b,<br>        <span class="hljs-keyword">output</span> [<span class="hljs-number">2</span>:<span class="hljs-number">0</span>] y<br>    );<br>    <span class="hljs-keyword">reg</span> [<span class="hljs-number">2</span>:<span class="hljs-number">0</span>] y_tmp;<br>    <span class="hljs-keyword">always</span> @(*)<br>        <span class="hljs-keyword">begin</span><br>            <span class="hljs-keyword">if</span> (i == <span class="hljs-number">3&#x27;b100</span>)<br>                y_tmp &lt;= <span class="hljs-number">3&#x27;b100</span>;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i == <span class="hljs-number">3&#x27;b001</span>)<br>                y_tmp &lt;= <span class="hljs-number">3&#x27;b001</span>;<br>            <span class="hljs-keyword">else</span><br>                <span class="hljs-keyword">if</span> (a &gt; b)<br>                    y_tmp &lt;= <span class="hljs-number">3&#x27;b100</span>;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a == b)<br>                    y_tmp &lt;= <span class="hljs-number">3&#x27;b010</span>;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a &lt; b)<br>                    y_tmp &lt;= <span class="hljs-number">3&#x27;b001</span>;<br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">assign</span> y = y_tmp;<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h4 id="Verilog-仿真-代码"><a href="#Verilog-仿真-代码" class="headerlink" title="Verilog 仿真 代码"></a>Verilog 仿真 代码</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs Verilog"><span class="hljs-meta">`<span class="hljs-keyword">timescale</span> 1ns / 1ps</span><br><br><span class="hljs-keyword">module</span> com_tb;<br>    <span class="hljs-keyword">reg</span> a;<br>    <span class="hljs-keyword">reg</span> b;<br>    <span class="hljs-keyword">reg</span> [<span class="hljs-number">2</span>:<span class="hljs-number">0</span>] i;<br>    <span class="hljs-keyword">wire</span> [<span class="hljs-number">2</span>:<span class="hljs-number">0</span>] y;<br><br>    com tb(<br>        <span class="hljs-variable">.a</span>(a),<br>        <span class="hljs-variable">.b</span>(b),<br>        <span class="hljs-variable">.i</span>(i),<br>        <span class="hljs-variable">.y</span>(y)<br>    );<br><br>    <span class="hljs-keyword">initial</span> <br>        <span class="hljs-keyword">begin</span><br>           #<span class="hljs-number">0</span> a = <span class="hljs-number">0</span>; <br>           #<span class="hljs-number">20</span> a = <span class="hljs-number">1</span>;<br>           #<span class="hljs-number">20</span> <span class="hljs-built_in">$stop</span>;<br>        <span class="hljs-keyword">end</span><br>        <br>    <span class="hljs-keyword">initial</span> <br>        <span class="hljs-keyword">begin</span><br>           #<span class="hljs-number">0</span> b = <span class="hljs-number">0</span>; <br>           #<span class="hljs-number">10</span> b = <span class="hljs-number">1</span>;<br>           #<span class="hljs-number">10</span> b = <span class="hljs-number">0</span>; <br>           #<span class="hljs-number">10</span> b = <span class="hljs-number">1</span>;<br>           #<span class="hljs-number">10</span> <span class="hljs-built_in">$stop</span>;<br>        <span class="hljs-keyword">end</span><br>        <br>    <span class="hljs-keyword">initial</span> <br>        <span class="hljs-keyword">begin</span><br>           #<span class="hljs-number">0</span> i = <span class="hljs-number">3&#x27;b010</span>; <br>           #<span class="hljs-number">20</span> i = <span class="hljs-number">3&#x27;b100</span>;<br>           #<span class="hljs-number">10</span> i = <span class="hljs-number">3&#x27;b001</span>;<br>           #<span class="hljs-number">10</span> <span class="hljs-built_in">$stop</span>;<br>        <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>硬件课程设计</category>
      
      <category>基本组合电路</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Verilog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Verilog-数值比较器-4位数值比较器代码与仿真</title>
    <link href="/2022/07/08/Verilog-4%E4%BD%8D%E6%95%B0%E5%80%BC%E6%AF%94%E8%BE%83%E5%99%A8%E4%BB%A3%E7%A0%81%E4%B8%8E%E4%BB%BF%E7%9C%9F/"/>
    <url>/2022/07/08/Verilog-4%E4%BD%8D%E6%95%B0%E5%80%BC%E6%AF%94%E8%BE%83%E5%99%A8%E4%BB%A3%E7%A0%81%E4%B8%8E%E4%BB%BF%E7%9C%9F/</url>
    
    <content type="html"><![CDATA[<h3 id="4位数值比较器"><a href="#4位数值比较器" class="headerlink" title="4位数值比较器"></a>4位数值比较器</h3><h4 id="IP核组成线路"><a href="#IP核组成线路" class="headerlink" title="IP核组成线路"></a>IP核组成线路</h4><p>!!! 没有采用 <a href="/2022/07/07/Verilog-1%E4%BD%8D%E6%95%B0%E5%80%BC%E6%AF%94%E8%BE%83%E5%99%A8%E4%BB%A3%E7%A0%81%E4%B8%8E%E4%BB%BF%E7%9C%9F/" title="1位数值比较器">1位数值比较器</a> ，因为这个1位数值比较器没有输入端，组成4位会很麻烦</p><p>采用 <a href="/2022/07/08/Verilog-1%E4%BD%8D%E6%95%B0%E5%80%BC%E6%AF%94%E8%BE%83%E5%99%A8-%E5%B8%A6%E8%BE%93%E5%85%A5%E7%AB%AF-%E4%BB%A3%E7%A0%81%E4%B8%8E%E4%BB%BF%E7%9C%9F/" title="1位数值比较器（带输入端）">1位数值比较器（带输入端）</a></p><p><img src="https://api2.mubu.com/v3/document_image/8075962f-4fe7-4af5-9a1a-3bb4c9b24769-785422.jpg"></p><h4 id="Verilog-代码"><a href="#Verilog-代码" class="headerlink" title="Verilog 代码"></a>Verilog 代码</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs Verilog"><span class="hljs-comment">//Copyright 1986-2018 Xilinx, Inc. All Rights Reserved.</span><br><span class="hljs-comment">//--------------------------------------------------------------------------------</span><br><span class="hljs-comment">//Tool Version: Vivado v.2018.3 (win64) Build 2405991 Thu Dec  6 23:38:27 MST 2018</span><br><span class="hljs-comment">//Date        : Fri Jul  8 02:59:21 2022</span><br><span class="hljs-comment">//Host        : WIN-M6SVA3A7MOS running 64-bit major release  (build 9200)</span><br><span class="hljs-comment">//Command     : generate_target com_4b.bd</span><br><span class="hljs-comment">//Design      : com_4b</span><br><span class="hljs-comment">//Purpose     : IP block netlist</span><br><span class="hljs-comment">//--------------------------------------------------------------------------------</span><br><span class="hljs-meta">`<span class="hljs-keyword">timescale</span> 1 ps / 1 ps</span><br><br>(* CORE_GENERATION_INFO = <span class="hljs-string">&quot;com_4b,IP_Integrator,&#123;x_ipVendor=xilinx.com,x_ipLibrary=BlockDiagram,x_ipName=com_4b,x_ipVersion=1.00.a,x_ipLanguage=VERILOG,numBlks=4,numReposBlks=4,numNonXlnxBlks=0,numHierBlks=0,maxHierDepth=0,numSysgenBlks=0,numHlsBlks=0,numHdlrefBlks=0,numPkgbdBlks=0,bdsource=USER,synth_mode=OOC_per_IP&#125;&quot;</span> *) (* HW_HANDOFF = <span class="hljs-string">&quot;com_4b.hwdef&quot;</span> *) <br><span class="hljs-keyword">module</span> com_4b<br>   (a_0,<br>    a_1,<br>    a_2,<br>    a_3,<br>    b_0,<br>    b_1,<br>    b_2,<br>    b_3,<br>    i_0,<br>    y_0);<br>  <span class="hljs-keyword">input</span> a_0;<br>  <span class="hljs-keyword">input</span> a_1;<br>  <span class="hljs-keyword">input</span> a_2;<br>  <span class="hljs-keyword">input</span> a_3;<br>  <span class="hljs-keyword">input</span> b_0;<br>  <span class="hljs-keyword">input</span> b_1;<br>  <span class="hljs-keyword">input</span> b_2;<br>  <span class="hljs-keyword">input</span> b_3;<br>  <span class="hljs-keyword">input</span> [<span class="hljs-number">2</span>:<span class="hljs-number">0</span>]i_0;<br>  <span class="hljs-keyword">output</span> [<span class="hljs-number">2</span>:<span class="hljs-number">0</span>]y_0;<br><br>  <span class="hljs-keyword">wire</span> a_0_1;<br>  <span class="hljs-keyword">wire</span> a_1_1;<br>  <span class="hljs-keyword">wire</span> a_2_1;<br>  <span class="hljs-keyword">wire</span> a_3_1;<br>  <span class="hljs-keyword">wire</span> b_0_1;<br>  <span class="hljs-keyword">wire</span> b_1_1;<br>  <span class="hljs-keyword">wire</span> b_2_1;<br>  <span class="hljs-keyword">wire</span> b_3_1;<br>  <span class="hljs-keyword">wire</span> [<span class="hljs-number">2</span>:<span class="hljs-number">0</span>]com_0_y;<br>  <span class="hljs-keyword">wire</span> [<span class="hljs-number">2</span>:<span class="hljs-number">0</span>]com_1_y;<br>  <span class="hljs-keyword">wire</span> [<span class="hljs-number">2</span>:<span class="hljs-number">0</span>]com_2_y;<br>  <span class="hljs-keyword">wire</span> [<span class="hljs-number">2</span>:<span class="hljs-number">0</span>]com_3_y;<br>  <span class="hljs-keyword">wire</span> [<span class="hljs-number">2</span>:<span class="hljs-number">0</span>]i_0_1;<br><br>  <span class="hljs-keyword">assign</span> a_0_1 = a_0;<br>  <span class="hljs-keyword">assign</span> a_1_1 = a_1;<br>  <span class="hljs-keyword">assign</span> a_2_1 = a_2;<br>  <span class="hljs-keyword">assign</span> a_3_1 = a_3;<br>  <span class="hljs-keyword">assign</span> b_0_1 = b_0;<br>  <span class="hljs-keyword">assign</span> b_1_1 = b_1;<br>  <span class="hljs-keyword">assign</span> b_2_1 = b_2;<br>  <span class="hljs-keyword">assign</span> b_3_1 = b_3;<br>  <span class="hljs-keyword">assign</span> i_0_1 = i_0[<span class="hljs-number">2</span>:<span class="hljs-number">0</span>];<br>  <span class="hljs-keyword">assign</span> y_0[<span class="hljs-number">2</span>:<span class="hljs-number">0</span>] = com_0_y;<br>  com_4b_com_0_1 com_0<br>       (<span class="hljs-variable">.a</span>(a_0_1),<br>        <span class="hljs-variable">.b</span>(b_0_1),<br>        <span class="hljs-variable">.i</span>(com_1_y),<br>        <span class="hljs-variable">.y</span>(com_0_y));<br>  com_4b_com_1_1 com_1<br>       (<span class="hljs-variable">.a</span>(a_1_1),<br>        <span class="hljs-variable">.b</span>(b_1_1),<br>        <span class="hljs-variable">.i</span>(com_2_y),<br>        <span class="hljs-variable">.y</span>(com_1_y));<br>  com_4b_com_2_1 com_2<br>       (<span class="hljs-variable">.a</span>(a_2_1),<br>        <span class="hljs-variable">.b</span>(b_2_1),<br>        <span class="hljs-variable">.i</span>(com_3_y),<br>        <span class="hljs-variable">.y</span>(com_2_y));<br>  com_4b_com_3_1 com_3<br>       (<span class="hljs-variable">.a</span>(a_3_1),<br>        <span class="hljs-variable">.b</span>(b_3_1),<br>        <span class="hljs-variable">.i</span>(i_0_1),<br>        <span class="hljs-variable">.y</span>(com_3_y));<br><span class="hljs-keyword">endmodule</span><br><br></code></pre></td></tr></table></figure><h4 id="Verilog-仿真-代码"><a href="#Verilog-仿真-代码" class="headerlink" title="Verilog 仿真 代码"></a>Verilog 仿真 代码</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs Verilog"><span class="hljs-comment">//Copyright 1986-2018 Xilinx, Inc. All Rights Reserved.</span><br><span class="hljs-comment">//--------------------------------------------------------------------------------</span><br><span class="hljs-comment">//Tool Version: Vivado v.2018.3 (win64) Build 2405991 Thu Dec  6 23:38:27 MST 2018</span><br><span class="hljs-comment">//Date        : Fri Jul  8 00:39:17 2022</span><br><span class="hljs-comment">//Host        : WIN-M6SVA3A7MOS running 64-bit major release  (build 9200)</span><br><span class="hljs-comment">//Command     : generate_target com_4b_wrapper.bd</span><br><span class="hljs-comment">//Design      : com_4b_wrapper</span><br><span class="hljs-comment">//Purpose     : IP block netlist</span><br><span class="hljs-comment">//--------------------------------------------------------------------------------</span><br><span class="hljs-meta">`<span class="hljs-keyword">timescale</span> 1 ps / 1 ps</span><br><br><span class="hljs-keyword">module</span> com_4b_wrapper;<br>  <span class="hljs-keyword">reg</span> a_0;<br>  <span class="hljs-keyword">reg</span> a_1;<br>  <span class="hljs-keyword">reg</span> a_2;<br>  <span class="hljs-keyword">reg</span> a_3;<br>  <span class="hljs-keyword">reg</span> b_0;<br>  <span class="hljs-keyword">reg</span> b_1;<br>  <span class="hljs-keyword">reg</span> b_2;<br>  <span class="hljs-keyword">reg</span> b_3;<br>  <span class="hljs-keyword">reg</span> [<span class="hljs-number">2</span>:<span class="hljs-number">0</span>]i_0;<br>  <span class="hljs-keyword">wire</span> [<span class="hljs-number">2</span>:<span class="hljs-number">0</span>]y_0;<br><br>  com_4b com_4b_i<br>       (<span class="hljs-variable">.a_0</span>(a_0),<br>        <span class="hljs-variable">.a_1</span>(a_1),<br>        <span class="hljs-variable">.a_2</span>(a_2),<br>        <span class="hljs-variable">.a_3</span>(a_3),<br>        <span class="hljs-variable">.b_0</span>(b_0),<br>        <span class="hljs-variable">.b_1</span>(b_1),<br>        <span class="hljs-variable">.b_2</span>(b_2),<br>        <span class="hljs-variable">.b_3</span>(b_3),<br>        <span class="hljs-variable">.i_0</span>(i_0),<br>        <span class="hljs-variable">.y_0</span>(y_0));<br>        <br>    <span class="hljs-keyword">initial</span><br>        <span class="hljs-keyword">begin</span><br>            # <span class="hljs-number">0</span> i_0 = <span class="hljs-number">3&#x27;b010</span>;<br>            # <span class="hljs-number">0</span> a_0 = <span class="hljs-number">1&#x27;b0</span>;<br>            # <span class="hljs-number">0</span> a_1 = <span class="hljs-number">1&#x27;b0</span>;<br>            # <span class="hljs-number">0</span> a_2 = <span class="hljs-number">1&#x27;b0</span>;<br>            # <span class="hljs-number">0</span> a_3 = <span class="hljs-number">1&#x27;b0</span>;<br>            # <span class="hljs-number">0</span> b_0 = <span class="hljs-number">1&#x27;b0</span>;<br>            # <span class="hljs-number">0</span> b_1 = <span class="hljs-number">1&#x27;b0</span>;<br>            # <span class="hljs-number">0</span> b_2 = <span class="hljs-number">1&#x27;b0</span>;<br>            # <span class="hljs-number">0</span> b_3 = <span class="hljs-number">1&#x27;b0</span>;<br>        <span class="hljs-keyword">end</span><br><br>    <span class="hljs-keyword">initial</span><br>        <span class="hljs-keyword">begin</span><br>            # <span class="hljs-number">10</span> a_3 = <span class="hljs-number">1&#x27;b1</span>;<br>            # <span class="hljs-number">10</span> a_3 = <span class="hljs-number">1&#x27;b0</span>;<br>        <span class="hljs-keyword">end</span>   <br>    <span class="hljs-keyword">initial</span><br>        <span class="hljs-keyword">begin</span><br>            # <span class="hljs-number">10</span> a_2 = <span class="hljs-number">1&#x27;b1</span>;<br>        <span class="hljs-keyword">end</span><br><br>    <span class="hljs-keyword">initial</span><br>        <span class="hljs-keyword">begin</span><br>            # <span class="hljs-number">10</span> b_2 = <span class="hljs-number">1&#x27;b1</span>;<br>            # <span class="hljs-number">10</span> b_3 = <span class="hljs-number">1&#x27;b1</span>;<br>        <span class="hljs-keyword">end</span>   <br>    <span class="hljs-keyword">initial</span><br>        <span class="hljs-keyword">begin</span><br>            # <span class="hljs-number">10</span> b_1 = <span class="hljs-number">1&#x27;b1</span>;<br>            # <span class="hljs-number">10</span> b_0 = <span class="hljs-number">1&#x27;b1</span>;<br>            # <span class="hljs-number">10</span> <span class="hljs-built_in">$stop</span>;<br>        <span class="hljs-keyword">end</span>  <br><span class="hljs-keyword">endmodule</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>硬件课程设计</category>
      
      <category>IP核调用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Verilog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Verilog-选择器-4选1数选器代码与仿真</title>
    <link href="/2022/07/07/Verilog-4%E9%80%891%E6%95%B0%E9%80%89%E5%99%A8%E4%BB%A3%E7%A0%81%E4%B8%8E%E4%BB%BF%E7%9C%9F/"/>
    <url>/2022/07/07/Verilog-4%E9%80%891%E6%95%B0%E9%80%89%E5%99%A8%E4%BB%A3%E7%A0%81%E4%B8%8E%E4%BB%BF%E7%9C%9F/</url>
    
    <content type="html"><![CDATA[<h3 id="4选1数选器"><a href="#4选1数选器" class="headerlink" title="4选1数选器"></a>4选1数选器</h3><h4 id="IP核组成线路"><a href="#IP核组成线路" class="headerlink" title="IP核组成线路"></a>IP核组成线路</h4><p>四组<a href="/2022/07/06/Verilog-2%E9%80%891%E6%95%B0%E9%80%89%E5%99%A8%E4%BB%A3%E7%A0%81%E4%B8%8E%E4%BB%BF%E7%9C%9F/" title="2选1数选器">2选1数选器</a></p><p><img src="https://api2.mubu.com/v3/document_image/41330163-4f07-4906-a4b1-5297ccc2b594-785422.jpg"></p><h4 id="Verilog-代码"><a href="#Verilog-代码" class="headerlink" title="Verilog 代码"></a>Verilog 代码</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs Verilog"><span class="hljs-comment">//Copyright 1986-2018 Xilinx, Inc. All Rights Reserved.</span><br><span class="hljs-comment">//--------------------------------------------------------------------------------</span><br><span class="hljs-comment">//Tool Version: Vivado v.2018.3 (win64) Build 2405991 Thu Dec  6 23:38:27 MST 2018</span><br><span class="hljs-comment">//Date        : Thu Jul  7 22:47:43 2022</span><br><span class="hljs-comment">//Host        : WIN-M6SVA3A7MOS running 64-bit major release  (build 9200)</span><br><span class="hljs-comment">//Command     : generate_target focone.bd</span><br><span class="hljs-comment">//Design      : focone</span><br><span class="hljs-comment">//Purpose     : IP block netlist</span><br><span class="hljs-comment">//--------------------------------------------------------------------------------</span><br><span class="hljs-meta">`<span class="hljs-keyword">timescale</span> 1 ps / 1 ps</span><br><br>(* CORE_GENERATION_INFO = <span class="hljs-string">&quot;focone,IP_Integrator,&#123;x_ipVendor=xilinx.com,x_ipLibrary=BlockDiagram,x_ipName=focone,x_ipVersion=1.00.a,x_ipLanguage=VERILOG,numBlks=3,numReposBlks=3,numNonXlnxBlks=0,numHierBlks=0,maxHierDepth=0,numSysgenBlks=0,numHlsBlks=0,numHdlrefBlks=0,numPkgbdBlks=0,bdsource=USER,synth_mode=OOC_per_IP&#125;&quot;</span> *) (* HW_HANDOFF = <span class="hljs-string">&quot;focone.hwdef&quot;</span> *) <br><span class="hljs-keyword">module</span> focone<br>   (in_1_0,<br>    in_1_1,<br>    in_2_0,<br>    in_2_1,<br>    out_0,<br>    sel_1,<br>    sel_2);<br>  <span class="hljs-keyword">input</span> in_1_0;<br>  <span class="hljs-keyword">input</span> in_1_1;<br>  <span class="hljs-keyword">input</span> in_2_0;<br>  <span class="hljs-keyword">input</span> in_2_1;<br>  <span class="hljs-keyword">output</span> out_0;<br>  <span class="hljs-keyword">input</span> sel_1;<br>  <span class="hljs-keyword">input</span> sel_2;<br><br>  <span class="hljs-keyword">wire</span> in_1_0_1;<br>  <span class="hljs-keyword">wire</span> in_1_1_1;<br>  <span class="hljs-keyword">wire</span> in_2_0_1;<br>  <span class="hljs-keyword">wire</span> in_2_1_1;<br>  <span class="hljs-keyword">wire</span> sel_1_1;<br>  <span class="hljs-keyword">wire</span> sel_2_1;<br>  <span class="hljs-keyword">wire</span> twochoose_0_out;<br>  <span class="hljs-keyword">wire</span> twochoose_1_out;<br>  <span class="hljs-keyword">wire</span> twochoose_2_out;<br><br>  <span class="hljs-keyword">assign</span> in_1_0_1 = in_1_0;<br>  <span class="hljs-keyword">assign</span> in_1_1_1 = in_1_1;<br>  <span class="hljs-keyword">assign</span> in_2_0_1 = in_2_0;<br>  <span class="hljs-keyword">assign</span> in_2_1_1 = in_2_1;<br>  <span class="hljs-keyword">assign</span> out_0 = twochoose_2_out;<br>  <span class="hljs-keyword">assign</span> sel_1_1 = sel_1;<br>  <span class="hljs-keyword">assign</span> sel_2_1 = sel_2;<br>  focone_twochoose_0_0 twochoose_0<br>       (<span class="hljs-variable">.in_1</span>(in_1_0_1),<br>        <span class="hljs-variable">.in_2</span>(in_2_0_1),<br>        <span class="hljs-variable">.out</span>(twochoose_0_out),<br>        <span class="hljs-variable">.sel</span>(sel_1_1));<br>  focone_twochoose_1_0 twochoose_1<br>       (<span class="hljs-variable">.in_1</span>(in_1_1_1),<br>        <span class="hljs-variable">.in_2</span>(in_2_1_1),<br>        <span class="hljs-variable">.out</span>(twochoose_1_out),<br>        <span class="hljs-variable">.sel</span>(sel_1_1));<br>  focone_twochoose_2_1 twochoose_2<br>       (<span class="hljs-variable">.in_1</span>(twochoose_0_out),<br>        <span class="hljs-variable">.in_2</span>(twochoose_1_out),<br>        <span class="hljs-variable">.out</span>(twochoose_2_out),<br>        <span class="hljs-variable">.sel</span>(sel_2_1));<br><span class="hljs-keyword">endmodule</span><br><br></code></pre></td></tr></table></figure><h4 id="Verilog-仿真-代码"><a href="#Verilog-仿真-代码" class="headerlink" title="Verilog 仿真 代码"></a>Verilog 仿真 代码</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs Verilog"><span class="hljs-comment">//Copyright 1986-2018 Xilinx, Inc. All Rights Reserved.</span><br><span class="hljs-comment">//--------------------------------------------------------------------------------</span><br><span class="hljs-comment">//Tool Version: Vivado v.2018.3 (win64) Build 2405991 Thu Dec  6 23:38:27 MST 2018</span><br><span class="hljs-comment">//Date        : Thu Jul  7 22:47:43 2022</span><br><span class="hljs-comment">//Host        : WIN-M6SVA3A7MOS running 64-bit major release  (build 9200)</span><br><span class="hljs-comment">//Command     : generate_target focone_wrapper.bd</span><br><span class="hljs-comment">//Design      : focone_wrapper</span><br><span class="hljs-comment">//Purpose     : IP block netlist</span><br><span class="hljs-comment">//--------------------------------------------------------------------------------</span><br><span class="hljs-meta">`<span class="hljs-keyword">timescale</span> 1 ps / 1 ps</span><br><br><span class="hljs-keyword">module</span> focone_wrapper;<br>  <span class="hljs-keyword">reg</span> in_1_0;<br>  <span class="hljs-keyword">reg</span> in_1_1;<br>  <span class="hljs-keyword">reg</span> in_2_0;<br>  <span class="hljs-keyword">reg</span> in_2_1;<br>  <span class="hljs-keyword">wire</span> out_0;<br>  <span class="hljs-keyword">reg</span> sel_1;<br>  <span class="hljs-keyword">reg</span> sel_2;<br><br>  focone tb<br>       (<span class="hljs-variable">.in_1_0</span>(in_1_0),<br>        <span class="hljs-variable">.in_1_1</span>(in_1_1),<br>        <span class="hljs-variable">.in_2_0</span>(in_2_0),<br>        <span class="hljs-variable">.in_2_1</span>(in_2_1),<br>        <span class="hljs-variable">.out_0</span>(out_0),<br>        <span class="hljs-variable">.sel_1</span>(sel_1),<br>        <span class="hljs-variable">.sel_2</span>(sel_2));<br>        <br>   <span class="hljs-keyword">initial</span><br>       <span class="hljs-keyword">begin</span><br>           # <span class="hljs-number">0</span> in_1_0 = <span class="hljs-number">0</span>;<br>           # <span class="hljs-number">0</span> in_1_1 = <span class="hljs-number">1</span>;<br>           # <span class="hljs-number">0</span> in_2_0 = <span class="hljs-number">0</span>;<br>           # <span class="hljs-number">0</span> in_2_1 = <span class="hljs-number">1</span>;<br>           # <span class="hljs-number">0</span> sel_1 = <span class="hljs-number">0</span>;<br>           # <span class="hljs-number">0</span> sel_2 = <span class="hljs-number">0</span>;<br>       <span class="hljs-keyword">end</span><br>   <br>   <span class="hljs-keyword">initial</span><br>       <span class="hljs-keyword">begin</span><br>           # <span class="hljs-number">20</span> in_2_0 = <span class="hljs-number">1</span>;<br>           # <span class="hljs-number">0</span>  in_2_1 = <span class="hljs-number">0</span>;<br>       <span class="hljs-keyword">end</span><br>       <br>   <span class="hljs-keyword">initial</span><br>       <span class="hljs-keyword">begin</span><br>           # <span class="hljs-number">20</span> sel_1 = <span class="hljs-number">1</span>;<br>           # <span class="hljs-number">20</span> <span class="hljs-built_in">$stop</span>;<br>       <span class="hljs-keyword">end</span><br>       <br>   <span class="hljs-keyword">initial</span><br>       <span class="hljs-keyword">begin</span><br>           # <span class="hljs-number">10</span> sel_2 = <span class="hljs-number">1</span>;<br>           # <span class="hljs-number">10</span> sel_2 = <span class="hljs-number">0</span>;<br>           # <span class="hljs-number">10</span> sel_2 = <span class="hljs-number">1</span>;<br>           # <span class="hljs-number">20</span> <span class="hljs-built_in">$stop</span>;<br>       <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>硬件课程设计</category>
      
      <category>IP核调用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Verilog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Verilog-全加器-4位全加器代码与仿真</title>
    <link href="/2022/07/07/Verilog-4%E4%BD%8D%E5%85%A8%E5%8A%A0%E5%99%A8%E4%BB%A3%E7%A0%81%E4%B8%8E%E4%BB%BF%E7%9C%9F/"/>
    <url>/2022/07/07/Verilog-4%E4%BD%8D%E5%85%A8%E5%8A%A0%E5%99%A8%E4%BB%A3%E7%A0%81%E4%B8%8E%E4%BB%BF%E7%9C%9F/</url>
    
    <content type="html"><![CDATA[<h3 id="4位全加器"><a href="#4位全加器" class="headerlink" title="4位全加器"></a>4位全加器</h3><h4 id="IP核组成线路"><a href="#IP核组成线路" class="headerlink" title="IP核组成线路"></a>IP核组成线路</h4><p>四组<a href="/2022/07/06/Verilog-1%E4%BD%8D%E5%85%A8%E5%8A%A0%E5%99%A8%E4%BB%A3%E7%A0%81%E4%B8%8E%E4%BB%BF%E7%9C%9F/" title="1位全加器">1位全加器</a></p><p><img src="https://api2.mubu.com/v3/document_image/88187b61-f6ed-4b28-b206-684b79ec49f1-785422.jpg"></p><h4 id="Verilog-代码"><a href="#Verilog-代码" class="headerlink" title="Verilog 代码"></a>Verilog 代码</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs Verilog"><span class="hljs-comment">//Copyright 1986-2018 Xilinx, Inc. All Rights Reserved.</span><br><span class="hljs-comment">//--------------------------------------------------------------------------------</span><br><span class="hljs-comment">//Tool Version: Vivado v.2018.3 (win64) Build 2405991 Thu Dec  6 23:38:27 MST 2018</span><br><span class="hljs-comment">//Date        : Thu Jul  7 21:58:45 2022</span><br><span class="hljs-comment">//Host        : WIN-M6SVA3A7MOS running 64-bit major release  (build 9200)</span><br><span class="hljs-comment">//Command     : generate_target qjq_4b.bd</span><br><span class="hljs-comment">//Design      : qjq_4b</span><br><span class="hljs-comment">//Purpose     : IP block netlist</span><br><span class="hljs-comment">//--------------------------------------------------------------------------------</span><br><span class="hljs-meta">`<span class="hljs-keyword">timescale</span> 1 ps / 1 ps</span><br><br>(* CORE_GENERATION_INFO = <span class="hljs-string">&quot;qjq_4b,IP_Integrator,&#123;x_ipVendor=xilinx.com,x_ipLibrary=BlockDiagram,x_ipName=qjq_4b,x_ipVersion=1.00.a,x_ipLanguage=VERILOG,numBlks=4,numReposBlks=4,numNonXlnxBlks=0,numHierBlks=0,maxHierDepth=0,numSysgenBlks=0,numHlsBlks=0,numHdlrefBlks=0,numPkgbdBlks=0,bdsource=USER,synth_mode=OOC_per_IP&#125;&quot;</span> *) (* HW_HANDOFF = <span class="hljs-string">&quot;qjq_4b.hwdef&quot;</span> *) <br><span class="hljs-keyword">module</span> qjq_4b<br>   (cin_0,<br>    cout_0,<br>    ia_0,<br>    ia_1,<br>    ia_2,<br>    ia_3,<br>    ib_0,<br>    ib_1,<br>    ib_2,<br>    ib_3,<br>    sum_0,<br>    sum_1,<br>    sum_2,<br>    sum_3);<br>  <span class="hljs-keyword">input</span> cin_0;<br>  <span class="hljs-keyword">output</span> cout_0;<br>  <span class="hljs-keyword">input</span> ia_0;<br>  <span class="hljs-keyword">input</span> ia_1;<br>  <span class="hljs-keyword">input</span> ia_2;<br>  <span class="hljs-keyword">input</span> ia_3;<br>  <span class="hljs-keyword">input</span> ib_0;<br>  <span class="hljs-keyword">input</span> ib_1;<br>  <span class="hljs-keyword">input</span> ib_2;<br>  <span class="hljs-keyword">input</span> ib_3;<br>  <span class="hljs-keyword">output</span> sum_0;<br>  <span class="hljs-keyword">output</span> sum_1;<br>  <span class="hljs-keyword">output</span> sum_2;<br>  <span class="hljs-keyword">output</span> sum_3;<br><br>  <span class="hljs-keyword">wire</span> cin_0_1;<br>  <span class="hljs-keyword">wire</span> fa1_0_cout;<br>  <span class="hljs-keyword">wire</span> fa1_0_sum;<br>  <span class="hljs-keyword">wire</span> fa1_1_cout;<br>  <span class="hljs-keyword">wire</span> fa1_1_sum;<br>  <span class="hljs-keyword">wire</span> fa1_2_cout;<br>  <span class="hljs-keyword">wire</span> fa1_2_sum;<br>  <span class="hljs-keyword">wire</span> fa1_3_cout;<br>  <span class="hljs-keyword">wire</span> fa1_3_sum;<br>  <span class="hljs-keyword">wire</span> ia_0_1;<br>  <span class="hljs-keyword">wire</span> ia_1_1;<br>  <span class="hljs-keyword">wire</span> ia_2_1;<br>  <span class="hljs-keyword">wire</span> ia_3_1;<br>  <span class="hljs-keyword">wire</span> ib_0_1;<br>  <span class="hljs-keyword">wire</span> ib_1_1;<br>  <span class="hljs-keyword">wire</span> ib_2_1;<br>  <span class="hljs-keyword">wire</span> ib_3_1;<br><br>  <span class="hljs-keyword">assign</span> cin_0_1 = cin_0;<br>  <span class="hljs-keyword">assign</span> cout_0 = fa1_3_cout;<br>  <span class="hljs-keyword">assign</span> ia_0_1 = ia_0;<br>  <span class="hljs-keyword">assign</span> ia_1_1 = ia_1;<br>  <span class="hljs-keyword">assign</span> ia_2_1 = ia_2;<br>  <span class="hljs-keyword">assign</span> ia_3_1 = ia_3;<br>  <span class="hljs-keyword">assign</span> ib_0_1 = ib_0;<br>  <span class="hljs-keyword">assign</span> ib_1_1 = ib_1;<br>  <span class="hljs-keyword">assign</span> ib_2_1 = ib_2;<br>  <span class="hljs-keyword">assign</span> ib_3_1 = ib_3;<br>  <span class="hljs-keyword">assign</span> sum_0 = fa1_0_sum;<br>  <span class="hljs-keyword">assign</span> sum_1 = fa1_1_sum;<br>  <span class="hljs-keyword">assign</span> sum_2 = fa1_2_sum;<br>  <span class="hljs-keyword">assign</span> sum_3 = fa1_3_sum;<br>  qjq_4b_fa1_0_0 fa1_0<br>       (<span class="hljs-variable">.cin</span>(cin_0_1),<br>        <span class="hljs-variable">.cout</span>(fa1_0_cout),<br>        <span class="hljs-variable">.ia</span>(ia_0_1),<br>        <span class="hljs-variable">.ib</span>(ib_0_1),<br>        <span class="hljs-variable">.sum</span>(fa1_0_sum));<br>  qjq_4b_fa1_1_0 fa1_1<br>       (<span class="hljs-variable">.cin</span>(fa1_0_cout),<br>        <span class="hljs-variable">.cout</span>(fa1_1_cout),<br>        <span class="hljs-variable">.ia</span>(ia_1_1),<br>        <span class="hljs-variable">.ib</span>(ib_1_1),<br>        <span class="hljs-variable">.sum</span>(fa1_1_sum));<br>  qjq_4b_fa1_2_0 fa1_2<br>       (<span class="hljs-variable">.cin</span>(fa1_1_cout),<br>        <span class="hljs-variable">.cout</span>(fa1_2_cout),<br>        <span class="hljs-variable">.ia</span>(ia_2_1),<br>        <span class="hljs-variable">.ib</span>(ib_2_1),<br>        <span class="hljs-variable">.sum</span>(fa1_2_sum));<br>  qjq_4b_fa1_3_0 fa1_3<br>       (<span class="hljs-variable">.cin</span>(fa1_2_cout),<br>        <span class="hljs-variable">.cout</span>(fa1_3_cout),<br>        <span class="hljs-variable">.ia</span>(ia_3_1),<br>        <span class="hljs-variable">.ib</span>(ib_3_1),<br>        <span class="hljs-variable">.sum</span>(fa1_3_sum));<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h4 id="Verilog-仿真-代码"><a href="#Verilog-仿真-代码" class="headerlink" title="Verilog 仿真 代码"></a>Verilog 仿真 代码</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs Verilog"><span class="hljs-comment">//Copyright 1986-2018 Xilinx, Inc. All Rights Reserved.</span><br><span class="hljs-comment">//--------------------------------------------------------------------------------</span><br><span class="hljs-comment">//Tool Version: Vivado v.2018.3 (win64) Build 2405991 Thu Dec  6 23:38:27 MST 2018</span><br><span class="hljs-comment">//Date        : Thu Jul  7 21:10:39 2022</span><br><span class="hljs-comment">//Host        : WIN-M6SVA3A7MOS running 64-bit major release  (build 9200)</span><br><span class="hljs-comment">//Command     : generate_target qjq_4b_wrapper.bd</span><br><span class="hljs-comment">//Design      : qjq_4b_wrapper</span><br><span class="hljs-comment">//Purpose     : IP block netlist</span><br><span class="hljs-comment">//--------------------------------------------------------------------------------</span><br><span class="hljs-meta">`<span class="hljs-keyword">timescale</span> 1 ps / 1 ps</span><br><br><span class="hljs-keyword">module</span> qjq_4b_wrapper;<br>  <span class="hljs-keyword">reg</span> cin_0;<br>  <span class="hljs-keyword">wire</span> cout_0;<br>  <span class="hljs-keyword">reg</span> ia_0;<br>  <span class="hljs-keyword">reg</span> ia_1;<br>  <span class="hljs-keyword">reg</span> ia_2;<br>  <span class="hljs-keyword">reg</span> ia_3;<br>  <span class="hljs-keyword">reg</span> ib_0;<br>  <span class="hljs-keyword">reg</span> ib_1;<br>  <span class="hljs-keyword">reg</span> ib_2;<br>  <span class="hljs-keyword">reg</span> ib_3;<br>  <span class="hljs-keyword">wire</span> sum_0;<br>  <span class="hljs-keyword">wire</span> sum_1;<br>  <span class="hljs-keyword">wire</span> sum_2;<br>  <span class="hljs-keyword">wire</span> sum_3;<br><br>  qjq_4b tb<br>       (<span class="hljs-variable">.cin_0</span>(cin_0),<br>        <span class="hljs-variable">.cout_0</span>(cout_0),<br>        <span class="hljs-variable">.ia_0</span>(ia_0),<br>        <span class="hljs-variable">.ia_1</span>(ia_1),<br>        <span class="hljs-variable">.ia_2</span>(ia_2),<br>        <span class="hljs-variable">.ia_3</span>(ia_3),<br>        <span class="hljs-variable">.ib_0</span>(ib_0),<br>        <span class="hljs-variable">.ib_1</span>(ib_1),<br>        <span class="hljs-variable">.ib_2</span>(ib_2),<br>        <span class="hljs-variable">.ib_3</span>(ib_3),<br>        <span class="hljs-variable">.sum_0</span>(sum_0),<br>        <span class="hljs-variable">.sum_1</span>(sum_1),<br>        <span class="hljs-variable">.sum_2</span>(sum_2),<br>        <span class="hljs-variable">.sum_3</span>(sum_3));<br>        <br>   <span class="hljs-keyword">initial</span><br>        <span class="hljs-keyword">begin</span><br>           #<span class="hljs-number">0</span> ia_0 &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>           #<span class="hljs-number">0</span> ia_1 &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>           #<span class="hljs-number">0</span> ia_2 &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>           #<span class="hljs-number">0</span> ia_3 &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>           #<span class="hljs-number">0</span> ib_0 &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>           #<span class="hljs-number">0</span> ib_1 &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>           #<span class="hljs-number">0</span> ib_2 &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>           #<span class="hljs-number">0</span> ib_3 &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>           #<span class="hljs-number">0</span> cin_0 &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>        <span class="hljs-keyword">end</span><br>    <br>    <span class="hljs-keyword">always</span> <span class="hljs-keyword">begin</span> # <span class="hljs-number">10</span> ia_0 = ~ia_0; <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">always</span> <span class="hljs-keyword">begin</span> # <span class="hljs-number">20</span> ia_1 = ~ia_1; <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">always</span> <span class="hljs-keyword">begin</span> # <span class="hljs-number">40</span> ia_2 = ~ia_2; <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">always</span> <span class="hljs-keyword">begin</span> # <span class="hljs-number">80</span> ia_3 = ~ia_3; <span class="hljs-keyword">end</span><br>   <br>    <span class="hljs-keyword">always</span> <span class="hljs-keyword">begin</span> # <span class="hljs-number">10</span> ib_0 = ~ib_0; <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">always</span> <span class="hljs-keyword">begin</span> # <span class="hljs-number">20</span> ib_1 = ~ib_1; <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">always</span> <span class="hljs-keyword">begin</span> # <span class="hljs-number">40</span> ib_2 = ~ib_2; <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">always</span> <span class="hljs-keyword">begin</span> # <span class="hljs-number">80</span> ib_3 = ~ib_3; <span class="hljs-keyword">end</span>  <br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>硬件课程设计</category>
      
      <category>IP核调用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Verilog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Verilog-加法器-4位十进制加法器代码与仿真</title>
    <link href="/2022/07/07/Verilog-4%E4%BD%8D%E5%8D%81%E8%BF%9B%E5%88%B6%E5%8A%A0%E6%B3%95%E5%99%A8%E4%BB%A3%E7%A0%81%E4%B8%8E%E4%BB%BF%E7%9C%9F/"/>
    <url>/2022/07/07/Verilog-4%E4%BD%8D%E5%8D%81%E8%BF%9B%E5%88%B6%E5%8A%A0%E6%B3%95%E5%99%A8%E4%BB%A3%E7%A0%81%E4%B8%8E%E4%BB%BF%E7%9C%9F/</url>
    
    <content type="html"><![CDATA[<h3 id="4位十进制加法器"><a href="#4位十进制加法器" class="headerlink" title="4位十进制加法器"></a>4位十进制加法器</h3><h4 id="IP核组成线路"><a href="#IP核组成线路" class="headerlink" title="IP核组成线路"></a>IP核组成线路</h4><p>四组<a href="/2022/07/07/Verilog-1%E4%BD%8D%E5%8D%81%E8%BF%9B%E5%88%B6%E5%8A%A0%E6%B3%95%E5%99%A8%E4%BB%A3%E7%A0%81%E4%B8%8E%E4%BB%BF%E7%9C%9F/" title="1位十进制加法器">1位十进制加法器</a></p><p><img src="https://api2.mubu.com/v3/document_image/ee4deeaf-d063-4a08-9223-f2ba7354112c-785422.jpg"></p><h4 id="Verilog-代码"><a href="#Verilog-代码" class="headerlink" title="Verilog 代码"></a>Verilog 代码</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs Verilog"><span class="hljs-comment">//Copyright 1986-2018 Xilinx, Inc. All Rights Reserved.</span><br><span class="hljs-comment">//--------------------------------------------------------------------------------</span><br><span class="hljs-comment">//Tool Version: Vivado v.2018.3 (win64) Build 2405991 Thu Dec  6 23:38:27 MST 2018</span><br><span class="hljs-comment">//Date        : Thu Jul  7 20:46:23 2022</span><br><span class="hljs-comment">//Host        : WIN-M6SVA3A7MOS running 64-bit major release  (build 9200)</span><br><span class="hljs-comment">//Command     : generate_target add_4d.bd</span><br><span class="hljs-comment">//Design      : add_4d</span><br><span class="hljs-comment">//Purpose     : IP block netlist</span><br><span class="hljs-comment">//--------------------------------------------------------------------------------</span><br><span class="hljs-meta">`<span class="hljs-keyword">timescale</span> 1 ps / 1 ps</span><br><br>(* CORE_GENERATION_INFO = <span class="hljs-string">&quot;add_4d,IP_Integrator,&#123;x_ipVendor=xilinx.com,x_ipLibrary=BlockDiagram,x_ipName=add_4d,x_ipVersion=1.00.a,x_ipLanguage=VERILOG,numBlks=4,numReposBlks=4,numNonXlnxBlks=0,numHierBlks=0,maxHierDepth=0,numSysgenBlks=0,numHlsBlks=0,numHdlrefBlks=0,numPkgbdBlks=0,bdsource=USER,synth_mode=OOC_per_IP&#125;&quot;</span> *) (* HW_HANDOFF = <span class="hljs-string">&quot;add_4d.hwdef&quot;</span> *) <br><span class="hljs-keyword">module</span> add_4d<br>   (A_0,<br>    A_1,<br>    A_2,<br>    A_3,<br>    B_0,<br>    B_1,<br>    B_2,<br>    B_3,<br>    SUM_0,<br>    SUM_1,<br>    SUM_2,<br>    SUM_3,<br>    cin_0,<br>    cout_0);<br>  <span class="hljs-keyword">input</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>]A_0;<br>  <span class="hljs-keyword">input</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>]A_1;<br>  <span class="hljs-keyword">input</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>]A_2;<br>  <span class="hljs-keyword">input</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>]A_3;<br>  <span class="hljs-keyword">input</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>]B_0;<br>  <span class="hljs-keyword">input</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>]B_1;<br>  <span class="hljs-keyword">input</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>]B_2;<br>  <span class="hljs-keyword">input</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>]B_3;<br>  <span class="hljs-keyword">output</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>]SUM_0;<br>  <span class="hljs-keyword">output</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>]SUM_1;<br>  <span class="hljs-keyword">output</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>]SUM_2;<br>  <span class="hljs-keyword">output</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>]SUM_3;<br>  <span class="hljs-keyword">input</span> cin_0;<br>  <span class="hljs-keyword">output</span> cout_0;<br><br>  <span class="hljs-keyword">wire</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>]A_0_1;<br>  <span class="hljs-keyword">wire</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>]A_1_1;<br>  <span class="hljs-keyword">wire</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>]A_2_1;<br>  <span class="hljs-keyword">wire</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>]A_3_1;<br>  <span class="hljs-keyword">wire</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>]B_0_1;<br>  <span class="hljs-keyword">wire</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>]B_1_1;<br>  <span class="hljs-keyword">wire</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>]B_2_1;<br>  <span class="hljs-keyword">wire</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>]B_3_1;<br>  <span class="hljs-keyword">wire</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>]add10_0_SUM;<br>  <span class="hljs-keyword">wire</span> add10_0_cout;<br>  <span class="hljs-keyword">wire</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>]add10_1_SUM;<br>  <span class="hljs-keyword">wire</span> add10_1_cout;<br>  <span class="hljs-keyword">wire</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>]add10_2_SUM;<br>  <span class="hljs-keyword">wire</span> add10_2_cout;<br>  <span class="hljs-keyword">wire</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>]add10_3_SUM;<br>  <span class="hljs-keyword">wire</span> add10_3_cout;<br>  <span class="hljs-keyword">wire</span> cin_0_1;<br><br>  <span class="hljs-keyword">assign</span> A_0_1 = A_0[<span class="hljs-number">3</span>:<span class="hljs-number">0</span>];<br>  <span class="hljs-keyword">assign</span> A_1_1 = A_1[<span class="hljs-number">3</span>:<span class="hljs-number">0</span>];<br>  <span class="hljs-keyword">assign</span> A_2_1 = A_2[<span class="hljs-number">3</span>:<span class="hljs-number">0</span>];<br>  <span class="hljs-keyword">assign</span> A_3_1 = A_3[<span class="hljs-number">3</span>:<span class="hljs-number">0</span>];<br>  <span class="hljs-keyword">assign</span> B_0_1 = B_0[<span class="hljs-number">3</span>:<span class="hljs-number">0</span>];<br>  <span class="hljs-keyword">assign</span> B_1_1 = B_1[<span class="hljs-number">3</span>:<span class="hljs-number">0</span>];<br>  <span class="hljs-keyword">assign</span> B_2_1 = B_2[<span class="hljs-number">3</span>:<span class="hljs-number">0</span>];<br>  <span class="hljs-keyword">assign</span> B_3_1 = B_3[<span class="hljs-number">3</span>:<span class="hljs-number">0</span>];<br>  <span class="hljs-keyword">assign</span> SUM_0[<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] = add10_2_SUM;<br>  <span class="hljs-keyword">assign</span> SUM_1[<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] = add10_3_SUM;<br>  <span class="hljs-keyword">assign</span> SUM_2[<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] = add10_0_SUM;<br>  <span class="hljs-keyword">assign</span> SUM_3[<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] = add10_1_SUM;<br>  <span class="hljs-keyword">assign</span> cin_0_1 = cin_0;<br>  <span class="hljs-keyword">assign</span> cout_0 = add10_3_cout;<br>  add_4d_add10_0_0 add10_0<br>       (<span class="hljs-variable">.A</span>(A_0_1),<br>        <span class="hljs-variable">.B</span>(B_0_1),<br>        <span class="hljs-variable">.SUM</span>(add10_0_SUM),<br>        <span class="hljs-variable">.cin</span>(cin_0_1),<br>        <span class="hljs-variable">.cout</span>(add10_0_cout));<br>  add_4d_add10_1_0 add10_1<br>       (<span class="hljs-variable">.A</span>(A_1_1),<br>        <span class="hljs-variable">.B</span>(B_1_1),<br>        <span class="hljs-variable">.SUM</span>(add10_1_SUM),<br>        <span class="hljs-variable">.cin</span>(add10_0_cout),<br>        <span class="hljs-variable">.cout</span>(add10_1_cout));<br>  add_4d_add10_2_0 add10_2<br>       (<span class="hljs-variable">.A</span>(A_2_1),<br>        <span class="hljs-variable">.B</span>(B_2_1),<br>        <span class="hljs-variable">.SUM</span>(add10_2_SUM),<br>        <span class="hljs-variable">.cin</span>(add10_1_cout),<br>        <span class="hljs-variable">.cout</span>(add10_2_cout));<br>  add_4d_add10_3_0 add10_3<br>       (<span class="hljs-variable">.A</span>(A_3_1),<br>        <span class="hljs-variable">.B</span>(B_3_1),<br>        <span class="hljs-variable">.SUM</span>(add10_3_SUM),<br>        <span class="hljs-variable">.cin</span>(add10_2_cout),<br>        <span class="hljs-variable">.cout</span>(add10_3_cout));<br><span class="hljs-keyword">endmodule</span><br><br></code></pre></td></tr></table></figure><h4 id="Verilog-仿真-代码"><a href="#Verilog-仿真-代码" class="headerlink" title="Verilog 仿真 代码"></a>Verilog 仿真 代码</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs Verilog"><span class="hljs-comment">//Copyright 1986-2018 Xilinx, Inc. All Rights Reserved.</span><br><span class="hljs-comment">//--------------------------------------------------------------------------------</span><br><span class="hljs-comment">//Tool Version: Vivado v.2018.3 (win64) Build 2405991 Thu Dec  6 23:38:27 MST 2018</span><br><span class="hljs-comment">//Date        : Thu Jul  7 20:36:16 2022</span><br><span class="hljs-comment">//Host        : WIN-M6SVA3A7MOS running 64-bit major release  (build 9200)</span><br><span class="hljs-comment">//Command     : generate_target add_4d_wrapper.bd</span><br><span class="hljs-comment">//Design      : add_4d_wrapper</span><br><span class="hljs-comment">//Purpose     : IP block netlist</span><br><span class="hljs-comment">//--------------------------------------------------------------------------------</span><br><span class="hljs-meta">`<span class="hljs-keyword">timescale</span> 1 ps / 1 ps</span><br><br><span class="hljs-keyword">module</span> add_4d_wrapper;<br>  <span class="hljs-keyword">reg</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>]A_0;<br>  <span class="hljs-keyword">reg</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>]A_1;<br>  <span class="hljs-keyword">reg</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>]A_2;<br>  <span class="hljs-keyword">reg</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>]A_3;<br>  <span class="hljs-keyword">reg</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>]B_0;<br>  <span class="hljs-keyword">reg</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>]B_1;<br>  <span class="hljs-keyword">reg</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>]B_2;<br>  <span class="hljs-keyword">reg</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>]B_3;<br>  <span class="hljs-keyword">wire</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>]SUM_0;<br>  <span class="hljs-keyword">wire</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>]SUM_1;<br>  <span class="hljs-keyword">wire</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>]SUM_2;<br>  <span class="hljs-keyword">wire</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>]SUM_3;<br>  <span class="hljs-keyword">reg</span> cin_0;<br>  <span class="hljs-keyword">wire</span> cout_0;<br><br>  add_4d tb<br>       (<span class="hljs-variable">.A_0</span>(A_0),<br>        <span class="hljs-variable">.A_1</span>(A_1),<br>        <span class="hljs-variable">.A_2</span>(A_2),<br>        <span class="hljs-variable">.A_3</span>(A_3),<br>        <span class="hljs-variable">.B_0</span>(B_0),<br>        <span class="hljs-variable">.B_1</span>(B_1),<br>        <span class="hljs-variable">.B_2</span>(B_2),<br>        <span class="hljs-variable">.B_3</span>(B_3),<br>        <span class="hljs-variable">.SUM_0</span>(SUM_0),<br>        <span class="hljs-variable">.SUM_1</span>(SUM_1),<br>        <span class="hljs-variable">.SUM_2</span>(SUM_2),<br>        <span class="hljs-variable">.SUM_3</span>(SUM_3),<br>        <span class="hljs-variable">.cin_0</span>(cin_0),<br>        <span class="hljs-variable">.cout_0</span>(cout_0));<br>        <br>   <span class="hljs-keyword">initial</span><br>        <span class="hljs-keyword">begin</span><br>            A_0 &lt;= <span class="hljs-number">4&#x27;d0</span>;<br>            A_1 &lt;= <span class="hljs-number">4&#x27;d0</span>;<br>            A_2 &lt;= <span class="hljs-number">4&#x27;d0</span>;<br>            A_3 &lt;= <span class="hljs-number">4&#x27;d0</span>;<br>            B_0 &lt;= <span class="hljs-number">4&#x27;d0</span>;<br>            B_1 &lt;= <span class="hljs-number">4&#x27;d0</span>;<br>            B_2 &lt;= <span class="hljs-number">4&#x27;d0</span>;<br>            B_3 &lt;= <span class="hljs-number">4&#x27;d0</span>;<br>            cin_0 &lt;= <span class="hljs-number">4&#x27;d0</span>;<br>        <span class="hljs-keyword">end</span><br><br>   <span class="hljs-keyword">initial</span><br>        <span class="hljs-keyword">begin</span><br>            # <span class="hljs-number">10</span> A_0 &lt;= <span class="hljs-number">4&#x27;d6</span>;<br>            # <span class="hljs-number">10</span> A_1 &lt;= <span class="hljs-number">4&#x27;d3</span>;<br>            # <span class="hljs-number">10</span> A_2 &lt;= <span class="hljs-number">4&#x27;d2</span>;<br>            # <span class="hljs-number">10</span> A_3 &lt;= <span class="hljs-number">4&#x27;d1</span>;<br>        <span class="hljs-keyword">end</span><br><br>   <span class="hljs-keyword">initial</span><br>        <span class="hljs-keyword">begin</span><br>            # <span class="hljs-number">10</span> B_0 &lt;= <span class="hljs-number">4&#x27;d4</span>;<br>            # <span class="hljs-number">10</span> B_1 &lt;= <span class="hljs-number">4&#x27;d6</span>;<br>            # <span class="hljs-number">10</span> B_2 &lt;= <span class="hljs-number">4&#x27;d2</span>;<br>            # <span class="hljs-number">10</span> B_3 &lt;= <span class="hljs-number">4&#x27;d4</span>;<br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-comment">// 1436 + 4264</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>硬件课程设计</category>
      
      <category>IP核调用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Verilog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Verilog-加法器-1位二进制加法器代码与仿真</title>
    <link href="/2022/07/07/Verilog-1%E4%BD%8D%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%8A%A0%E6%B3%95%E5%99%A8%E4%BB%A3%E7%A0%81%E4%B8%8E%E4%BB%BF%E7%9C%9F/"/>
    <url>/2022/07/07/Verilog-1%E4%BD%8D%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%8A%A0%E6%B3%95%E5%99%A8%E4%BB%A3%E7%A0%81%E4%B8%8E%E4%BB%BF%E7%9C%9F/</url>
    
    <content type="html"><![CDATA[<h3 id="1位二进制加法器"><a href="#1位二进制加法器" class="headerlink" title="1位二进制加法器"></a>1位二进制加法器</h3><h4 id="Verilog-代码"><a href="#Verilog-代码" class="headerlink" title="Verilog 代码"></a>Verilog 代码</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Verilog"><span class="hljs-keyword">module</span> add4(<br>    <span class="hljs-keyword">input</span> ia,<br>    <span class="hljs-keyword">input</span> ib,<br>    <span class="hljs-keyword">input</span> cin,<br>    <span class="hljs-keyword">output</span> sum,<br>    <span class="hljs-keyword">output</span> cout<br>    );<br>    <br>    <span class="hljs-keyword">assign</span> &#123;cout,sum&#125; = ia + ib + cin;<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h4 id="Verilog-仿真-代码"><a href="#Verilog-仿真-代码" class="headerlink" title="Verilog 仿真 代码"></a>Verilog 仿真 代码</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs Verilog"><span class="hljs-meta">`<span class="hljs-keyword">timescale</span> 1ns / 1ps</span><br><br><span class="hljs-keyword">module</span> add4_tb;<br>    <span class="hljs-keyword">reg</span> cin;<br>    <span class="hljs-keyword">reg</span>  a;<br>    <span class="hljs-keyword">reg</span>  b;<br>    <span class="hljs-keyword">wire</span> cout;<br>    <span class="hljs-keyword">wire</span> sum;<br>    <br>    add4 tb(<br>        <span class="hljs-variable">.ia</span>(a),<br>        <span class="hljs-variable">.ib</span>(b),<br>        <span class="hljs-variable">.cin</span>(cin),<br>        <span class="hljs-variable">.sum</span>(sum),<br>        <span class="hljs-variable">.cout</span>(cout)<br>    );<br>    <br>    <span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span><br>    <br>        #<span class="hljs-number">0</span> a = <span class="hljs-number">1&#x27;b0</span>;<br>        #<span class="hljs-number">10</span> a = <span class="hljs-number">1&#x27;b0</span>;<br>        #<span class="hljs-number">10</span> a = <span class="hljs-number">1&#x27;b1</span>;<br>        #<span class="hljs-number">10</span> a = <span class="hljs-number">1&#x27;b1</span>;<br>        #<span class="hljs-number">10</span> a = <span class="hljs-number">1&#x27;b0</span>;<br>        #<span class="hljs-number">10</span> a = <span class="hljs-number">1&#x27;b0</span>;<br>        #<span class="hljs-number">10</span> a = <span class="hljs-number">1&#x27;b1</span>;<br>        #<span class="hljs-number">10</span> a = <span class="hljs-number">1&#x27;b1</span>;<br>        #<span class="hljs-number">10</span> <span class="hljs-built_in">$stop</span>;<br>        <br>        <span class="hljs-keyword">end</span><br>        <br>    <span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span><br>        #<span class="hljs-number">0</span> b = <span class="hljs-number">1&#x27;b0</span>;<br>        #<span class="hljs-number">10</span> b = <span class="hljs-number">1&#x27;b1</span>;<br>        #<span class="hljs-number">10</span> b = <span class="hljs-number">1&#x27;b0</span>;<br>        #<span class="hljs-number">10</span> b = <span class="hljs-number">1&#x27;b1</span>;<br>        #<span class="hljs-number">10</span> b = <span class="hljs-number">1&#x27;b0</span>;<br>        #<span class="hljs-number">10</span> b = <span class="hljs-number">1&#x27;b1</span>;<br>        #<span class="hljs-number">10</span> b = <span class="hljs-number">1&#x27;b0</span>;<br>        #<span class="hljs-number">10</span> b = <span class="hljs-number">1&#x27;b1</span>;<br>        #<span class="hljs-number">10</span> <span class="hljs-built_in">$stop</span>;<br>     <br>        <span class="hljs-keyword">end</span><br>        <br>    <span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span>   <br>        #<span class="hljs-number">0</span> cin = <span class="hljs-number">0</span>;<br>        #<span class="hljs-number">40</span> cin = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>硬件课程设计</category>
      
      <category>基本组合电路</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Verilog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Verilog-译码器-二-十进制译码器代码与仿真</title>
    <link href="/2022/07/07/Verilog-%E4%BA%8C-%E5%8D%81%E8%BF%9B%E5%88%B6%E8%AF%91%E7%A0%81%E5%99%A8%E4%BB%A3%E7%A0%81%E4%B8%8E%E4%BB%BF%E7%9C%9F/"/>
    <url>/2022/07/07/Verilog-%E4%BA%8C-%E5%8D%81%E8%BF%9B%E5%88%B6%E8%AF%91%E7%A0%81%E5%99%A8%E4%BB%A3%E7%A0%81%E4%B8%8E%E4%BB%BF%E7%9C%9F/</url>
    
    <content type="html"><![CDATA[<h3 id="二进制译码器"><a href="#二进制译码器" class="headerlink" title="二进制译码器"></a>二进制译码器</h3><h4 id="Verilog-代码"><a href="#Verilog-代码" class="headerlink" title="Verilog 代码"></a>Verilog 代码</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Verilog"><span class="hljs-keyword">module</span> ttot (<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] a,<br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">9</span>:<span class="hljs-number">0</span>] y<br>    );<br><br>    <span class="hljs-keyword">assign</span> y[<span class="hljs-number">0</span>] = ~a[<span class="hljs-number">3</span>] &amp; ~a[<span class="hljs-number">2</span>] &amp; ~a[<span class="hljs-number">1</span>] &amp; ~a[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">assign</span> y[<span class="hljs-number">1</span>] = ~a[<span class="hljs-number">3</span>] &amp; ~a[<span class="hljs-number">2</span>] &amp; ~a[<span class="hljs-number">1</span>] &amp; a[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">assign</span> y[<span class="hljs-number">2</span>] = ~a[<span class="hljs-number">3</span>] &amp; ~a[<span class="hljs-number">2</span>] &amp; a[<span class="hljs-number">1</span>] &amp; ~a[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">assign</span> y[<span class="hljs-number">3</span>] = ~a[<span class="hljs-number">3</span>] &amp; ~a[<span class="hljs-number">2</span>] &amp; a[<span class="hljs-number">1</span>] &amp; a[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">assign</span> y[<span class="hljs-number">4</span>] = ~a[<span class="hljs-number">3</span>] &amp; a[<span class="hljs-number">2</span>] &amp; ~a[<span class="hljs-number">1</span>] &amp; ~a[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">assign</span> y[<span class="hljs-number">5</span>] = ~a[<span class="hljs-number">3</span>] &amp; a[<span class="hljs-number">2</span>] &amp; ~a[<span class="hljs-number">1</span>] &amp; a[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">assign</span> y[<span class="hljs-number">6</span>] = ~a[<span class="hljs-number">3</span>] &amp; a[<span class="hljs-number">2</span>] &amp; a[<span class="hljs-number">1</span>] &amp; ~a[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">assign</span> y[<span class="hljs-number">7</span>] = ~a[<span class="hljs-number">3</span>] &amp; a[<span class="hljs-number">2</span>] &amp; a[<span class="hljs-number">1</span>] &amp; a[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">assign</span> y[<span class="hljs-number">8</span>] = a[<span class="hljs-number">3</span>] &amp; ~a[<span class="hljs-number">2</span>] &amp; ~a[<span class="hljs-number">1</span>] &amp; ~a[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">assign</span> y[<span class="hljs-number">9</span>] = a[<span class="hljs-number">3</span>] &amp; ~a[<span class="hljs-number">2</span>] &amp; ~a[<span class="hljs-number">1</span>] &amp; a[<span class="hljs-number">0</span>];<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h4 id="Verilog-仿真-代码"><a href="#Verilog-仿真-代码" class="headerlink" title="Verilog 仿真 代码"></a>Verilog 仿真 代码</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs Verilog"><span class="hljs-meta">`<span class="hljs-keyword">timescale</span> 1ns / 1ps</span><br><br><span class="hljs-keyword">module</span> ttot_tb;<br>    <span class="hljs-keyword">reg</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] a;<br>    <span class="hljs-keyword">wire</span> [<span class="hljs-number">9</span>:<span class="hljs-number">0</span>] y;<br>    <br>    ttot tb(<br>        <span class="hljs-variable">.a</span>(a),<br>        <span class="hljs-variable">.y</span>(y)<br>    );<br>    <br>    <span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span><br>    <br>        #<span class="hljs-number">0</span> a = <span class="hljs-number">4&#x27;b0000</span>;<br>        #<span class="hljs-number">10</span> a = <span class="hljs-number">4&#x27;b0001</span>;<br>        #<span class="hljs-number">10</span> a = <span class="hljs-number">4&#x27;b0010</span>;<br>        #<span class="hljs-number">10</span> a = <span class="hljs-number">4&#x27;b0011</span>;<br>        #<span class="hljs-number">10</span> a = <span class="hljs-number">4&#x27;b0100</span>;<br>        #<span class="hljs-number">10</span> a = <span class="hljs-number">4&#x27;b0101</span>;<br>        #<span class="hljs-number">10</span> a = <span class="hljs-number">4&#x27;b0110</span>;<br>        #<span class="hljs-number">10</span> a = <span class="hljs-number">4&#x27;b0111</span>;<br>        #<span class="hljs-number">10</span> a = <span class="hljs-number">4&#x27;b1000</span>;<br>        #<span class="hljs-number">10</span> a = <span class="hljs-number">4&#x27;b1001</span>;<br>        #<span class="hljs-number">10</span> <span class="hljs-built_in">$stop</span>;<br>        <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>硬件课程设计</category>
      
      <category>基本组合电路</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Verilog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Verilog-数据分配器-2路分配器代码与仿真</title>
    <link href="/2022/07/07/Verilog-2%E8%B7%AF%E5%88%86%E9%85%8D%E5%99%A8%E4%BB%A3%E7%A0%81%E4%B8%8E%E4%BB%BF%E7%9C%9F/"/>
    <url>/2022/07/07/Verilog-2%E8%B7%AF%E5%88%86%E9%85%8D%E5%99%A8%E4%BB%A3%E7%A0%81%E4%B8%8E%E4%BB%BF%E7%9C%9F/</url>
    
    <content type="html"><![CDATA[<h3 id="2路分配器"><a href="#2路分配器" class="headerlink" title="2路分配器"></a>2路分配器</h3><h4 id="Verilog-代码"><a href="#Verilog-代码" class="headerlink" title="Verilog 代码"></a>Verilog 代码</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs Verilog"><span class="hljs-meta">`<span class="hljs-keyword">timescale</span> 1ns / 1ps</span><br><span class="hljs-comment">//////////////////////////////////////////////////////////////////////////////////</span><br><span class="hljs-comment">// Company: </span><br><span class="hljs-comment">// Engineer: </span><br><span class="hljs-comment">// </span><br><span class="hljs-comment">// Create Date: 2022/07/06 22:58:50</span><br><span class="hljs-comment">// Design Name: </span><br><span class="hljs-comment">// Module Name: 2c1</span><br><span class="hljs-comment">// Project Name: </span><br><span class="hljs-comment">// Target Devices: </span><br><span class="hljs-comment">// Tool Versions: </span><br><span class="hljs-comment">// Description: </span><br><span class="hljs-comment">// </span><br><span class="hljs-comment">// Dependencies: </span><br><span class="hljs-comment">// </span><br><span class="hljs-comment">// Revision:</span><br><span class="hljs-comment">// Revision 0.01 - File Created</span><br><span class="hljs-comment">// Additional Comments:</span><br><span class="hljs-comment">// </span><br><span class="hljs-comment">//////////////////////////////////////////////////////////////////////////////////</span><br><br><br><span class="hljs-keyword">module</span> ototwo(<br>    <span class="hljs-keyword">input</span> D,<br>    <span class="hljs-keyword">input</span> a,<br>    <span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span> y1,<br>    <span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span> y0<br>    );<br>    <br>    <span class="hljs-keyword">always</span> @(a <span class="hljs-keyword">or</span> D)<br>        <span class="hljs-keyword">begin</span><br>        y0 = <span class="hljs-number">1&#x27;b0</span>;<br>        y1 = <span class="hljs-number">1&#x27;b0</span>;<br>        <span class="hljs-keyword">if</span> (a == <span class="hljs-number">1&#x27;b0</span>)<br>            y0 = D;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a == <span class="hljs-number">1&#x27;b1</span>)<br>            y1 = D;<br>        <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br><br></code></pre></td></tr></table></figure><h4 id="Verilog-仿真-代码"><a href="#Verilog-仿真-代码" class="headerlink" title="Verilog 仿真 代码"></a>Verilog 仿真 代码</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs Verilog"><span class="hljs-meta">`<span class="hljs-keyword">timescale</span> 1ns / 1ps</span><br><br><span class="hljs-keyword">module</span> ototwo_tb;<br>    <span class="hljs-keyword">reg</span> D;<br>    <span class="hljs-keyword">reg</span> a;<br>    <span class="hljs-keyword">wire</span> y1;<br>    <span class="hljs-keyword">wire</span> y0;<br>    <br>    ototwo tb(<br>        <span class="hljs-variable">.D</span>(D),<br>        <span class="hljs-variable">.a</span>(a),<br>        <span class="hljs-variable">.y1</span>(y1),<br>        <span class="hljs-variable">.y0</span>(y0)<br>    );<br>    <br>    <span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span><br>        #<span class="hljs-number">0</span> a = <span class="hljs-number">0</span>;<br>        #<span class="hljs-number">0</span> D = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">end</span><br>        <br>    <span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span><br>        #<span class="hljs-number">20</span> D = <span class="hljs-number">1</span>;<br>        #<span class="hljs-number">20</span> <span class="hljs-built_in">$stop</span>;<br>        <span class="hljs-keyword">end</span><br>        <br>    <span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span>   <br>        #<span class="hljs-number">10</span> a = <span class="hljs-number">1</span>;<br>        #<span class="hljs-number">10</span> a = <span class="hljs-number">0</span>;<br>        #<span class="hljs-number">10</span> a = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>硬件课程设计</category>
      
      <category>基本组合电路</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Verilog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Verilog-译码器-二进制译码器代码与仿真</title>
    <link href="/2022/07/07/Verilog-%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%AF%91%E7%A0%81%E5%99%A8%E4%BB%A3%E7%A0%81%E4%B8%8E%E4%BB%BF%E7%9C%9F/"/>
    <url>/2022/07/07/Verilog-%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%AF%91%E7%A0%81%E5%99%A8%E4%BB%A3%E7%A0%81%E4%B8%8E%E4%BB%BF%E7%9C%9F/</url>
    
    <content type="html"><![CDATA[<h3 id="二进制译码器"><a href="#二进制译码器" class="headerlink" title="二进制译码器"></a>二进制译码器</h3><h4 id="Verilog-代码"><a href="#Verilog-代码" class="headerlink" title="Verilog 代码"></a>Verilog 代码</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Verilog"><span class="hljs-keyword">module</span> ttoe (<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">2</span>:<span class="hljs-number">0</span>] a,<br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] y<br>    );<br><br>    <span class="hljs-keyword">assign</span> y[<span class="hljs-number">0</span>] = ~a[<span class="hljs-number">2</span>] &amp; ~a[<span class="hljs-number">1</span>] &amp; ~a[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">assign</span> y[<span class="hljs-number">1</span>] = ~a[<span class="hljs-number">2</span>] &amp; ~a[<span class="hljs-number">1</span>] &amp; a[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">assign</span> y[<span class="hljs-number">2</span>] = ~a[<span class="hljs-number">2</span>] &amp; a[<span class="hljs-number">1</span>] &amp; ~a[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">assign</span> y[<span class="hljs-number">3</span>] = ~a[<span class="hljs-number">2</span>] &amp; a[<span class="hljs-number">1</span>] &amp; a[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">assign</span> y[<span class="hljs-number">4</span>] = a[<span class="hljs-number">2</span>] &amp; ~a[<span class="hljs-number">1</span>] &amp; ~a[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">assign</span> y[<span class="hljs-number">5</span>] = a[<span class="hljs-number">2</span>] &amp; ~a[<span class="hljs-number">1</span>] &amp; a[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">assign</span> y[<span class="hljs-number">6</span>] = a[<span class="hljs-number">2</span>] &amp; a[<span class="hljs-number">1</span>] &amp; ~a[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">assign</span> y[<span class="hljs-number">7</span>] = a[<span class="hljs-number">2</span>] &amp; a[<span class="hljs-number">1</span>] &amp; a[<span class="hljs-number">0</span>];<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h4 id="Verilog-仿真-代码"><a href="#Verilog-仿真-代码" class="headerlink" title="Verilog 仿真 代码"></a>Verilog 仿真 代码</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs Verilog"><span class="hljs-meta">`<span class="hljs-keyword">timescale</span> 1ns / 1ps</span><br><br><span class="hljs-keyword">module</span> ttoe_tb;<br>    <span class="hljs-keyword">reg</span> [<span class="hljs-number">2</span>:<span class="hljs-number">0</span>] a;<br>    <span class="hljs-keyword">wire</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] y;<br>    <br>    ttoe tb(<br>        <span class="hljs-variable">.a</span>(a),<br>        <span class="hljs-variable">.y</span>(y)<br>    );<br>    <br>    <span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span><br>    <br>        #<span class="hljs-number">0</span> a = <span class="hljs-number">3&#x27;b000</span>;<br>        #<span class="hljs-number">10</span> a = <span class="hljs-number">3&#x27;b001</span>;<br>        #<span class="hljs-number">10</span> a = <span class="hljs-number">3&#x27;b010</span>;<br>        #<span class="hljs-number">10</span> a = <span class="hljs-number">3&#x27;b011</span>;<br>        #<span class="hljs-number">10</span> a = <span class="hljs-number">3&#x27;b100</span>;<br>        #<span class="hljs-number">10</span> a = <span class="hljs-number">3&#x27;b101</span>;<br>        #<span class="hljs-number">10</span> a = <span class="hljs-number">3&#x27;b110</span>;<br>        #<span class="hljs-number">10</span> a = <span class="hljs-number">3&#x27;b111</span>;<br>        #<span class="hljs-number">10</span> <span class="hljs-built_in">$stop</span>;<br>        <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>硬件课程设计</category>
      
      <category>基本组合电路</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Verilog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>3537.树查找</title>
    <link href="/2022/07/07/3537-%E6%A0%91%E6%9F%A5%E6%89%BE/"/>
    <url>/2022/07/07/3537-%E6%A0%91%E6%9F%A5%E6%89%BE/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://www.acwing.com/problem/content/4271/">AcWing链接</a></p><p>给定一棵包含 n 个结点（编号 1∼n）的完全二叉树的层序遍历序列，请按照从左到右的顺序输出该树第 k 层的全部结点编号。</p><p><strong>输入格式</strong></p><p>第一行包含整数 n。</p><p>第二行包含 n 个整数，表示该二叉树的层序遍历序列。</p><p>第三行包含整数 k。</p><p><strong>输出格式</strong></p><p>共一行，按照从左到右的顺序输出该树第 k 层的全部结点编号。</p><p>数与数之间用单个空格隔开。</p><p>若无该层结点，则输出 EMPTY。</p><p><strong>数据范围</strong></p><pre><code class="hljs">1≤n≤1000，1≤k≤20</code></pre><p><strong>输入样例：</strong></p><pre><code class="hljs">41 2 3 42</code></pre><p><strong>输出样例：</strong></p><pre><code class="hljs">2 3</code></pre><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><blockquote><p>并非最优解，仅为本人作答答案！</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; nums;<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; floor;<br>    <span class="hljs-type">int</span> count, idx = <span class="hljs-number">0</span>;<br>    cin &gt;&gt; count;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; count;i++)<br>    &#123;<br>        <span class="hljs-type">int</span> tmp;<br>        cin &gt;&gt; tmp;<br>        nums.<span class="hljs-built_in">push_back</span>(tmp);<br>        <span class="hljs-keyword">if</span> (nums.<span class="hljs-built_in">size</span>() &gt;= <span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>,idx))<br>        &#123;<br>            floor.<span class="hljs-built_in">push_back</span>(nums);<br>            nums.<span class="hljs-built_in">clear</span>();<br>            idx++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (nums.<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">0</span>) floor.<span class="hljs-built_in">push_back</span>(nums);<br>    <span class="hljs-type">int</span> choose;<br>    cin &gt;&gt; choose;<br>    <span class="hljs-keyword">if</span> (choose &gt; floor.<span class="hljs-built_in">size</span>())<br>    &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;EMPTY&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; floor[choose<span class="hljs-number">-1</span>].<span class="hljs-built_in">size</span>();i++)<br>        &#123;<br>            cout &lt;&lt; floor[choose<span class="hljs-number">-1</span>][i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>AcWing</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AcWing</tag>
      
      <tag>暑假每日一题2022</tag>
      
      <tag>数组</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Verilog-加法器-1位十进制加法器代码与仿真</title>
    <link href="/2022/07/07/Verilog-1%E4%BD%8D%E5%8D%81%E8%BF%9B%E5%88%B6%E5%8A%A0%E6%B3%95%E5%99%A8%E4%BB%A3%E7%A0%81%E4%B8%8E%E4%BB%BF%E7%9C%9F/"/>
    <url>/2022/07/07/Verilog-1%E4%BD%8D%E5%8D%81%E8%BF%9B%E5%88%B6%E5%8A%A0%E6%B3%95%E5%99%A8%E4%BB%A3%E7%A0%81%E4%B8%8E%E4%BB%BF%E7%9C%9F/</url>
    
    <content type="html"><![CDATA[<h3 id="1位十进制加法器"><a href="#1位十进制加法器" class="headerlink" title="1位十进制加法器"></a>1位十进制加法器</h3><h4 id="Verilog-代码"><a href="#Verilog-代码" class="headerlink" title="Verilog 代码"></a>Verilog 代码</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Verilog"><span class="hljs-keyword">module</span> add10(<br>    <span class="hljs-keyword">input</span>[<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] A,<br>    <span class="hljs-keyword">input</span>[<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] B,<br>    <span class="hljs-keyword">input</span> cin,<br>    <span class="hljs-keyword">output</span>[<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] SUM,<br>    <span class="hljs-keyword">output</span> cout<br>    );<br>    <br>    <span class="hljs-keyword">assign</span> SUM = (A + B + cin)%<span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">assign</span> cout = (A + B + cin)/<span class="hljs-number">10</span>;<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h4 id="Verilog-仿真-代码"><a href="#Verilog-仿真-代码" class="headerlink" title="Verilog 仿真 代码"></a>Verilog 仿真 代码</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs Verilog"><span class="hljs-meta">`<span class="hljs-keyword">timescale</span> 1ns / 1ps</span><br><br><span class="hljs-keyword">module</span> add10_tb;<br>    <span class="hljs-keyword">reg</span>[<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] A,B;                             <span class="hljs-comment">//输入激励信号定义为 reg型 </span><br>    <span class="hljs-keyword">reg</span> cin; <br>    <span class="hljs-keyword">wire</span>[<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] SUM;                            <span class="hljs-comment">//输出信号定义为wire型 </span><br>    <span class="hljs-keyword">wire</span> cout;<br>    <br>    add10 tb (<br>        <span class="hljs-variable">.A</span>(A),<br>        <span class="hljs-variable">.B</span>(B),<br>        <span class="hljs-variable">.cin</span>(cin),<br>        <span class="hljs-variable">.SUM</span>(SUM),<br>        <span class="hljs-variable">.cout</span>(cout)<br>    );<br>    <br>        <span class="hljs-keyword">initial</span><br>        <span class="hljs-keyword">begin</span><br>            #<span class="hljs-number">0</span> cin = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">end</span><br>    <br>    <span class="hljs-keyword">initial</span><br>        <span class="hljs-keyword">begin</span><br>            #<span class="hljs-number">0</span> A = <span class="hljs-number">4&#x27;d0</span>;<br>            #<span class="hljs-number">10</span> A = <span class="hljs-number">4&#x27;d2</span>;<br>            #<span class="hljs-number">10</span> A = <span class="hljs-number">4&#x27;d5</span>;<br>            #<span class="hljs-number">10</span> A = <span class="hljs-number">4&#x27;d8</span>;<br>            #<span class="hljs-number">10</span> A = <span class="hljs-number">4&#x27;d9</span>;<br>            #<span class="hljs-number">10</span> <span class="hljs-built_in">$stop</span>;<br>        <span class="hljs-keyword">end</span><br>    <br>        <span class="hljs-keyword">initial</span><br>        <span class="hljs-keyword">begin</span><br>            #<span class="hljs-number">0</span> B = <span class="hljs-number">4&#x27;d0</span>;<br>            #<span class="hljs-number">10</span> B = <span class="hljs-number">4&#x27;d2</span>;<br>            #<span class="hljs-number">10</span> B = <span class="hljs-number">4&#x27;d5</span>;<br>            #<span class="hljs-number">10</span> B = <span class="hljs-number">4&#x27;d8</span>;<br>            #<span class="hljs-number">10</span> B = <span class="hljs-number">4&#x27;d9</span>;<br>            #<span class="hljs-number">10</span> <span class="hljs-built_in">$stop</span>;<br>        <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>硬件课程设计</category>
      
      <category>基本组合电路</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Verilog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Verilog-数值比较器-1位数值比较器代码与仿真</title>
    <link href="/2022/07/07/Verilog-1%E4%BD%8D%E6%95%B0%E5%80%BC%E6%AF%94%E8%BE%83%E5%99%A8%E4%BB%A3%E7%A0%81%E4%B8%8E%E4%BB%BF%E7%9C%9F/"/>
    <url>/2022/07/07/Verilog-1%E4%BD%8D%E6%95%B0%E5%80%BC%E6%AF%94%E8%BE%83%E5%99%A8%E4%BB%A3%E7%A0%81%E4%B8%8E%E4%BB%BF%E7%9C%9F/</url>
    
    <content type="html"><![CDATA[<h3 id="1位数值比较器"><a href="#1位数值比较器" class="headerlink" title="1位数值比较器"></a>1位数值比较器</h3><h4 id="Verilog-代码"><a href="#Verilog-代码" class="headerlink" title="Verilog 代码"></a>Verilog 代码</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Verilog"><span class="hljs-keyword">module</span> com (<br>        <span class="hljs-keyword">input</span> a,<br>        <span class="hljs-keyword">input</span> b,<br>        <span class="hljs-keyword">output</span> [<span class="hljs-number">2</span>:<span class="hljs-number">0</span>] y<br>    );<br>    <span class="hljs-keyword">reg</span> [<span class="hljs-number">2</span>:<span class="hljs-number">0</span>] y_tmp;<br>    <span class="hljs-keyword">always</span> @(*)<br>        <span class="hljs-keyword">begin</span><br>            <span class="hljs-keyword">if</span> (a &gt; b)<br>                y_tmp &lt;= <span class="hljs-number">3&#x27;b100</span>;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a == b)<br>                y_tmp &lt;= <span class="hljs-number">3&#x27;b010</span>;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a &lt; b)<br>                y_tmp &lt;= <span class="hljs-number">3&#x27;b001</span>;<br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">assign</span> y = y_tmp;<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h4 id="Verilog-仿真-代码"><a href="#Verilog-仿真-代码" class="headerlink" title="Verilog 仿真 代码"></a>Verilog 仿真 代码</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs Verilog"><span class="hljs-meta">`<span class="hljs-keyword">timescale</span> 1ns / 1ps</span><br><br><span class="hljs-keyword">module</span> com_tb;<br>    <span class="hljs-keyword">reg</span> a;<br>    <span class="hljs-keyword">reg</span> b;<br>    <span class="hljs-keyword">wire</span> [<span class="hljs-number">2</span>:<span class="hljs-number">0</span>] y;<br><br>    com tb(<br>        <span class="hljs-variable">.a</span>(a),<br>        <span class="hljs-variable">.b</span>(b),<br>        <span class="hljs-variable">.y</span>(y)<br>    );<br><br>    <span class="hljs-keyword">initial</span> <br>        <span class="hljs-keyword">begin</span><br>           #<span class="hljs-number">0</span> a = <span class="hljs-number">0</span>; <br>           #<span class="hljs-number">20</span> a = <span class="hljs-number">1</span>;<br>           #<span class="hljs-number">20</span> <span class="hljs-built_in">$stop</span>;<br>        <span class="hljs-keyword">end</span><br>        <br>    <span class="hljs-keyword">initial</span> <br>        <span class="hljs-keyword">begin</span><br>           #<span class="hljs-number">0</span> b = <span class="hljs-number">0</span>; <br>           #<span class="hljs-number">10</span> b = <span class="hljs-number">1</span>;<br>           #<span class="hljs-number">10</span> b = <span class="hljs-number">0</span>; <br>           #<span class="hljs-number">10</span> b = <span class="hljs-number">1</span>;<br>           #<span class="hljs-number">10</span> <span class="hljs-built_in">$stop</span>;<br>        <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>硬件课程设计</category>
      
      <category>基本组合电路</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Verilog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Verilog-编码器-优先编码器代码与仿真</title>
    <link href="/2022/07/07/Verilog-%E4%BC%98%E5%85%88%E7%BC%96%E7%A0%81%E5%99%A8%E4%BB%A3%E7%A0%81%E4%B8%8E%E4%BB%BF%E7%9C%9F/"/>
    <url>/2022/07/07/Verilog-%E4%BC%98%E5%85%88%E7%BC%96%E7%A0%81%E5%99%A8%E4%BB%A3%E7%A0%81%E4%B8%8E%E4%BB%BF%E7%9C%9F/</url>
    
    <content type="html"><![CDATA[<h3 id="优先编码器"><a href="#优先编码器" class="headerlink" title="优先编码器"></a>优先编码器</h3><h4 id="Verilog-代码"><a href="#Verilog-代码" class="headerlink" title="Verilog 代码"></a>Verilog 代码</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs Verilog"><span class="hljs-keyword">module</span> prienco (<br>    <span class="hljs-keyword">input</span> EI,<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] i,<br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">2</span>:<span class="hljs-number">0</span>] y<br>    );<br>    <br>    <span class="hljs-keyword">reg</span> [<span class="hljs-number">2</span>:<span class="hljs-number">0</span>] y_tmp;<br><br>    <span class="hljs-keyword">always</span> @ (i <span class="hljs-keyword">or</span> EI)<br>        <span class="hljs-keyword">if</span> (EI == <span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">begin</span><br>                y_tmp &lt;= <span class="hljs-number">3&#x27;b011</span>;<br>            <span class="hljs-keyword">end</span><br>   <span class="hljs-keyword">else</span><br>            <span class="hljs-keyword">if</span> (i == <span class="hljs-number">8&#x27;b1111_1111</span>)<br>                y_tmp &lt;= <span class="hljs-number">3&#x27;b111</span>;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i[<span class="hljs-number">7</span>] == <span class="hljs-number">0</span>)<br>                y_tmp &lt;= <span class="hljs-number">3&#x27;b111</span>;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i[<span class="hljs-number">6</span>] == <span class="hljs-number">0</span>)<br>                y_tmp &lt;= <span class="hljs-number">3&#x27;b110</span>;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i[<span class="hljs-number">5</span>] == <span class="hljs-number">0</span>)<br>                y_tmp &lt;= <span class="hljs-number">3&#x27;b101</span>;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i[<span class="hljs-number">4</span>] == <span class="hljs-number">0</span>)<br>                y_tmp &lt;= <span class="hljs-number">3&#x27;b100</span>;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i[<span class="hljs-number">3</span>] == <span class="hljs-number">0</span>)<br>                y_tmp &lt;= <span class="hljs-number">3&#x27;b011</span>;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i[<span class="hljs-number">2</span>] == <span class="hljs-number">0</span>)<br>                y_tmp &lt;= <span class="hljs-number">3&#x27;b010</span>;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i[<span class="hljs-number">1</span>] == <span class="hljs-number">0</span>)<br>                y_tmp &lt;= <span class="hljs-number">3&#x27;b001</span>;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i[<span class="hljs-number">0</span>] == <span class="hljs-number">0</span>)<br>                y_tmp &lt;= <span class="hljs-number">3&#x27;b000</span>;<br>    <span class="hljs-keyword">assign</span> y = y_tmp;<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h4 id="Verilog-仿真-代码"><a href="#Verilog-仿真-代码" class="headerlink" title="Verilog 仿真 代码"></a>Verilog 仿真 代码</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs Verilog"><span class="hljs-meta">`<span class="hljs-keyword">timescale</span> 1ns / 1ps</span><br><br><span class="hljs-keyword">module</span> prienco_tb;<br>    <span class="hljs-keyword">reg</span> EI;<br>    <span class="hljs-keyword">reg</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] i;<br>    <span class="hljs-keyword">wire</span> [<span class="hljs-number">2</span>:<span class="hljs-number">0</span>] y;<br>    <br>    prienco tb (<br>        <span class="hljs-variable">.EI</span>(EI),<br>        <span class="hljs-variable">.i</span>(i),<br>        <span class="hljs-variable">.y</span>(y)<br>    );<br>    <br>    <span class="hljs-keyword">initial</span> <br>        <span class="hljs-keyword">begin</span><br>            #<span class="hljs-number">0</span> EI = <span class="hljs-number">1</span>;<br>            #<span class="hljs-number">10</span> EI = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">end</span><br>        <br>    <span class="hljs-keyword">initial</span> <br>        <span class="hljs-keyword">begin</span><br>            #<span class="hljs-number">0</span>  i &lt;= <span class="hljs-number">8&#x27;b1111_1111</span>;<br>            #<span class="hljs-number">10</span> i &lt;= <span class="hljs-number">8&#x27;b1111_1111</span>;<br>            #<span class="hljs-number">10</span> i &lt;= <span class="hljs-number">8&#x27;b1111_1110</span>;<br>            #<span class="hljs-number">10</span> i &lt;= <span class="hljs-number">8&#x27;b1111_1101</span>;<br>            #<span class="hljs-number">10</span> i &lt;= <span class="hljs-number">8&#x27;b1111_1011</span>;<br>            #<span class="hljs-number">10</span> i &lt;= <span class="hljs-number">8&#x27;b1111_0111</span>;<br>            #<span class="hljs-number">10</span> i &lt;= <span class="hljs-number">8&#x27;b1110_1111</span>;<br>            #<span class="hljs-number">10</span> i &lt;= <span class="hljs-number">8&#x27;b1101_1111</span>;<br>            #<span class="hljs-number">10</span> i &lt;= <span class="hljs-number">8&#x27;b1011_1111</span>;<br>            #<span class="hljs-number">10</span> i &lt;= <span class="hljs-number">8&#x27;b0111_1111</span>;<br>            #<span class="hljs-number">10</span> <span class="hljs-built_in">$stop</span>;<br>        <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>硬件课程设计</category>
      
      <category>基本组合电路</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Verilog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Verilog-编码器-二-十进制编码器代码与仿真</title>
    <link href="/2022/07/07/Verilog-%E4%BA%8C-%E5%8D%81%E8%BF%9B%E5%88%B6%E7%BC%96%E7%A0%81%E5%99%A8%E4%BB%A3%E7%A0%81%E4%B8%8E%E4%BB%BF%E7%9C%9F/"/>
    <url>/2022/07/07/Verilog-%E4%BA%8C-%E5%8D%81%E8%BF%9B%E5%88%B6%E7%BC%96%E7%A0%81%E5%99%A8%E4%BB%A3%E7%A0%81%E4%B8%8E%E4%BB%BF%E7%9C%9F/</url>
    
    <content type="html"><![CDATA[<h3 id="二-十进制编码器"><a href="#二-十进制编码器" class="headerlink" title="二-十进制编码器"></a>二-十进制编码器</h3><h4 id="Verilog-代码"><a href="#Verilog-代码" class="headerlink" title="Verilog 代码"></a>Verilog 代码</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Verilog"><span class="hljs-keyword">module</span> ttt (<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">9</span>:<span class="hljs-number">0</span>] i,<br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] y<br>    );<br>    <span class="hljs-keyword">reg</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] y_tmp;<br>    <span class="hljs-keyword">always</span> @(*)<br>        <span class="hljs-keyword">begin</span><br>            y_tmp[<span class="hljs-number">0</span>] = ~(~i[<span class="hljs-number">1</span>] &amp; ~i[<span class="hljs-number">3</span>] &amp; ~i[<span class="hljs-number">5</span>] &amp; ~i[<span class="hljs-number">7</span>] &amp; ~i[<span class="hljs-number">9</span>]);<br>            y_tmp[<span class="hljs-number">1</span>] = ~(~i[<span class="hljs-number">2</span>] &amp; ~i[<span class="hljs-number">3</span>] &amp; ~i[<span class="hljs-number">6</span>] &amp; ~i[<span class="hljs-number">7</span>]);<br>            y_tmp[<span class="hljs-number">2</span>] = ~(~i[<span class="hljs-number">4</span>] &amp; ~i[<span class="hljs-number">5</span>] &amp; ~i[<span class="hljs-number">6</span>] &amp; ~i[<span class="hljs-number">7</span>]);<br>            y_tmp[<span class="hljs-number">3</span>] = ~(~i[<span class="hljs-number">8</span>] &amp; ~i[<span class="hljs-number">9</span>]);<br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">assign</span> y = y_tmp;<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h4 id="Verilog-仿真-代码"><a href="#Verilog-仿真-代码" class="headerlink" title="Verilog 仿真 代码"></a>Verilog 仿真 代码</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs Verilog"><span class="hljs-meta">`<span class="hljs-keyword">timescale</span> 1ns / 1ps</span><br><br><span class="hljs-keyword">module</span> ttt_tb;<br>    <span class="hljs-keyword">reg</span> [<span class="hljs-number">9</span>:<span class="hljs-number">0</span>] i;<br>    <span class="hljs-keyword">wire</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] y;<br><br>    ttt tb(<br>        <span class="hljs-variable">.i</span>(i),<br>        <span class="hljs-variable">.y</span>(y)<br>    );<br><br>    <span class="hljs-keyword">initial</span><br>        <span class="hljs-keyword">begin</span><br>            #<span class="hljs-number">0</span> i &lt;= <span class="hljs-number">10&#x27;b0000000001</span>;<br>            #<span class="hljs-number">10</span> i &lt;= <span class="hljs-number">10&#x27;b0000000010</span>;<br>            #<span class="hljs-number">10</span> i &lt;= <span class="hljs-number">10&#x27;b0000000100</span>;<br>            #<span class="hljs-number">10</span> i &lt;= <span class="hljs-number">10&#x27;b0000001000</span>;<br>            #<span class="hljs-number">10</span> i &lt;= <span class="hljs-number">10&#x27;b0000010000</span>;<br>            #<span class="hljs-number">10</span> i &lt;= <span class="hljs-number">10&#x27;b0000100000</span>;<br>            #<span class="hljs-number">10</span> i &lt;= <span class="hljs-number">10&#x27;b0001000000</span>;<br>            #<span class="hljs-number">10</span> i &lt;= <span class="hljs-number">10&#x27;b0010000000</span>;<br>            #<span class="hljs-number">10</span> i &lt;= <span class="hljs-number">10&#x27;b0100000000</span>;<br>            #<span class="hljs-number">10</span> i &lt;= <span class="hljs-number">10&#x27;b1000000000</span>;<br>            #<span class="hljs-number">10</span> <span class="hljs-built_in">$stop</span>;<br>        <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>硬件课程设计</category>
      
      <category>基本组合电路</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Verilog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Verilog-编码器-3位二进制编码器代码与仿真</title>
    <link href="/2022/07/07/Verilog-3%E4%BD%8D%E4%BA%8C%E8%BF%9B%E5%88%B6%E7%BC%96%E7%A0%81%E5%99%A8%E4%BB%A3%E7%A0%81%E4%B8%8E%E4%BB%BF%E7%9C%9F/"/>
    <url>/2022/07/07/Verilog-3%E4%BD%8D%E4%BA%8C%E8%BF%9B%E5%88%B6%E7%BC%96%E7%A0%81%E5%99%A8%E4%BB%A3%E7%A0%81%E4%B8%8E%E4%BB%BF%E7%9C%9F/</url>
    
    <content type="html"><![CDATA[<h3 id="3位二进制编码器"><a href="#3位二进制编码器" class="headerlink" title="3位二进制编码器"></a>3位二进制编码器</h3><h4 id="Verilog-代码"><a href="#Verilog-代码" class="headerlink" title="Verilog 代码"></a>Verilog 代码</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs Verilog"><span class="hljs-keyword">module</span> benco(<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] i,<br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">2</span>:<span class="hljs-number">0</span>] y<br>    );<br>    <span class="hljs-keyword">reg</span> [<span class="hljs-number">2</span>:<span class="hljs-number">0</span>] y_tmp;<br>    <br>    <span class="hljs-keyword">always</span> @(*) <span class="hljs-keyword">begin</span> <br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">8&#x27;b00000001</span>)<br>            y_tmp = <span class="hljs-number">3&#x27;b000</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i == <span class="hljs-number">8&#x27;b00000010</span>)<br>            y_tmp = <span class="hljs-number">3&#x27;b001</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i == <span class="hljs-number">8&#x27;b00000100</span>)<br>            y_tmp = <span class="hljs-number">3&#x27;b010</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i == <span class="hljs-number">8&#x27;b00001000</span>)<br>            y_tmp = <span class="hljs-number">3&#x27;b011</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i == <span class="hljs-number">8&#x27;b00010000</span>)<br>            y_tmp = <span class="hljs-number">3&#x27;b100</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i == <span class="hljs-number">8&#x27;b00100000</span>)<br>            y_tmp = <span class="hljs-number">3&#x27;b101</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i == <span class="hljs-number">8&#x27;b01000000</span>)<br>            y_tmp = <span class="hljs-number">3&#x27;b110</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i == <span class="hljs-number">8&#x27;b10000000</span>)<br>            y_tmp = <span class="hljs-number">3&#x27;b111</span>;<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">assign</span> y = y_tmp;<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h4 id="Verilog-仿真-代码"><a href="#Verilog-仿真-代码" class="headerlink" title="Verilog 仿真 代码"></a>Verilog 仿真 代码</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs Verilog"><span class="hljs-meta">`<span class="hljs-keyword">timescale</span> 1ns / 1ps</span><br><br><span class="hljs-keyword">module</span> benco_tb;<br>    <span class="hljs-keyword">reg</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] i;<br>    <span class="hljs-keyword">wire</span> [<span class="hljs-number">2</span>:<span class="hljs-number">0</span>] y;<br>    <br>    benco tb (<br>        <span class="hljs-variable">.i</span>(i),<br>        <span class="hljs-variable">.y</span>(y)<br>    );<br>    <br>    <span class="hljs-keyword">initial</span><br>        <span class="hljs-keyword">begin</span><br>            #<span class="hljs-number">0</span> i &lt;= <span class="hljs-number">8&#x27;b00000001</span>;<br>            #<span class="hljs-number">10</span> i &lt;= <span class="hljs-number">8&#x27;b00000010</span>;<br>            #<span class="hljs-number">10</span> i &lt;= <span class="hljs-number">8&#x27;b00000100</span>;<br>            #<span class="hljs-number">10</span> i &lt;= <span class="hljs-number">8&#x27;b00001000</span>;<br>            #<span class="hljs-number">10</span> i &lt;= <span class="hljs-number">8&#x27;b00010000</span>;<br>            #<span class="hljs-number">10</span> i &lt;= <span class="hljs-number">8&#x27;b00100000</span>;<br>            #<span class="hljs-number">10</span> i &lt;= <span class="hljs-number">8&#x27;b01000000</span>;<br>            #<span class="hljs-number">10</span> i &lt;= <span class="hljs-number">8&#x27;b10000000</span>;<br>            #<span class="hljs-number">10</span> <span class="hljs-built_in">$stop</span>;<br>        <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>硬件课程设计</category>
      
      <category>基本组合电路</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Verilog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Verilog-选择器-2选1数选器代码与仿真</title>
    <link href="/2022/07/06/Verilog-2%E9%80%891%E6%95%B0%E9%80%89%E5%99%A8%E4%BB%A3%E7%A0%81%E4%B8%8E%E4%BB%BF%E7%9C%9F/"/>
    <url>/2022/07/06/Verilog-2%E9%80%891%E6%95%B0%E9%80%89%E5%99%A8%E4%BB%A3%E7%A0%81%E4%B8%8E%E4%BB%BF%E7%9C%9F/</url>
    
    <content type="html"><![CDATA[<h3 id="2选1数选器"><a href="#2选1数选器" class="headerlink" title="2选1数选器"></a>2选1数选器</h3><h4 id="Verilog-代码"><a href="#Verilog-代码" class="headerlink" title="Verilog 代码"></a>Verilog 代码</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Verilog"><span class="hljs-keyword">module</span> twoc1(<br>    <span class="hljs-keyword">input</span> ia,<br>    <span class="hljs-keyword">input</span> ib,<br>    <span class="hljs-keyword">input</span> s,<br>    <span class="hljs-keyword">output</span> y<br>    );<br>    <br>    <span class="hljs-keyword">assign</span> y = ~s&amp;ia | s&amp;ib;<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h4 id="Verilog-仿真-代码"><a href="#Verilog-仿真-代码" class="headerlink" title="Verilog 仿真 代码"></a>Verilog 仿真 代码</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs Verilog"><span class="hljs-meta">`<span class="hljs-keyword">timescale</span> 1ns / 1ps</span><br><br><span class="hljs-keyword">module</span> twoc1_tb;<br>    <span class="hljs-keyword">reg</span> s;<br>    <span class="hljs-keyword">reg</span> a;<br>    <span class="hljs-keyword">reg</span> b;<br>    <span class="hljs-keyword">wire</span> y;<br>    <br>    twoc1 tb(<br>        <span class="hljs-variable">.ia</span>(a),<br>        <span class="hljs-variable">.ib</span>(b),<br>        <span class="hljs-variable">.s</span>(s),<br>        <span class="hljs-variable">.y</span>(y)<br>    );<br>    <br>    <span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span><br>    <br>        #<span class="hljs-number">0</span> a = <span class="hljs-number">1</span>;<br>        #<span class="hljs-number">10</span> a = <span class="hljs-number">1</span>;<br>        #<span class="hljs-number">10</span> a = <span class="hljs-number">0</span>;<br>        #<span class="hljs-number">10</span> a = <span class="hljs-number">0</span>;<br>        #<span class="hljs-number">10</span> a = <span class="hljs-number">1</span>;<br>        #<span class="hljs-number">10</span> a = <span class="hljs-number">1</span>;<br>        #<span class="hljs-number">10</span> a = <span class="hljs-number">0</span>;<br>        #<span class="hljs-number">10</span> a = <span class="hljs-number">0</span>;<br>        #<span class="hljs-number">10</span> <span class="hljs-built_in">$stop</span>;<br>        <span class="hljs-keyword">end</span><br>        <br>    <span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span><br>        #<span class="hljs-number">0</span> b = <span class="hljs-number">1</span>;<br>        #<span class="hljs-number">10</span> b = <span class="hljs-number">0</span>;<br>        #<span class="hljs-number">10</span> b = <span class="hljs-number">1</span>;<br>        #<span class="hljs-number">10</span> b = <span class="hljs-number">0</span>;<br>        #<span class="hljs-number">10</span> b = <span class="hljs-number">1</span>;<br>        #<span class="hljs-number">10</span> b = <span class="hljs-number">0</span>;<br>        #<span class="hljs-number">10</span> b = <span class="hljs-number">1</span>;<br>        #<span class="hljs-number">10</span> b = <span class="hljs-number">0</span>;<br>        #<span class="hljs-number">10</span> <span class="hljs-built_in">$stop</span>;<br>        <span class="hljs-keyword">end</span><br>        <br>    <span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span>   <br>        #<span class="hljs-number">0</span> s = <span class="hljs-number">0</span>;<br>        #<span class="hljs-number">40</span> s = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>硬件课程设计</category>
      
      <category>基本组合电路</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Verilog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Verilog-加法器-4位二进制加法器代码与仿真</title>
    <link href="/2022/07/06/Verilog-4%E4%BD%8D%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%8A%A0%E6%B3%95%E5%99%A8%E4%BB%A3%E7%A0%81%E4%B8%8E%E4%BB%BF%E7%9C%9F/"/>
    <url>/2022/07/06/Verilog-4%E4%BD%8D%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%8A%A0%E6%B3%95%E5%99%A8%E4%BB%A3%E7%A0%81%E4%B8%8E%E4%BB%BF%E7%9C%9F/</url>
    
    <content type="html"><![CDATA[<h3 id="4位二进制加法器"><a href="#4位二进制加法器" class="headerlink" title="4位二进制加法器"></a>4位二进制加法器</h3><h4 id="IP核组成线路"><a href="#IP核组成线路" class="headerlink" title="IP核组成线路"></a>IP核组成线路</h4><p>四组<a href="/2022/07/07/Verilog-1%E4%BD%8D%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%8A%A0%E6%B3%95%E5%99%A8%E4%BB%A3%E7%A0%81%E4%B8%8E%E4%BB%BF%E7%9C%9F/" title="1位二进制加法器">1位二进制加法器</a></p><p><img src="https://api2.mubu.com/v3/document_image/3b8a3aec-6c8b-4cb7-95c1-1e49279703cd-785422.jpg"></p><h4 id="Verilog-代码"><a href="#Verilog-代码" class="headerlink" title="Verilog 代码"></a>Verilog 代码</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs Verilog"><span class="hljs-comment">//Copyright 1986-2018 Xilinx, Inc. All Rights Reserved.</span><br><span class="hljs-comment">//--------------------------------------------------------------------------------</span><br><span class="hljs-comment">//Tool Version: Vivado v.2018.3 (win64) Build 2405991 Thu Dec  6 23:38:27 MST 2018</span><br><span class="hljs-comment">//Date        : Thu Jul  7 19:56:22 2022</span><br><span class="hljs-comment">//Host        : WIN-M6SVA3A7MOS running 64-bit major release  (build 9200)</span><br><span class="hljs-comment">//Command     : generate_target add_4b.bd</span><br><span class="hljs-comment">//Design      : add_4b</span><br><span class="hljs-comment">//Purpose     : IP block netlist</span><br><span class="hljs-comment">//--------------------------------------------------------------------------------</span><br><span class="hljs-meta">`<span class="hljs-keyword">timescale</span> 1 ps / 1 ps</span><br><br>(* CORE_GENERATION_INFO = <span class="hljs-string">&quot;add_4b,IP_Integrator,&#123;x_ipVendor=xilinx.com,x_ipLibrary=BlockDiagram,x_ipName=add_4b,x_ipVersion=1.00.a,x_ipLanguage=VERILOG,numBlks=4,numReposBlks=4,numNonXlnxBlks=0,numHierBlks=0,maxHierDepth=0,numSysgenBlks=0,numHlsBlks=0,numHdlrefBlks=0,numPkgbdBlks=0,bdsource=USER,synth_mode=OOC_per_IP&#125;&quot;</span> *) (* HW_HANDOFF = <span class="hljs-string">&quot;add_4b.hwdef&quot;</span> *) <br><span class="hljs-keyword">module</span> add_4b<br>   (cin_0,<br>    cout_0,<br>    ia_0,<br>    ia_1,<br>    ia_2,<br>    ia_3,<br>    ib_0,<br>    ib_1,<br>    ib_2,<br>    ib_3,<br>    sum_0,<br>    sum_1,<br>    sum_2,<br>    sum_3);<br>  <span class="hljs-keyword">input</span> cin_0;<br>  <span class="hljs-keyword">output</span> cout_0;<br>  <span class="hljs-keyword">input</span> ia_0;<br>  <span class="hljs-keyword">input</span> ia_1;<br>  <span class="hljs-keyword">input</span> ia_2;<br>  <span class="hljs-keyword">input</span> ia_3;<br>  <span class="hljs-keyword">input</span> ib_0;<br>  <span class="hljs-keyword">input</span> ib_1;<br>  <span class="hljs-keyword">input</span> ib_2;<br>  <span class="hljs-keyword">input</span> ib_3;<br>  <span class="hljs-keyword">output</span> sum_0;<br>  <span class="hljs-keyword">output</span> sum_1;<br>  <span class="hljs-keyword">output</span> sum_2;<br>  <span class="hljs-keyword">output</span> sum_3;<br><br>  <span class="hljs-keyword">wire</span> add4_0_cout;<br>  <span class="hljs-keyword">wire</span> add4_0_sum;<br>  <span class="hljs-keyword">wire</span> add4_1_cout;<br>  <span class="hljs-keyword">wire</span> add4_1_sum;<br>  <span class="hljs-keyword">wire</span> add4_2_cout;<br>  <span class="hljs-keyword">wire</span> add4_2_sum;<br>  <span class="hljs-keyword">wire</span> add4_3_cout;<br>  <span class="hljs-keyword">wire</span> add4_3_sum;<br>  <span class="hljs-keyword">wire</span> cin_0_1;<br>  <span class="hljs-keyword">wire</span> ia_0_1;<br>  <span class="hljs-keyword">wire</span> ia_1_1;<br>  <span class="hljs-keyword">wire</span> ia_2_1;<br>  <span class="hljs-keyword">wire</span> ia_3_1;<br>  <span class="hljs-keyword">wire</span> ib_0_1;<br>  <span class="hljs-keyword">wire</span> ib_1_1;<br>  <span class="hljs-keyword">wire</span> ib_2_1;<br>  <span class="hljs-keyword">wire</span> ib_3_1;<br><br>  <span class="hljs-keyword">assign</span> cin_0_1 = cin_0;<br>  <span class="hljs-keyword">assign</span> cout_0 = add4_3_cout;<br>  <span class="hljs-keyword">assign</span> ia_0_1 = ia_0;<br>  <span class="hljs-keyword">assign</span> ia_1_1 = ia_1;<br>  <span class="hljs-keyword">assign</span> ia_2_1 = ia_2;<br>  <span class="hljs-keyword">assign</span> ia_3_1 = ia_3;<br>  <span class="hljs-keyword">assign</span> ib_0_1 = ib_0;<br>  <span class="hljs-keyword">assign</span> ib_1_1 = ib_1;<br>  <span class="hljs-keyword">assign</span> ib_2_1 = ib_2;<br>  <span class="hljs-keyword">assign</span> ib_3_1 = ib_3;<br>  <span class="hljs-keyword">assign</span> sum_0 = add4_0_sum;<br>  <span class="hljs-keyword">assign</span> sum_1 = add4_1_sum;<br>  <span class="hljs-keyword">assign</span> sum_2 = add4_2_sum;<br>  <span class="hljs-keyword">assign</span> sum_3 = add4_3_sum;<br>  add_4b_add4_0_0 add4_0<br>       (<span class="hljs-variable">.cin</span>(cin_0_1),<br>        <span class="hljs-variable">.cout</span>(add4_0_cout),<br>        <span class="hljs-variable">.ia</span>(ia_0_1),<br>        <span class="hljs-variable">.ib</span>(ib_0_1),<br>        <span class="hljs-variable">.sum</span>(add4_0_sum));<br>  add_4b_add4_1_0 add4_1<br>       (<span class="hljs-variable">.cin</span>(add4_0_cout),<br>        <span class="hljs-variable">.cout</span>(add4_1_cout),<br>        <span class="hljs-variable">.ia</span>(ia_1_1),<br>        <span class="hljs-variable">.ib</span>(ib_1_1),<br>        <span class="hljs-variable">.sum</span>(add4_1_sum));<br>  add_4b_add4_2_0 add4_2<br>       (<span class="hljs-variable">.cin</span>(add4_1_cout),<br>        <span class="hljs-variable">.cout</span>(add4_2_cout),<br>        <span class="hljs-variable">.ia</span>(ia_2_1),<br>        <span class="hljs-variable">.ib</span>(ib_2_1),<br>        <span class="hljs-variable">.sum</span>(add4_2_sum));<br>  add_4b_add4_3_0 add4_3<br>       (<span class="hljs-variable">.cin</span>(add4_2_cout),<br>        <span class="hljs-variable">.cout</span>(add4_3_cout),<br>        <span class="hljs-variable">.ia</span>(ia_3_1),<br>        <span class="hljs-variable">.ib</span>(ib_3_1),<br>        <span class="hljs-variable">.sum</span>(add4_3_sum));<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h4 id="Verilog-仿真-代码"><a href="#Verilog-仿真-代码" class="headerlink" title="Verilog 仿真 代码"></a>Verilog 仿真 代码</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs Verilog"><span class="hljs-comment">//Copyright 1986-2018 Xilinx, Inc. All Rights Reserved.</span><br><span class="hljs-comment">//--------------------------------------------------------------------------------</span><br><span class="hljs-comment">//Tool Version: Vivado v.2018.3 (win64) Build 2405991 Thu Dec  6 23:38:27 MST 2018</span><br><span class="hljs-comment">//Date        : Thu Jul  7 19:56:22 2022</span><br><span class="hljs-comment">//Host        : WIN-M6SVA3A7MOS running 64-bit major release  (build 9200)</span><br><span class="hljs-comment">//Command     : generate_target add_4b_wrapper.bd</span><br><span class="hljs-comment">//Design      : add_4b_wrapper</span><br><span class="hljs-comment">//Purpose     : IP block netlist</span><br><span class="hljs-comment">//--------------------------------------------------------------------------------</span><br><span class="hljs-meta">`<span class="hljs-keyword">timescale</span> 1 ps / 1 ps</span><br><br><span class="hljs-keyword">module</span> add_4b_wrapper;<br>  <span class="hljs-keyword">reg</span> cin_0;<br>  <span class="hljs-keyword">reg</span> ia_0;<br>  <span class="hljs-keyword">reg</span> ia_1;<br>  <span class="hljs-keyword">reg</span> ia_2;<br>  <span class="hljs-keyword">reg</span> ia_3;<br>  <span class="hljs-keyword">reg</span> ib_0;<br>  <span class="hljs-keyword">reg</span> ib_1;<br>  <span class="hljs-keyword">reg</span> ib_2;<br>  <span class="hljs-keyword">reg</span> ib_3;<br>  <span class="hljs-keyword">wire</span> sum_0;<br>  <span class="hljs-keyword">wire</span> sum_1;<br>  <span class="hljs-keyword">wire</span> sum_2;<br>  <span class="hljs-keyword">wire</span> sum_3;<br>  <span class="hljs-keyword">wire</span> cout_0;<br><br>  add_4b tb<br>       (<span class="hljs-variable">.cin_0</span>(cin_0),<br>        <span class="hljs-variable">.cout_0</span>(cout_0),<br>        <span class="hljs-variable">.ia_0</span>(ia_0),<br>        <span class="hljs-variable">.ia_1</span>(ia_1),<br>        <span class="hljs-variable">.ia_2</span>(ia_2),<br>        <span class="hljs-variable">.ia_3</span>(ia_3),<br>        <span class="hljs-variable">.ib_0</span>(ib_0),<br>        <span class="hljs-variable">.ib_1</span>(ib_1),<br>        <span class="hljs-variable">.ib_2</span>(ib_2),<br>        <span class="hljs-variable">.ib_3</span>(ib_3),<br>        <span class="hljs-variable">.sum_0</span>(sum_0),<br>        <span class="hljs-variable">.sum_1</span>(sum_1),<br>        <span class="hljs-variable">.sum_2</span>(sum_2),<br>        <span class="hljs-variable">.sum_3</span>(sum_3));<br>   <br>   <span class="hljs-keyword">initial</span><br>        <span class="hljs-keyword">begin</span><br>            ia_0 &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>            ia_1 &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>            ia_2 &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>            ia_3 &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>            ib_0 &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>            ib_1 &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>            ib_2 &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>            ib_3 &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>            cin_0 &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>        <span class="hljs-keyword">end</span><br>        <br>    <span class="hljs-keyword">always</span> <br>        <span class="hljs-keyword">begin</span><br>            # <span class="hljs-number">10</span> ia_0 = ~ia_0;<br>        <span class="hljs-keyword">end</span>  <br>    <span class="hljs-keyword">always</span> <br>        <span class="hljs-keyword">begin</span><br>            # <span class="hljs-number">20</span> ia_1 = ~ia_1;<br>        <span class="hljs-keyword">end</span> <br>    <span class="hljs-keyword">always</span> <br>        <span class="hljs-keyword">begin</span><br>            # <span class="hljs-number">40</span> ia_2 = ~ia_2;<br>            # <span class="hljs-number">80</span> ia_3 = ~ia_3;<br>        <span class="hljs-keyword">end</span> <br>    <span class="hljs-keyword">always</span> <br>        <span class="hljs-keyword">begin</span><br>            # <span class="hljs-number">80</span> ia_3 = ~ia_3;<br>        <span class="hljs-keyword">end</span> <br>    <span class="hljs-keyword">always</span> <br>        <span class="hljs-keyword">begin</span><br>            # <span class="hljs-number">10</span> ib_0 = ~ib_0;<br>            # <span class="hljs-number">10</span> ib_1 = ~ib_1;<br>            # <span class="hljs-number">10</span> ib_2 = ~ib_2;<br>            # <span class="hljs-number">10</span> ib_3 = ~ib_3;<br>        <span class="hljs-keyword">end</span> <br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>硬件课程设计</category>
      
      <category>IP核调用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Verilog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Verilog-全加器-1位全加器代码与仿真</title>
    <link href="/2022/07/06/Verilog-1%E4%BD%8D%E5%85%A8%E5%8A%A0%E5%99%A8%E4%BB%A3%E7%A0%81%E4%B8%8E%E4%BB%BF%E7%9C%9F/"/>
    <url>/2022/07/06/Verilog-1%E4%BD%8D%E5%85%A8%E5%8A%A0%E5%99%A8%E4%BB%A3%E7%A0%81%E4%B8%8E%E4%BB%BF%E7%9C%9F/</url>
    
    <content type="html"><![CDATA[<h3 id="1位全加器"><a href="#1位全加器" class="headerlink" title="1位全加器"></a>1位全加器</h3><h4 id="Verilog-代码"><a href="#Verilog-代码" class="headerlink" title="Verilog 代码"></a>Verilog 代码</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Verilog"><span class="hljs-keyword">module</span> fa1(<br>    <span class="hljs-keyword">input</span> ia,<br>    <span class="hljs-keyword">input</span> ib,<br>    <span class="hljs-keyword">input</span> cin,<br>    <span class="hljs-keyword">output</span> sum,<br>    <span class="hljs-keyword">output</span> cout<br>    );<br>    <span class="hljs-keyword">assign</span> &#123;cout, sum&#125; = ia + ib + cin;<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h4 id="Verilog-仿真-代码"><a href="#Verilog-仿真-代码" class="headerlink" title="Verilog 仿真 代码"></a>Verilog 仿真 代码</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs Verilog"><span class="hljs-meta">`<span class="hljs-keyword">timescale</span> 1ns / 1ps</span><br><span class="hljs-keyword">module</span> fa1_tb;<br>    <span class="hljs-keyword">reg</span> a, b, cin;<br>    <span class="hljs-keyword">wire</span> sum, cout;<br>    <br>    fa1 tb(<br>        <span class="hljs-variable">.ia</span>(a),<br>        <span class="hljs-variable">.ib</span>(b),<br>        <span class="hljs-variable">.cin</span>(cin),<br>        <span class="hljs-variable">.sum</span>(sum),<br>        <span class="hljs-variable">.cout</span>(cout)<br>    );<br>    <br>    <span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span><br>        a = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">repeat</span>(<span class="hljs-number">10</span>)<br>            #<span class="hljs-number">10</span> a = <span class="hljs-built_in">$random</span>;<br>        <span class="hljs-keyword">end</span><br>    <br>    <span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span><br>        b = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">repeat</span>(<span class="hljs-number">10</span>)<br>            #<span class="hljs-number">10</span> b = <span class="hljs-built_in">$random</span>;<br>        <span class="hljs-keyword">end</span><br>        <br>    <span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span><br>        cin = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">repeat</span>(<span class="hljs-number">10</span>)<br>            #<span class="hljs-number">10</span> cin = <span class="hljs-built_in">$random</span>;<br>        <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>硬件课程设计</category>
      
      <category>基本组合电路</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Verilog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Verilog-全加器-1位半加器代码与仿真</title>
    <link href="/2022/07/06/Verilog-1%E4%BD%8D%E5%8D%8A%E5%8A%A0%E5%99%A8%E4%BB%A3%E7%A0%81%E4%B8%8E%E4%BB%BF%E7%9C%9F/"/>
    <url>/2022/07/06/Verilog-1%E4%BD%8D%E5%8D%8A%E5%8A%A0%E5%99%A8%E4%BB%A3%E7%A0%81%E4%B8%8E%E4%BB%BF%E7%9C%9F/</url>
    
    <content type="html"><![CDATA[<h3 id="1位半加器"><a href="#1位半加器" class="headerlink" title="1位半加器"></a>1位半加器</h3><h4 id="Verilog-代码"><a href="#Verilog-代码" class="headerlink" title="Verilog 代码"></a>Verilog 代码</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Verilog"><span class="hljs-keyword">module</span> ha1(<br>    <span class="hljs-keyword">input</span> ia,<br>    <span class="hljs-keyword">input</span> ib,<br>    <span class="hljs-keyword">output</span> sum,<br>    <span class="hljs-keyword">output</span> cout<br>    );<br>    <br>    <span class="hljs-keyword">assign</span> &#123;cout, sum&#125; = ia + ib;<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h4 id="Verilog-仿真-代码"><a href="#Verilog-仿真-代码" class="headerlink" title="Verilog 仿真 代码"></a>Verilog 仿真 代码</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs Verilog"><span class="hljs-meta">`<span class="hljs-keyword">timescale</span> 1ns / 1ps</span><br><span class="hljs-keyword">module</span> ha1_tb;<br>    <span class="hljs-keyword">reg</span> a, b;<br>    <span class="hljs-keyword">wire</span> sum, cout;<br>    <br>    ha1 tb(<br>        <span class="hljs-variable">.ia</span>(a),<br>        <span class="hljs-variable">.ib</span>(b),<br>        <span class="hljs-variable">.sum</span>(sum),<br>        <span class="hljs-variable">.cout</span>(cout)<br>    );<br>    <br>    <span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span><br>        a = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">repeat</span>(<span class="hljs-number">10</span>)<br>            #<span class="hljs-number">10</span> a = <span class="hljs-built_in">$random</span>;<br>        <span class="hljs-keyword">end</span><br>        <br>    <span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span><br>        b = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">repeat</span>(<span class="hljs-number">10</span>)<br>            #<span class="hljs-number">10</span> b = <span class="hljs-built_in">$random</span>;<br>        <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>硬件课程设计</category>
      
      <category>基本组合电路</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Verilog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>P1510.精卫填海</title>
    <link href="/2022/07/05/P1510-%E7%B2%BE%E5%8D%AB%E5%A1%AB%E6%B5%B7/"/>
    <url>/2022/07/05/P1510-%E7%B2%BE%E5%8D%AB%E5%A1%AB%E6%B5%B7/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://www.luogu.com.cn/problem/P1510">洛谷链接</a></p><p>发鸠之山，其上多柘木。有鸟焉，其状如乌，文首，白喙，赤足，名曰精卫，其名自詨。是炎帝之少女，名曰女娃。女娃游于东海，溺而不返，故为精卫。常衔西山之木石，以堙于东海。——《山海经》</p><p>精卫终于快把东海填平了！只剩下了最后的一小片区域了。同时，西山上的木石也已经不多了。精卫能把东海填平吗？</p><p>事实上，东海未填平的区域还需要至少体积为v的木石才可以填平，而西山上的木石还剩下n块，每块的体积和把它衔到东海需要的体力分别为k和m。精卫已经填海填了这么长时间了，她也很累了，她还剩下的体力为c。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>输入文件的第一行是三个整数：v、n、c。</p><p>从第二行到第n+1行分别为每块木石的体积和把它衔到东海需要的体力。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出文件只有一行，如果精卫能把东海填平，则输出她把东海填平后剩下的最大的体力，否则输出’Impossible’（不带引号）。</p><h3 id="样例1"><a href="#样例1" class="headerlink" title="样例1"></a>样例1</h3><h4 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs TEXT">100 2 10<br>50 5<br>50 5<br></code></pre></td></tr></table></figure><h4 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">0<br></code></pre></td></tr></table></figure><h3 id="样例2"><a href="#样例2" class="headerlink" title="样例2"></a>样例2</h3><h4 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入"></a>样例输入</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs TEXT">10 2 1<br>50 5<br>10 2<br></code></pre></td></tr></table></figure><h4 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出"></a>样例输出</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs TEXT">Impossible<br></code></pre></td></tr></table></figure><h3 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h3><p>【数据范围】</p><p>对于20%的数据，0&lt;n&lt;=50。</p><p>对于50%的数据，0&lt;n&lt;=1000。</p><p>对于100%的数据，0&lt;n&lt;=10000，所有读入的数均属于[0,10000]，最后结果&lt;=c。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> need, n, power, vi, pi, i, j, k, f[<span class="hljs-number">11000</span>];<br><span class="hljs-type">bool</span> z;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    z = <span class="hljs-literal">false</span>;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;need, &amp;n, &amp;power);<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;vi, &amp;pi);<br>        <span class="hljs-keyword">for</span> (j = power; j &gt;= pi; j--) <br>            f[j] = <span class="hljs-built_in">max</span>(f[j], f[j - pi] + vi);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt;= power; j++) <br>        <span class="hljs-keyword">if</span> (f[j] &gt;= need)<br>        &#123;<br>            k = j;<br>            z = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    <span class="hljs-keyword">if</span> (z == <span class="hljs-literal">false</span>)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Impossible&quot;</span>); <br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, power - k);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>洛谷</category>
      
      <category>动态规划</category>
      
    </categories>
    
    
    <tags>
      
      <tag>动态规划</tag>
      
      <tag>洛谷</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>P1048.[NOIP2005普及组]采药</title>
    <link href="/2022/07/05/P1048-NOIP2005%E6%99%AE%E5%8F%8A%E7%BB%84-%E9%87%87%E8%8D%AF/"/>
    <url>/2022/07/05/P1048-NOIP2005%E6%99%AE%E5%8F%8A%E7%BB%84-%E9%87%87%E8%8D%AF/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://www.luogu.com.cn/problem/P1048">洛谷链接</a></p><p>辰辰是个天资聪颖的孩子，他的梦想是成为世界上最伟大的医师。为此，他想拜附近最有威望的医师为师。医师为了判断他的资质，给他出了一个难题。医师把他带到一个到处都是草药的山洞里对他说：“孩子，这个山洞里有一些不同的草药，采每一株都需要一些时间，每一株也有它自身的价值。我会给你一段时间，在这段时间里，你可以采到一些草药。如果你是一个聪明的孩子，你应该可以让采到的草药的总价值最大。”</p><p>如果你是辰辰，你能完成这个任务吗？</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行有 $2$ 个整数 $T$（$1 \le T \le 1000$）和 $M$（$1 \le  M \le 100$），用一个空格隔开，$T$ 代表总共能够用来采药的时间，$M$ 代表山洞里的草药的数目。</p><p>接下来的 $M$ 行每行包括两个在 $1$ 到 $100$ 之间（包括 $1$ 和 $100$）的整数，分别表示采摘某株草药的时间和这株草药的价值。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出在规定的时间内可以采到的草药的最大总价值。</p><h3 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h3><h4 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs TEXT">70 3<br>71 100<br>69 1<br>1 2<br></code></pre></td></tr></table></figure><h4 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">3<br></code></pre></td></tr></table></figure><h3 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h3><p><strong>数据范围</strong></p><p>对于 $30%$ 的数据，$M \le 10$；<br>对于全部的数据，$M \le 100$。</p><p><strong>题目来源</strong></p><p>NOIP 2005 普及组第三题</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> t,m;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;t,&amp;m);<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">drug</span>(m,<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(<span class="hljs-number">2</span>));<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">dp</span><span class="hljs-params">(t+<span class="hljs-number">1</span>,<span class="hljs-number">0</span>)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; m;i++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>,&amp;drug[i][<span class="hljs-number">0</span>],&amp;drug[i][<span class="hljs-number">1</span>]);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; m;i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = t;j &gt;= drug[i][<span class="hljs-number">0</span>];j--)<br>        &#123;<br>            dp[j] = <span class="hljs-built_in">max</span>(dp[j],dp[j-drug[i][<span class="hljs-number">0</span>]]+drug[i][<span class="hljs-number">1</span>]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,dp[t]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>洛谷</category>
      
      <category>动态规划</category>
      
    </categories>
    
    
    <tags>
      
      <tag>动态规划</tag>
      
      <tag>洛谷</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>P1049.[NOIP2001普及组]装箱问题</title>
    <link href="/2022/07/05/P1049-NOIP2001%E6%99%AE%E5%8F%8A%E7%BB%84-%E8%A3%85%E7%AE%B1%E9%97%AE%E9%A2%98/"/>
    <url>/2022/07/05/P1049-NOIP2001%E6%99%AE%E5%8F%8A%E7%BB%84-%E8%A3%85%E7%AE%B1%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://www.luogu.com.cn/problem/P1049">洛谷链接</a></p><p>有一个箱子容量为 $V$，同时有 $n$ 个物品，每个物品有一个体积。</p><p>现在从 $n$ 个物品中，任取若干个装入箱内（也可以不取），使箱子的剩余空间最小。输出这个最小值。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行共一个整数 $V$，表示箱子容量。</p><p>第二行共一个整数 $n$，表示物品总数。</p><p>接下来 $n$ 行，每行有一个正整数，表示第 $i$ 个物品的体积。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>共一行一个整数，表示箱子最小剩余空间。</p><h3 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h3><h4 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs">24<br>6<br>8<br>3<br>12<br>7<br>9<br>7<br></code></pre></td></tr></table></figure><h4 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">0<br></code></pre></td></tr></table></figure><h3 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h3><p>对于 $100%$ 数据，满足 $0&lt;n \le 30$，$1 \le V \le 20000$。</p><p><strong>【题目来源】</strong></p><p>NOIP 2001 普及组第四题</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> dp[<span class="hljs-number">20001</span>];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> v, n, c[<span class="hljs-number">31</span>], i, j, ans = <span class="hljs-number">0</span>;<br>    cin &gt;&gt; v &gt;&gt; n;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        cin &gt;&gt; c[i];<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-keyword">for</span> (j = v; j &gt;= c[i]; j--)<br>                dp[j] = <span class="hljs-built_in">max</span>(dp[j], dp[j - c[i]] + c[i]);<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt;= v; i++)<br>        ans = <span class="hljs-built_in">max</span>(ans, dp[i]);<br>    cout &lt;&lt; v - ans;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>洛谷</category>
      
      <category>动态规划</category>
      
    </categories>
    
    
    <tags>
      
      <tag>动态规划</tag>
      
      <tag>洛谷</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>P1420.最长连号</title>
    <link href="/2022/07/05/P1420-%E6%9C%80%E9%95%BF%E8%BF%9E%E5%8F%B7/"/>
    <url>/2022/07/05/P1420-%E6%9C%80%E9%95%BF%E8%BF%9E%E5%8F%B7/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://www.luogu.com.cn/problem/P1420">洛谷链接</a></p><p>输入长度为 $n$ 的一个正整数序列，要求输出序列中最长连号的长度。</p><p>连号指在序列中，从小到大的连续自然数。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行，一个整数 $n$。</p><p>第二行，$n$ 个整数 $a_i$，之间用空格隔开。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>一个数，最长连号的个数。</p><h3 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h3><h4 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs TEXT">10<br>1 5 6 2 3 4 5 6 8 9<br></code></pre></td></tr></table></figure><h4 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">5<br></code></pre></td></tr></table></figure><h3 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h3><h4 id="数据规模与约定"><a href="#数据规模与约定" class="headerlink" title="数据规模与约定"></a>数据规模与约定</h4><p>对于 $100%$% 的数据，保证 $1 \leq n \leq 10^4$，$1 \leq a_i \leq 10^9$。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><blockquote><p>个人思路 ：dp[i]存放目前 0-i 中最长连号</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n,result = <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">nums</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span></span>;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">dp</span><span class="hljs-params">(n + <span class="hljs-number">1</span>, <span class="hljs-number">1</span>)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;nums[i]);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (nums[i - <span class="hljs-number">1</span>] == nums[i] - <span class="hljs-number">1</span>)<br>        &#123;<br>            dp[i] = <span class="hljs-built_in">max</span>(dp[i], dp[i - <span class="hljs-number">1</span>] + <span class="hljs-number">1</span>);<br>            result = <span class="hljs-built_in">max</span>(result,dp[i]);<br>        &#125;         <br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, result);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>洛谷</category>
      
      <category>动态规划</category>
      
    </categories>
    
    
    <tags>
      
      <tag>动态规划</tag>
      
      <tag>洛谷</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>354.俄罗斯套娃信封问题</title>
    <link href="/2022/07/04/354-%E4%BF%84%E7%BD%97%E6%96%AF%E5%A5%97%E5%A8%83%E4%BF%A1%E5%B0%81%E9%97%AE%E9%A2%98/"/>
    <url>/2022/07/04/354-%E4%BF%84%E7%BD%97%E6%96%AF%E5%A5%97%E5%A8%83%E4%BF%A1%E5%B0%81%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode.cn/problems/russian-doll-envelopes/description/">力扣链接</a></p><p>给你一个二维整数数组 <code>envelopes</code> ，其中 <code>envelopes[i] = [w<sub>i</sub>, h<sub>i</sub>]</code> ，表示第 <code>i</code> 个信封的宽度和高度。</p><p>当另一个信封的宽度和高度都比这个信封大的时候，这个信封就可以放进另一个信封里，如同俄罗斯套娃一样。</p><p>请计算 <strong>最多能有多少个</strong> 信封能组成一组“俄罗斯套娃”信封（即可以把一个信封放到另一个信封里面）。</p><p><strong>注意</strong>：不允许旋转信封。</p>&nbsp;<p><strong>示例 1：</strong></p><pre><strong>输入：</strong>envelopes = [[5,4],[6,4],[6,7],[2,3]]<strong>输出：</strong>3<strong>解释：</strong>最多信封的个数为 <code>3, 组合为: </code>[2,3] =&gt; [5,4] =&gt; [6,7]。</pre><p><strong>示例 2：</strong></p><pre><strong>输入：</strong>envelopes = [[1,1],[1,1],[1,1]]<strong>输出：</strong>1</pre><p>&nbsp;</p><p><strong>提示：</strong></p><ul>    <li><code>1 &lt;= envelopes.length &lt;= 10<sup>5</sup></code></li>    <li><code>envelopes[i].length == 2</code></li>    <li><code>1 &lt;= w<sub>i</sub>, h<sub>i</sub> &lt;= 10<sup>5</sup></code></li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><blockquote><p>这题使用动规会超时，但也可以试着写写</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxEnvelopes</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; envelopes)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = envelopes.<span class="hljs-built_in">size</span>();<br><br>        <span class="hljs-comment">// 首先执行排序，按照宽度排序，小的在前大的在后</span><br>        <span class="hljs-built_in">sort</span>(envelopes.<span class="hljs-built_in">begin</span>(), envelopes.<span class="hljs-built_in">end</span>(), [](vector&lt;<span class="hljs-type">int</span>&gt;&amp; a, vector&lt;<span class="hljs-type">int</span>&gt;&amp; b)&#123;<br>            <span class="hljs-keyword">if</span>(a[<span class="hljs-number">0</span>] == b[<span class="hljs-number">0</span>])&#123;<br>                <span class="hljs-comment">// 对于宽度相等的信封，根据高度逆序，大的在前小的在后</span><br>                <span class="hljs-keyword">return</span> a[<span class="hljs-number">1</span>] &gt; b[<span class="hljs-number">1</span>];<br>            &#125;<br>            <span class="hljs-keyword">return</span> a[<span class="hljs-number">0</span>] &lt; b[<span class="hljs-number">0</span>];<br>        &#125;);<br><br>        <span class="hljs-comment">// 预开空间,初始值为排序后第一个信封的高度</span><br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">dp</span><span class="hljs-params">(<span class="hljs-number">1</span>, envelopes[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>])</span></span>;<br><br>        <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">// 计算最长上升子序列</span><br>        <span class="hljs-comment">// 第0个元素已默认放入dp，因此从1开始遍历</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++)&#123;<br>            <span class="hljs-comment">// 搜索合适的更新位置，使用二分模板</span><br>            <span class="hljs-comment">// 额外引入一个index来记录满足条件合法的值</span><br>            <span class="hljs-comment">// 有的人的模板中，只有l和r两个变量，但是那个边界条件我总是记不住</span><br>            <span class="hljs-comment">// 引入一个新的变量，个人感觉逻辑更明朗</span><br>            <span class="hljs-type">int</span> l = <span class="hljs-number">0</span>, r = dp.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;<br>            <span class="hljs-type">int</span> index = <span class="hljs-number">-1</span>;<br>            <span class="hljs-keyword">while</span>(l &lt;= r)&#123;<br>                <span class="hljs-comment">// mid这里用l加一半的形式，不容易溢出int</span><br>                <span class="hljs-type">int</span> mid = l + (r - l) / <span class="hljs-number">2</span>;<br>                <span class="hljs-keyword">if</span>(dp[mid] &gt;= envelopes[i][<span class="hljs-number">1</span>])&#123;<br>                    <span class="hljs-comment">// 我们要找的是dp数组中第一个大于等于当前h的位置</span><br>                    <span class="hljs-comment">// 因此在这里更新index值</span><br>                    index = mid;<br>                    r = mid - <span class="hljs-number">1</span>;<br>                &#125;<br>                <span class="hljs-keyword">else</span>&#123;<br>                    l = mid + <span class="hljs-number">1</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(index == <span class="hljs-number">-1</span>)&#123;<br>                dp.<span class="hljs-built_in">emplace_back</span>(envelopes[i][<span class="hljs-number">1</span>]);<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                dp[index] = envelopes[i][<span class="hljs-number">1</span>];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dp.<span class="hljs-built_in">size</span>();<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Leetcode</category>
      
      <category>动态规划</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>动态规划</tag>
      
      <tag>二分法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>300.最长递增子序列</title>
    <link href="/2022/07/04/300-%E6%9C%80%E9%95%BF%E9%80%92%E5%A2%9E%E5%AD%90%E5%BA%8F%E5%88%97/"/>
    <url>/2022/07/04/300-%E6%9C%80%E9%95%BF%E9%80%92%E5%A2%9E%E5%AD%90%E5%BA%8F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode.cn/problems/longest-increasing-subsequence/">力扣链接</a></p><p>给你一个整数数组 <code>nums</code> ，找到其中最长严格递增子序列的长度。</p><p><strong>子序列&nbsp;</strong>是由数组派生而来的序列，删除（或不删除）数组中的元素而不改变其余元素的顺序。例如，<code>[3,6,2,7]</code> 是数组 <code>[0,3,1,6,2,2,7]</code> 的子序列。</p>&nbsp;<p><strong>示例 1：</strong></p><pre><strong>输入：</strong>nums = [10,9,2,5,3,7,101,18]<strong>输出：</strong>4<strong>解释：</strong>最长递增子序列是 [2,3,7,101]，因此长度为 4 。</pre><p><strong>示例 2：</strong></p><pre><strong>输入：</strong>nums = [0,1,0,3,2,3]<strong>输出：</strong>4</pre><p><strong>示例 3：</strong></p><pre><strong>输入：</strong>nums = [7,7,7,7,7,7,7]<strong>输出：</strong>1</pre><p>&nbsp;</p><p><strong>提示：</strong></p><ul>    <li><code>1 &lt;= nums.length &lt;= 2500</code></li>    <li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li></ul><p>&nbsp;</p><p><b>进阶：</b></p><ul>    <li>你能将算法的时间复杂度降低到&nbsp;<code>O(n log(n))</code> 吗?</li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lengthOfLIS</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;nums)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> result = <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> n = nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">dp</span><span class="hljs-params">(n + <span class="hljs-number">1</span>, <span class="hljs-number">1</span>)</span></span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt; n;i++)<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;j &lt; i;j++)<br>                <span class="hljs-keyword">if</span> (nums[i] &gt; nums[j])<br>                &#123;<br>                    dp[i] = <span class="hljs-built_in">max</span>(dp[i],dp[j]+<span class="hljs-number">1</span>);<br>                    result = result &lt; dp[i] ? dp[i] : result;<br>                &#125;<br>                    <br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Leetcode</category>
      
      <category>动态规划</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>动态规划</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>322.零钱兑换</title>
    <link href="/2022/07/04/322-%E9%9B%B6%E9%92%B1%E5%85%91%E6%8D%A2/"/>
    <url>/2022/07/04/322-%E9%9B%B6%E9%92%B1%E5%85%91%E6%8D%A2/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode.cn/problems/coin-change/">力扣链接</a></p><p>给你一个整数数组 <code>coins</code> ，表示不同面额的硬币；以及一个整数 <code>amount</code> ，表示总金额。</p><p>计算并返回可以凑成总金额所需的 <strong>最少的硬币个数</strong> 。如果没有任何一种硬币组合能组成总金额，返回&nbsp;<code>-1</code> 。</p><p>你可以认为每种硬币的数量是无限的。</p><p>&nbsp;</p><p><strong>示例&nbsp;1：</strong></p><pre><strong>输入：</strong>coins = <code>[1, 2, 5]</code>, amount = <code>11</code><strong>输出：</strong><code>3</code> <strong>解释：</strong>11 = 5 + 5 + 1</pre><p><strong>示例 2：</strong></p><pre><strong>输入：</strong>coins = <code>[2]</code>, amount = <code>3</code><strong>输出：</strong>-1</pre><p><strong>示例 3：</strong></p><pre><strong>输入：</strong>coins = [1], amount = 0<strong>输出：</strong>0</pre><p>&nbsp;</p><p><strong>提示：</strong></p><ul>    <li><code>1 &lt;= coins.length &lt;= 12</code></li>    <li><code>1 &lt;= coins[i] &lt;= 2<sup>31</sup> - 1</code></li>    <li><code>0 &lt;= amount &lt;= 10<sup>4</sup></code></li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><blockquote><p>dp数组以及下标：总金额为i所需最少硬币</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">coinChange</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;coins, <span class="hljs-type">int</span> amount)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">long</span> <span class="hljs-type">long</span>&gt; <span class="hljs-title">dp</span><span class="hljs-params">(amount + <span class="hljs-number">1</span>, INT_MAX)</span></span>;<br>        dp[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>; <span class="hljs-comment">// dp[i]:换到面值i所用的最小数量</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> coin : coins)<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= amount; i++)<br>                <span class="hljs-keyword">if</span> (coin &lt;= i)<br>                    dp[i] = <span class="hljs-built_in">min</span>(dp[i], dp[i - coin] + <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">return</span> dp[amount] == INT_MAX ? <span class="hljs-number">-1</span> : dp[amount];<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Leetcode</category>
      
      <category>动态规划</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>动态规划</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>990.等式方程的可满足性</title>
    <link href="/2022/07/03/990-%E7%AD%89%E5%BC%8F%E6%96%B9%E7%A8%8B%E7%9A%84%E5%8F%AF%E6%BB%A1%E8%B6%B3%E6%80%A7/"/>
    <url>/2022/07/03/990-%E7%AD%89%E5%BC%8F%E6%96%B9%E7%A8%8B%E7%9A%84%E5%8F%AF%E6%BB%A1%E8%B6%B3%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode.cn/problems/satisfiability-of-equality-equations/description/">力扣链接</a></p><p>给定一个由表示变量之间关系的字符串方程组成的数组，每个字符串方程 <code>equations[i]</code> 的长度为 <code>4</code>，并采用两种不同的形式之一：<code>&quot;a==b&quot;</code> 或&nbsp;<code>&quot;a!=b&quot;</code>。在这里，a 和 b 是小写字母（不一定不同），表示单字母变量名。</p><p>只有当可以将整数分配给变量名，以便满足所有给定的方程时才返回&nbsp;<code>true</code>，否则返回 <code>false</code>。&nbsp;</p><p>&nbsp;</p><ol></ol><p><strong>示例 1：</strong></p><pre><strong>输入：</strong>[&quot;a==b&quot;,&quot;b!=a&quot;]<strong>输出：</strong>false<strong>解释：</strong>如果我们指定，a = 1 且 b = 1，那么可以满足第一个方程，但无法满足第二个方程。没有办法分配变量同时满足这两个方程。</pre><p><strong>示例 2：</strong></p><pre><strong>输入：</strong>[&quot;b==a&quot;,&quot;a==b&quot;]<strong>输出：</strong>true<strong>解释：</strong>我们可以指定 a = 1 且 b = 1 以满足满足这两个方程。</pre><p><strong>示例 3：</strong></p><pre><strong>输入：</strong>[&quot;a==b&quot;,&quot;b==c&quot;,&quot;a==c&quot;]<strong>输出：</strong>true</pre><p><strong>示例 4：</strong></p><pre><strong>输入：</strong>[&quot;a==b&quot;,&quot;b!=c&quot;,&quot;c==a&quot;]<strong>输出：</strong>false</pre><p><strong>示例 5：</strong></p><pre><strong>输入：</strong>[&quot;c==c&quot;,&quot;b==d&quot;,&quot;x!=z&quot;]<strong>输出：</strong>true</pre><p>&nbsp;</p><p><strong>提示：</strong></p><ol>    <li><code>1 &lt;= equations.length &lt;= 500</code></li>    <li><code>equations[i].length == 4</code></li>    <li><code>equations[i][0]</code> 和&nbsp;<code>equations[i][3]</code>&nbsp;是小写字母</li>    <li><code>equations[i][1]</code> 要么是&nbsp;<code>&#39;=&#39;</code>，要么是&nbsp;<code>&#39;!&#39;</code></li>    <li><code>equations[i][2]</code>&nbsp;是&nbsp;<code>&#39;=&#39;</code></li></ol><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><h4 id="测试数据"><a href="#测试数据" class="headerlink" title="测试数据"></a>测试数据</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs TEXT">[&quot;f==a&quot;,&quot;a==b&quot;,&quot;f!=e&quot;,&quot;a==c&quot;,&quot;b==e&quot;,&quot;c==f&quot;]<br></code></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs TEXT">[&quot;t!=b&quot;,&quot;h!=u&quot;,&quot;l!=y&quot;,&quot;j==j&quot;,&quot;w==s&quot;,&quot;p==q&quot;,&quot;r!=t&quot;,&quot;r==i&quot;,&quot;e!=y&quot;,&quot;v==s&quot;,&quot;i!=p&quot;,&quot;h!=i&quot;,&quot;i==o&quot;,&quot;e==e&quot;,&quot;j!=h&quot;,&quot;y!=s&quot;,&quot;k==g&quot;,&quot;c==f&quot;,&quot;n==v&quot;,&quot;a==w&quot;,&quot;d==w&quot;,&quot;f!=e&quot;,&quot;v==s&quot;,&quot;w!=g&quot;,&quot;g!=s&quot;,&quot;j!=d&quot;,&quot;c!=u&quot;,&quot;y!=n&quot;,&quot;q!=j&quot;,&quot;d!=x&quot;,&quot;l==m&quot;,&quot;q!=b&quot;,&quot;r!=n&quot;,&quot;j!=o&quot;,&quot;w!=q&quot;,&quot;t!=e&quot;,&quot;a!=m&quot;,&quot;m!=j&quot;,&quot;j!=b&quot;,&quot;v!=w&quot;]<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">int</span> fa[<span class="hljs-number">26</span>];<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">root</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(n != fa[n])&#123;<br>            fa[n] = fa[fa[n]]; <span class="hljs-comment">// 迭代实现 路径压缩</span><br>            n = fa[n];<br>            <span class="hljs-comment">// fa[n] = root(fa[n]); // 递归 路径压缩</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> fa[n];<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">equationsPossible</span><span class="hljs-params">(vector&lt;string&gt; &amp;equations)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">26</span>; i++)<br>            fa[i] = i;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> e : equations)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (e[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;=&#x27;</span>)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (e[<span class="hljs-number">0</span>] &lt; e[<span class="hljs-number">3</span>])<br>                    fa[<span class="hljs-built_in">root</span>(fa[e[<span class="hljs-number">3</span>] - <span class="hljs-string">&#x27;a&#x27;</span>])] = fa[e[<span class="hljs-number">0</span>] - <span class="hljs-string">&#x27;a&#x27;</span>];<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e[<span class="hljs-number">0</span>] &gt; e[<span class="hljs-number">3</span>])<br>                    fa[<span class="hljs-built_in">root</span>(fa[e[<span class="hljs-number">0</span>] - <span class="hljs-string">&#x27;a&#x27;</span>])] = fa[e[<span class="hljs-number">3</span>] - <span class="hljs-string">&#x27;a&#x27;</span>];<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> e : equations)<br>            <span class="hljs-keyword">if</span> (e[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;!&#x27;</span>)<br>                <span class="hljs-keyword">if</span> (<span class="hljs-built_in">root</span>(e[<span class="hljs-number">0</span>] - <span class="hljs-string">&#x27;a&#x27;</span>) == <span class="hljs-built_in">root</span>(e[<span class="hljs-number">3</span>] - <span class="hljs-string">&#x27;a&#x27;</span>))<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Leetcode</category>
      
      <category>哈希表</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>哈希表</tag>
      
      <tag>并查集</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>4268.性感素数</title>
    <link href="/2022/07/03/4268-%E6%80%A7%E6%84%9F%E7%B4%A0%E6%95%B0/"/>
    <url>/2022/07/03/4268-%E6%80%A7%E6%84%9F%E7%B4%A0%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://www.acwing.com/problem/content/4271/">AcWing链接</a></p><p>“性感素数 ”是指形如 <code>(p,p+6)</code> 这样的一对素数。</p><p>之所以叫这个名字，是因为拉丁语管“六”叫“sex”（即英语的“性感”）。</p><p>现给定一个整数，请你判断其是否为一个性感素数。</p><span id="more"></span><p><strong>输入格式</strong></p><p>输入在一行中给出一个正整数 N。</p><p><strong>输出格式</strong></p><p>若 N 是一个性感素数，则在一行中输出 Yes，并在第二行输出与 N 配对的另一个性感素数（若这样的数不唯一，输出较小的那个）。</p><p>若 N 不是性感素数，则在一行中输出 No，然后在第二行输出大于 N 的最小性感素数。</p><p><strong>数据范围</strong></p><p><code>1 ≤ N ≤ 10^8</code></p><p><strong>输入样例1</strong>：</p><pre><code class="hljs">47</code></pre><p><strong>输出样例1</strong>：</p><pre><code class="hljs">Yes41</code></pre><p><strong>输入样例2</strong>：</p><pre><code class="hljs">21</code></pre><p><strong>输出样例2</strong>：</p><pre><code class="hljs">No23</code></pre><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><blockquote><p>并非最优解，仅为本人作答答案！</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">is</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (n &lt; <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n/i; i++)<br>        <span class="hljs-keyword">if</span> (n % i == <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> num;<br>    cin &gt;&gt; num;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">is</span>(num) &amp;&amp; <span class="hljs-built_in">is</span>(num - <span class="hljs-number">6</span>))<br>    &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;Yes&quot;</span> &lt;&lt; endl;<br>        cout &lt;&lt; num - <span class="hljs-number">6</span> &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">is</span>(num) &amp;&amp; <span class="hljs-built_in">is</span>(num + <span class="hljs-number">6</span>))<br>    &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;Yes&quot;</span> &lt;&lt; endl;<br>        cout &lt;&lt; num + <span class="hljs-number">6</span> &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;No&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">while</span> (!(<span class="hljs-built_in">is</span>(num) &amp;&amp; <span class="hljs-built_in">is</span>(num - <span class="hljs-number">6</span>) || <span class="hljs-built_in">is</span>(num) &amp;&amp; <span class="hljs-built_in">is</span>(num + <span class="hljs-number">6</span>)))<br>        &#123;<br>            num++;<br>            <span class="hljs-keyword">if</span> (num%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>)<br>                num++;<br>        &#125;<br>        cout &lt;&lt; num &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>AcWing</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AcWing</tag>
      
      <tag>暑假每日一题2022</tag>
      
      <tag>质数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>4269.校庆</title>
    <link href="/2022/07/03/4269-%E6%A0%A1%E5%BA%86/"/>
    <url>/2022/07/03/4269-%E6%A0%A1%E5%BA%86/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://www.acwing.com/problem/content/4272/">AcWing链接</a></p><p>2019 年浙江大学将要庆祝成立 122 周年。<br>为了准备校庆，校友会收集了所有校友的身份证号。<br>现在需要请你编写程序，根据来参加校庆的所有人士的身份证号，统计来了多少校友。</p><span id="more"></span><p><strong>输入格式</strong></p><p>输入在第一行给出正整数 N。</p><p>随后 N 行，每行给出一位校友的身份证号（18 位由数字和大写字母 X 组成的字符串）。题目保证身份证号不重复。</p><p>随后给出前来参加校庆的所有人士的信息：</p><p>首先是一个正整数 M。</p><p>随后 M 行，每行给出一位人士的身份证号。题目保证身份证号不重复。</p><p><strong>输出格式</strong></p><p>首先在第一行输出参加校庆的校友的人数。</p><p>然后在第二行输出最年长的校友的身份证号 —— 注意身份证第 7−14 位给出的是 yyyymmdd 格式的生日。</p><p>如果没有校友来，则在第二行输出最年长的来宾的身份证号。题目保证这样的校友或来宾必是唯一的。</p><p><strong>数据范围</strong></p><p><code>1 ≤ N,M ≤ 10^5</code></p><p><strong>输入样例</strong>：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs TEXT">5<br>372928196906118710<br>610481197806202213<br>440684198612150417<br>13072819571002001X<br>150702193604190912<br>6<br>530125197901260019<br>150702193604190912<br>220221196701020034<br>610481197806202213<br>440684198612150417<br>370205198709275042<br></code></pre></td></tr></table></figure><p><strong>输出样例</strong>：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">3<br>150702193604190912<br></code></pre></td></tr></table></figure><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><blockquote><p>并非最优解，仅为本人作答答案！</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unordered_map&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    unordered_map&lt;string, <span class="hljs-type">int</span>&gt; cj;<br>    <span class="hljs-type">int</span> xy, all, num = <span class="hljs-number">0</span>;<br>    string old, old2, year = <span class="hljs-string">&quot;99999999&quot;</span>, year2 = <span class="hljs-string">&quot;99999999&quot;</span>;<br>    cin &gt;&gt; xy;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; xy; i++)<br>    &#123;<br>        string tmp;<br>        cin &gt;&gt; tmp;<br>        cj[tmp]++;<br>    &#125;<br>    cin &gt;&gt; all;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; all; i++)<br>    &#123;<br>        string tmp, y;<br>        cin &gt;&gt; tmp;<br>        y = tmp.<span class="hljs-built_in">substr</span>(<span class="hljs-number">6</span>, <span class="hljs-number">8</span>);<br>        <span class="hljs-keyword">if</span> (y &lt; year2)<br>        &#123;<br>            year2 = y;<br>            old2 = tmp;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (cj[tmp] == <span class="hljs-number">1</span>)<br>        &#123;<br>            num++;<br>            <span class="hljs-keyword">if</span> (y &lt; year)<br>            &#123;<br>                year = y;<br>                old = tmp;<br>            &#125;<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; num &lt;&lt; endl;<br>    <span class="hljs-keyword">if</span> (num &gt; <span class="hljs-number">0</span>)<br>        cout &lt;&lt; old &lt;&lt; endl;<br>    <span class="hljs-keyword">else</span><br>        cout &lt;&lt; old2 &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>AcWing</category>
      
      <category>哈希表</category>
      
    </categories>
    
    
    <tags>
      
      <tag>哈希表</tag>
      
      <tag>AcWing</tag>
      
      <tag>暑假每日一题2022</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>13.罗马数字转整数</title>
    <link href="/2022/07/03/13-%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97%E8%BD%AC%E6%95%B4%E6%95%B0/"/>
    <url>/2022/07/03/13-%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97%E8%BD%AC%E6%95%B4%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode.cn/problems/roman-to-integer/">力扣链接</a></p><p>罗马数字包含以下七种字符:&nbsp;<code>I</code>，&nbsp;<code>V</code>，&nbsp;<code>X</code>，&nbsp;<code>L</code>，<code>C</code>，<code>D</code>&nbsp;和&nbsp;<code>M</code>。</p><pre><strong>字符</strong>          <strong>数值</strong>I             1V             5X             10L             50C             100D             500M             1000</pre><p>例如， 罗马数字 <code>2</code> 写做&nbsp;<code>II</code>&nbsp;，即为两个并列的 1 。<code>12</code> 写做&nbsp;<code>XII</code>&nbsp;，即为&nbsp;<code>X</code>&nbsp;+&nbsp;<code>II</code>&nbsp;。 <code>27</code> 写做&nbsp;&nbsp;<code>XXVII</code>, 即为&nbsp;<code>XX</code>&nbsp;+&nbsp;<code>V</code>&nbsp;+&nbsp;<code>II</code>&nbsp;。</p><p>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做&nbsp;<code>IIII</code>，而是&nbsp;<code>IV</code>。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为&nbsp;<code>IX</code>。这个特殊的规则只适用于以下六种情况：</p><ul>    <li><code>I</code>&nbsp;可以放在&nbsp;<code>V</code>&nbsp;(5) 和&nbsp;<code>X</code>&nbsp;(10) 的左边，来表示 4 和 9。</li>    <li><code>X</code>&nbsp;可以放在&nbsp;<code>L</code>&nbsp;(50) 和&nbsp;<code>C</code>&nbsp;(100) 的左边，来表示 40 和&nbsp;90。&nbsp;</li>    <li><code>C</code>&nbsp;可以放在&nbsp;<code>D</code>&nbsp;(500) 和&nbsp;<code>M</code>&nbsp;(1000) 的左边，来表示&nbsp;400 和&nbsp;900。</li></ul><p>给定一个罗马数字，将其转换成整数。</p><p>&nbsp;</p><p><strong>示例&nbsp;1:</strong></p><pre><strong>输入:</strong>&nbsp;s = "III"<strong>输出:</strong> 3</pre><p><strong>示例&nbsp;2:</strong></p><pre><strong>输入:</strong>&nbsp;s = "IV"<strong>输出:</strong> 4</pre><p><strong>示例&nbsp;3:</strong></p><pre><strong>输入:</strong>&nbsp;s = "IX"<strong>输出:</strong> 9</pre><p><strong>示例&nbsp;4:</strong></p><pre><strong>输入:</strong>&nbsp;s = "LVIII"<strong>输出:</strong> 58<strong>解释:</strong> L = 50, V= 5, III = 3.</pre><p><strong>示例&nbsp;5:</strong></p><pre><strong>输入:</strong>&nbsp;s = "MCMXCIV"<strong>输出:</strong> 1994<strong>解释:</strong> M = 1000, CM = 900, XC = 90, IV = 4.</pre><p>&nbsp;</p><p><strong>提示：</strong></p><ul>    <li><code>1 &lt;= s.length &lt;= 15</code></li>    <li><code>s</code> 仅含字符 <code>('I', 'V', 'X', 'L', 'C', 'D', 'M')</code></li>    <li>题目数据保证 <code>s</code> 是一个有效的罗马数字，且表示整数在范围 <code>[1, 3999]</code> 内</li>    <li>题目所给测试用例皆符合罗马数字书写规则，不会出现跨位等情况。</li>    <li>IL 和 IM 这样的例子并不符合题目要求，49 应该写作 XLIX，999 应该写作 CMXCIX 。</li>    <li>关于罗马数字的详尽书写规则，可以参考 <a href="https://b2b.partcommunity.com/community/knowledge/zh_CN/detail/10753/%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97#knowledge_article">罗马数字 - Mathematics </a>。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span><br>&#123;<br><span class="hljs-keyword">private</span>:<br>    unordered_map&lt;string, <span class="hljs-type">int</span>&gt; map = &#123;<br>        &#123;<span class="hljs-string">&quot;I&quot;</span>, <span class="hljs-number">1</span>&#125;,<br>        &#123;<span class="hljs-string">&quot;V&quot;</span>, <span class="hljs-number">5</span>&#125;,<br>        &#123;<span class="hljs-string">&quot;X&quot;</span>, <span class="hljs-number">10</span>&#125;,<br>        &#123;<span class="hljs-string">&quot;L&quot;</span>, <span class="hljs-number">50</span>&#125;,<br>        &#123;<span class="hljs-string">&quot;C&quot;</span>, <span class="hljs-number">100</span>&#125;,<br>        &#123;<span class="hljs-string">&quot;D&quot;</span>, <span class="hljs-number">500</span>&#125;,<br>        &#123;<span class="hljs-string">&quot;M&quot;</span>, <span class="hljs-number">1000</span>&#125;&#125;;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">romanToInt</span><span class="hljs-params">(string s)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> last = <span class="hljs-number">0</span>, n = s.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>,sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n; i &gt;= <span class="hljs-number">0</span>; i--)<br>        &#123;<br>            string str = s.<span class="hljs-built_in">substr</span>(i,<span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">if</span> (map[str] &gt;= last)<br>                sum += map[str];<br>            <span class="hljs-keyword">else</span>    <br>                sum -= map[str];<br>            last = map[str];<br>        &#125;<br>        <span class="hljs-keyword">return</span> sum;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数学</tag>
      
      <tag>字符串</tag>
      
      <tag>Leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>9.回文数</title>
    <link href="/2022/07/02/9-%E5%9B%9E%E6%96%87%E6%95%B0/"/>
    <url>/2022/07/02/9-%E5%9B%9E%E6%96%87%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode.cn/problems/palindrome-number/description/">力扣链接</a></p><p>给你一个整数 <code>x</code> ，如果 <code>x</code> 是一个回文整数，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p><p>回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。</p><ul>    <li>例如，<code>121</code> 是回文，而 <code>123</code> 不是。</li></ul><p>&nbsp;</p><p><strong>示例 1：</strong></p><pre><strong>输入：</strong>x = 121<strong>输出：</strong>true</pre><p><strong>示例&nbsp;2：</strong></p><pre><strong>输入：</strong>x = -121<strong>输出：</strong>false<strong>解释：</strong>从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。</pre><p><strong>示例 3：</strong></p><pre><strong>输入：</strong>x = 10<strong>输出：</strong>false<strong>解释：</strong>从右向左读, 为 01 。因此它不是一个回文数。</pre><p>&nbsp;</p><p><strong>提示：</strong></p><ul>    <li><code>-2<sup>31</sup>&nbsp;&lt;= x &lt;= 2<sup>31</sup>&nbsp;- 1</code></li></ul><p>&nbsp;</p><p><strong>进阶：</strong>你能不将整数转为字符串来解决这个问题吗？</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isPalindrome</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        string st = <span class="hljs-built_in">to_string</span>(x);<br>        string res = st;<br>        <span class="hljs-built_in">reverse</span>(st.<span class="hljs-built_in">begin</span>(),st.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-keyword">if</span> (res == st)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数学</tag>
      
      <tag>Leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1049.最后一块石头的重量II</title>
    <link href="/2022/07/01/1049-%E6%9C%80%E5%90%8E%E4%B8%80%E5%9D%97%E7%9F%B3%E5%A4%B4%E7%9A%84%E9%87%8D%E9%87%8FII/"/>
    <url>/2022/07/01/1049-%E6%9C%80%E5%90%8E%E4%B8%80%E5%9D%97%E7%9F%B3%E5%A4%B4%E7%9A%84%E9%87%8D%E9%87%8FII/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode.cn/problems/last-stone-weight-ii/">力扣链接</a></p><p>有一堆石头，用整数数组&nbsp;<code>stones</code> 表示。其中&nbsp;<code>stones[i]</code> 表示第 <code>i</code> 块石头的重量。</p><p>每一回合，从中选出<strong>任意两块石头</strong>，然后将它们一起粉碎。假设石头的重量分别为&nbsp;<code>x</code> 和&nbsp;<code>y</code>，且&nbsp;<code>x &lt;= y</code>。那么粉碎的可能结果如下：</p><ul>    <li>如果&nbsp;<code>x == y</code>，那么两块石头都会被完全粉碎；</li>    <li>如果&nbsp;<code>x != y</code>，那么重量为&nbsp;<code>x</code>&nbsp;的石头将会完全粉碎，而重量为&nbsp;<code>y</code>&nbsp;的石头新重量为&nbsp;<code>y-x</code>。</li></ul><p>最后，<strong>最多只会剩下一块 </strong>石头。返回此石头 <strong>最小的可能重量 </strong>。如果没有石头剩下，就返回 <code>0</code>。</p><p>&nbsp;</p><p><strong>示例 1：</strong></p><pre><strong>输入：</strong>stones = [2,7,4,1,8,1]<strong>输出：</strong>1<strong>解释：</strong>组合 2 和 4，得到 2，所以数组转化为 [2,7,1,8,1]，组合 7 和 8，得到 1，所以数组转化为 [2,1,1,1]，组合 2 和 1，得到 1，所以数组转化为 [1,1,1]，组合 1 和 1，得到 0，所以数组转化为 [1]，这就是最优值。</pre><p><strong>示例 2：</strong></p><pre><strong>输入：</strong>stones = [31,26,33,21,40]<strong>输出：</strong>5</pre><p>&nbsp;</p><p><strong>提示：</strong></p><ul>    <li><code>1 &lt;= stones.length &lt;= 30</code></li>    <li><code>1 &lt;= stones[i] &lt;= 100</code></li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lastStoneWeightII</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;stones)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> sum = <span class="hljs-built_in">accumulate</span>(stones.<span class="hljs-built_in">begin</span>(), stones.<span class="hljs-built_in">end</span>(), <span class="hljs-number">0</span>);<br>        <span class="hljs-type">int</span> target = sum / <span class="hljs-number">2</span>;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">dp</span><span class="hljs-params">(target + <span class="hljs-number">1</span>)</span></span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> stone : stones)<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = target; i &gt;= stone; i--)<br>                dp[i] = <span class="hljs-built_in">max</span>(dp[i], dp[i - stone] + stone);<br>        <span class="hljs-keyword">return</span> sum - <span class="hljs-number">2</span> * dp[target];<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Leetcode</category>
      
      <category>动态规划</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>01背包</tag>
      
      <tag>动态规划</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>416.分割等和子集</title>
    <link href="/2022/07/01/416-%E5%88%86%E5%89%B2%E7%AD%89%E5%92%8C%E5%AD%90%E9%9B%86/"/>
    <url>/2022/07/01/416-%E5%88%86%E5%89%B2%E7%AD%89%E5%92%8C%E5%AD%90%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode.cn/problems/partition-equal-subset-sum/">力扣链接</a></p><p>给你一个 <strong>只包含正整数 </strong>的 <strong>非空 </strong>数组 <code>nums</code> 。请你判断是否可以将这个数组分割成两个子集，使得两个子集的元素和相等。</p><span id="more"></span><p> </p><p><strong>示例 1：</strong></p><pre><strong>输入：</strong>nums = [1,5,11,5]<strong>输出：</strong>true<strong>解释：</strong>数组可以分割成 [1, 5, 5] 和 [11] 。</pre><p><strong>示例 2：</strong></p><pre><strong>输入：</strong>nums = [1,2,3,5]<strong>输出：</strong>false<strong>解释：</strong>数组不能分割成两个元素和相等的子集。</pre><p> </p><p><strong>提示：</strong></p><ul>    <li><code>1 <= nums.length <= 200</code></li>    <li><code>1 <= nums[i] <= 100</code></li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">canPartition</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">dp</span><span class="hljs-params">(<span class="hljs-number">10001</span>, <span class="hljs-number">0</span>)</span></span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.<span class="hljs-built_in">size</span>(); i++) &#123;<br>            sum += nums[i];<br>        &#125;<br>        <span class="hljs-keyword">if</span> (sum % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-type">int</span> target = sum / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.<span class="hljs-built_in">size</span>(); i++) &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = target; j &gt;= nums[i]; j--) &#123;<br>                dp[j] = <span class="hljs-built_in">max</span>(dp[j], dp[j - nums[i]] + nums[i]);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (dp[target] == target) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Leetcode</category>
      
      <category>动态规划</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>01背包</tag>
      
      <tag>动态规划</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>452.用最少数量的箭引爆气球</title>
    <link href="/2022/07/01/452-%E7%94%A8%E6%9C%80%E5%B0%91%E6%95%B0%E9%87%8F%E7%9A%84%E7%AE%AD%E5%BC%95%E7%88%86%E6%B0%94%E7%90%83/"/>
    <url>/2022/07/01/452-%E7%94%A8%E6%9C%80%E5%B0%91%E6%95%B0%E9%87%8F%E7%9A%84%E7%AE%AD%E5%BC%95%E7%88%86%E6%B0%94%E7%90%83/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode.cn/problems/minimum-number-of-arrows-to-burst-balloons/">力扣链接</a></p><p>有一些球形气球贴在一堵用 XY 平面表示的墙面上。墙面上的气球记录在整数数组&nbsp;<code>points</code>&nbsp;，其中<code>points[i] = [x<sub>start</sub>, x<sub>end</sub>]</code>&nbsp;表示水平直径在&nbsp;<code>x<sub>start</sub></code>&nbsp;和&nbsp;<code>x<sub>end</sub></code>之间的气球。你不知道气球的确切 y 坐标。</p><span id="more"></span><p>一支弓箭可以沿着 x 轴从不同点 <strong>完全垂直</strong> 地射出。在坐标 <code>x</code> 处射出一支箭，若有一个气球的直径的开始和结束坐标为 <code>x</code><sub><code>start</code>，</sub><code>x</code><sub><code>end</code>，</sub> 且满足 &nbsp;<code>x<sub>start</sub>&nbsp;≤ x ≤ x</code><sub><code>end</code>，</sub>则该气球会被 <strong>引爆</strong>&nbsp;<sub>。</sub>可以射出的弓箭的数量 <strong>没有限制</strong> 。 弓箭一旦被射出之后，可以无限地前进。</p><p>给你一个数组 <code>points</code> ，<em>返回引爆所有气球所必须射出的 <strong>最小</strong> 弓箭数&nbsp;</em>。</p>&nbsp;<p><strong>示例 1：</strong></p><pre><strong>输入：</strong>points = [[10,16],[2,8],[1,6],[7,12]]<strong>输出：</strong>2<strong>解释：</strong>气球可以用2支箭来爆破:-在x = 6处射出箭，击破气球[2,8]和[1,6]。-在x = 11处发射箭，击破气球[10,16]和[7,12]。</pre><p><strong>示例 2：</strong></p><pre><strong>输入：</strong>points = [[1,2],[3,4],[5,6],[7,8]]<strong>输出：</strong>4<strong>解释：</strong>每个气球需要射出一支箭，总共需要4支箭。</pre><p><strong>示例 3：</strong></p><pre><strong>输入：</strong>points = [[1,2],[2,3],[3,4],[4,5]]<strong>输出：</strong>2解释：气球可以用2支箭来爆破:- 在x = 2处发射箭，击破气球[1,2]和[2,3]。- 在x = 4处射出箭，击破气球[3,4]和[4,5]。</pre><p>&nbsp;</p><p><meta charset="UTF-8" /></p><p><strong>提示:</strong></p><ul>    <li><code>1 &lt;= points.length &lt;= 10<sup>5</sup></code></li>    <li><code>points[i].length == 2</code></li>    <li><code>-2<sup>31</sup>&nbsp;&lt;= x<sub>start</sub>&nbsp;&lt; x<sub>end</sub>&nbsp;&lt;= 2<sup>31</sup>&nbsp;- 1</code></li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(<span class="hljs-type">const</span> vector&lt;<span class="hljs-type">int</span>&gt;&amp; a, <span class="hljs-type">const</span> vector&lt;<span class="hljs-type">int</span>&gt;&amp; b)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> a[<span class="hljs-number">0</span>] &lt; b[<span class="hljs-number">0</span>];<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">findMinArrowShots</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; points)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(points.<span class="hljs-built_in">size</span>() == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> result = <span class="hljs-number">1</span>;<br>        <span class="hljs-built_in">sort</span>(points.<span class="hljs-built_in">begin</span>(), points.<span class="hljs-built_in">end</span>(), cmp);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; points.<span class="hljs-built_in">size</span>(); i++) &#123;<br>            <span class="hljs-keyword">if</span>(points[i<span class="hljs-number">-1</span>][<span class="hljs-number">1</span>] &lt; points[i][<span class="hljs-number">0</span>]) result++;<br>            <span class="hljs-keyword">else</span> points[i][<span class="hljs-number">1</span>] = <span class="hljs-built_in">min</span>(points[i][<span class="hljs-number">1</span>], points[i<span class="hljs-number">-1</span>][<span class="hljs-number">1</span>]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Leetcode</category>
      
      <category>贪心算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>贪心算法</tag>
      
      <tag>LeetCode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>406.根据身高重建队列</title>
    <link href="/2022/06/30/406-%E6%A0%B9%E6%8D%AE%E8%BA%AB%E9%AB%98%E9%87%8D%E5%BB%BA%E9%98%9F%E5%88%97/"/>
    <url>/2022/06/30/406-%E6%A0%B9%E6%8D%AE%E8%BA%AB%E9%AB%98%E9%87%8D%E5%BB%BA%E9%98%9F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode.cn/problems/queue-reconstruction-by-height/">力扣链接</a></p><p>假设有打乱顺序的一群人站成一个队列，数组 <code>people</code> 表示队列中一些人的属性（不一定按顺序）。每个 <code>people[i] = [h<sub>i</sub>, k<sub>i</sub>]</code> 表示第 <code>i</code> 个人的身高为 <code>h<sub>i</sub></code> ，前面 <strong>正好</strong> 有 <code>k<sub>i</sub></code><sub> </sub>个身高大于或等于 <code>h<sub>i</sub></code> 的人。</p><p>请你重新构造并返回输入数组 <code>people</code> 所表示的队列。返回的队列应该格式化为数组 <code>queue</code> ，其中 <code>queue[j] = [h<sub>j</sub>, k<sub>j</sub>]</code> 是队列中第 <code>j</code> 个人的属性（<code>queue[0]</code> 是排在队列前面的人）。</p><p> </p><ul></ul><p><strong>示例 1：</strong></p><pre><strong>输入：</strong>people = [[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]<strong>输出：</strong>[[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]]<strong>解释：</strong>编号为 0 的人身高为 5 ，没有身高更高或者相同的人排在他前面。编号为 1 的人身高为 7 ，没有身高更高或者相同的人排在他前面。编号为 2 的人身高为 5 ，有 2 个身高更高或者相同的人排在他前面，即编号为 0 和 1 的人。编号为 3 的人身高为 6 ，有 1 个身高更高或者相同的人排在他前面，即编号为 1 的人。编号为 4 的人身高为 4 ，有 4 个身高更高或者相同的人排在他前面，即编号为 0、1、2、3 的人。编号为 5 的人身高为 7 ，有 1 个身高更高或者相同的人排在他前面，即编号为 1 的人。因此 [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]] 是重新构造后的队列。</pre><p><strong>示例 2：</strong></p><pre><strong>输入：</strong>people = [[6,0],[5,0],[4,0],[3,2],[2,2],[1,4]]<strong>输出：</strong>[[4,0],[5,0],[2,2],[3,2],[1,4],[6,0]]</pre><p> </p><p><strong>提示：</strong></p><ul>    <li><code>1 <= people.length <= 2000</code></li>    <li><code>0 <= h<sub>i</sub> <= 10<sup>6</sup></code></li>    <li><code>0 <= k<sub>i</sub> < people.length</code></li>    <li>题目数据确保队列可以被重建</li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(<span class="hljs-type">const</span> vector&lt;<span class="hljs-type">int</span>&gt; a, <span class="hljs-type">const</span> vector&lt;<span class="hljs-type">int</span>&gt; b)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (a[<span class="hljs-number">0</span>] == b[<span class="hljs-number">0</span>]) <span class="hljs-keyword">return</span> a[<span class="hljs-number">1</span>] &lt; b[<span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">return</span> a[<span class="hljs-number">0</span>] &gt; b[<span class="hljs-number">0</span>];<br>    &#125;<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">reconstructQueue</span>(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; people) &#123;<br>        <span class="hljs-built_in">sort</span> (people.<span class="hljs-built_in">begin</span>(), people.<span class="hljs-built_in">end</span>(), cmp);<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; que;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; people.<span class="hljs-built_in">size</span>(); i++) &#123;<br>            <span class="hljs-type">int</span> position = people[i][<span class="hljs-number">1</span>];<br>            que.<span class="hljs-built_in">insert</span>(que.<span class="hljs-built_in">begin</span>() + position, people[i]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> que;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Leetcode</category>
      
      <category>贪心算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>贪心算法</tag>
      
      <tag>LeetCode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>860.柠檬水找零</title>
    <link href="/2022/06/30/860-%E6%9F%A0%E6%AA%AC%E6%B0%B4%E6%89%BE%E9%9B%B6/"/>
    <url>/2022/06/30/860-%E6%9F%A0%E6%AA%AC%E6%B0%B4%E6%89%BE%E9%9B%B6/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode.cn/problems/lemonade-change/">力扣链接</a></p><p>在柠檬水摊上，每一杯柠檬水的售价为 5 美元。顾客排队购买你的产品，（按账单 bills 支付的顺序）一次购买一杯。</p><span id="more"></span><p>每位顾客只买一杯柠檬水，然后向你付 5 美元、10 美元或 20 美元。你必须给每个顾客正确找零，也就是说净交易是每位顾客向你支付 5 美元。</p><p>注意，一开始你手头没有任何零钱。</p><p>给你一个整数数组 bills ，其中 bills[i] 是第 i 位顾客付的账。如果你能给每位顾客正确找零，返回 true ，否则返回 false 。</p><p>示例 1：</p><pre><code class="hljs">输入：bills = [5,5,5,10,20]输出：true解释：前 3 位顾客那里，我们按顺序收取 3 张 5 美元的钞票。第 4 位顾客那里，我们收取一张 10 美元的钞票，并返还 5 美元。第 5 位顾客那里，我们找还一张 10 美元的钞票和一张 5 美元的钞票。由于所有客户都得到了正确的找零，所以我们输出 true。</code></pre><p>示例 2：</p><pre><code class="hljs">输入：bills = [5,5,10,10,20]输出：false解释：前 2 位顾客那里，我们按顺序收取 2 张 5 美元的钞票。对于接下来的 2 位顾客，我们收取一张 10 美元的钞票，然后返还 5 美元。对于最后一位顾客，我们无法退回 15 美元，因为我们现在只有两张 10 美元的钞票。由于不是每位顾客都得到了正确的找零，所以答案是 false。</code></pre><p>提示：</p><ul><li>1 &lt;= bills.length &lt;= 10^5</li><li>bills[i] 不是 5 就是 10 或是 20 </li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">lemonadeChange</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;bills)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> fc = <span class="hljs-number">0</span>, tc = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; bills.<span class="hljs-built_in">size</span>(); i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (bills[i] == <span class="hljs-number">5</span>)<br>                fc++;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (bills[i] == <span class="hljs-number">10</span>)<br>                tc++, fc--;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (bills[i] == <span class="hljs-number">20</span>)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (tc &gt; <span class="hljs-number">0</span>)<br>                    tc--, fc--;<br>                <span class="hljs-keyword">else</span><br>                    fc -= <span class="hljs-number">3</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (fc &lt; <span class="hljs-number">0</span> || tc &lt; <span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Leetcode</category>
      
      <category>贪心算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>贪心算法</tag>
      
      <tag>LeetCode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>135.分发糖果</title>
    <link href="/2022/06/30/135-%E5%88%86%E5%8F%91%E7%B3%96%E6%9E%9C/"/>
    <url>/2022/06/30/135-%E5%88%86%E5%8F%91%E7%B3%96%E6%9E%9C/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode.cn/problems/candy/">力扣链接</a></p><p>n 个孩子站成一排。给你一个整数数组 ratings 表示每个孩子的评分。</p><span id="more"></span><p>你需要按照以下要求，给这些孩子分发糖果：</p><p>每个孩子至少分配到 1 个糖果。<br>相邻两个孩子评分更高的孩子会获得更多的糖果。<br>请你给每个孩子分发糖果，计算并返回需要准备的 最少糖果数目 。</p><p>示例 1：</p><pre><code class="hljs">输入：ratings = [1,0,2]输出：5解释：你可以分别给第一个、第二个、第三个孩子分发 2、1、2 颗糖果。</code></pre><p>示例 2：</p><pre><code class="hljs">输入：ratings = [1,2,2]输出：4解释：你可以分别给第一个、第二个、第三个孩子分发 1、2、1 颗糖果。    第三个孩子只得到 1 颗糖果，这满足题面中的两个条件。</code></pre><p>提示：</p><ul><li>n == ratings.length</li><li>1 &lt;= n &lt;= 2 * 10^4</li><li>0 &lt;= ratings[i] &lt;= 2 * 10^4</li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">candy</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; ratings)</span> </span>&#123;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">candys</span><span class="hljs-params">(ratings.size(),<span class="hljs-number">1</span>)</span></span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; ratings.<span class="hljs-built_in">size</span>(); i++) &#123;<br>            <span class="hljs-keyword">if</span>(ratings[i] &gt; ratings[i<span class="hljs-number">-1</span>]) candys[i] = candys[i<span class="hljs-number">-1</span>] + <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = ratings.<span class="hljs-built_in">size</span>()<span class="hljs-number">-2</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>            <span class="hljs-keyword">if</span>(ratings[i] &gt; ratings[i+<span class="hljs-number">1</span>]) candys[i] = <span class="hljs-built_in">max</span>(candys[i+<span class="hljs-number">1</span>]+<span class="hljs-number">1</span>,candys[i]);<br>        &#125;<br>        <span class="hljs-type">int</span> result = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; candys.<span class="hljs-built_in">size</span>(); i++) <br>            result += candys[i];<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Leetcode</category>
      
      <category>贪心算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>贪心算法</tag>
      
      <tag>LeetCode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>134.加油站</title>
    <link href="/2022/06/30/134-%E5%8A%A0%E6%B2%B9%E7%AB%99/"/>
    <url>/2022/06/30/134-%E5%8A%A0%E6%B2%B9%E7%AB%99/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode.cn/problems/gas-station/">力扣链接</a></p><p>在一条环路上有 n 个加油站，其中第 i 个加油站有汽油 gas[i] 升。</p><p>你有一辆油箱容量无限的的汽车，从第 i 个加油站开往第 i+1 个加油站需要消耗汽油 cost[i] 升。你从其中的一个加油站出发，开始时油箱为空。</p><span id="more"></span><p>给定两个整数数组 gas 和 cost ，如果你可以绕环路行驶一周，则返回出发时加油站的编号，否则返回 -1 。如果存在解，则 保证 它是 唯一 的。</p><p>示例 1:</p><pre><code class="hljs">输入: gas = [1,2,3,4,5], cost = [3,4,5,1,2]输出: 3解释:从 3 号加油站(索引为 3 处)出发，可获得 4 升汽油。此时油箱有 = 0 + 4 = 4 升汽油开往 4 号加油站，此时油箱有 4 - 1 + 5 = 8 升汽油开往 0 号加油站，此时油箱有 8 - 2 + 1 = 7 升汽油开往 1 号加油站，此时油箱有 7 - 3 + 2 = 6 升汽油开往 2 号加油站，此时油箱有 6 - 4 + 3 = 5 升汽油开往 3 号加油站，你需要消耗 5 升汽油，正好足够你返回到 3 号加油站。因此，3 可为起始索引。</code></pre><p>示例 2:</p><pre><code class="hljs">输入: gas = [2,3,4], cost = [3,4,3]输出: -1解释:你不能从 0 号或 1 号加油站出发，因为没有足够的汽油可以让你行驶到下一个加油站。我们从 2 号加油站出发，可以获得 4 升汽油。 此时油箱有 = 0 + 4 = 4 升汽油开往 0 号加油站，此时油箱有 4 - 3 + 2 = 3 升汽油开往 1 号加油站，此时油箱有 3 - 3 + 3 = 3 升汽油你无法返回 2 号加油站，因为返程需要消耗 4 升汽油，但是你的油箱只有 3 升汽油。因此，无论怎样，你都不可能绕环路行驶一周。</code></pre><p>提示:</p><ul><li>gas.length == n</li><li>cost.length == n</li><li>1 &lt;= n &lt;= 10^5</li><li>0 &lt;= gas[i], cost[i] &lt;= 10^4</li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">canCompleteCircuit</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;gas, vector&lt;<span class="hljs-type">int</span>&gt; &amp;cost)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> curSum = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> totalSum = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> start = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; gas.<span class="hljs-built_in">size</span>(); i++)<br>        &#123;<br>            curSum += gas[i] - cost[i];<br>            totalSum += gas[i] - cost[i];<br>            <span class="hljs-keyword">if</span> (curSum &lt; <span class="hljs-number">0</span>)<br>            &#123;                  <span class="hljs-comment">// 当前累加rest[i]和 curSum一旦小于0</span><br>                start = i + <span class="hljs-number">1</span>; <span class="hljs-comment">// 起始位置更新为i+1</span><br>                curSum = <span class="hljs-number">0</span>;    <span class="hljs-comment">// curSum从0开始</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (totalSum &lt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>; <span class="hljs-comment">// 说明怎么走都不可能跑一圈了</span><br>        <span class="hljs-keyword">return</span> start;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Leetcode</category>
      
      <category>贪心算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>贪心算法</tag>
      
      <tag>LeetCode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1005.K次取反后最大化的数组和</title>
    <link href="/2022/06/30/1005-K%E6%AC%A1%E5%8F%96%E5%8F%8D%E5%90%8E%E6%9C%80%E5%A4%A7%E5%8C%96%E7%9A%84%E6%95%B0%E7%BB%84%E5%92%8C/"/>
    <url>/2022/06/30/1005-K%E6%AC%A1%E5%8F%96%E5%8F%8D%E5%90%8E%E6%9C%80%E5%A4%A7%E5%8C%96%E7%9A%84%E6%95%B0%E7%BB%84%E5%92%8C/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode.cn/problems/maximize-sum-of-array-after-k-negations/">力扣链接</a></p><p>给你一个整数数组 nums 和一个整数 k ，按以下方法修改该数组：</p><ul><li>选择某个下标 i 并将 nums[i] 替换为 -nums[i] 。</li></ul><p>重复这个过程恰好 k 次。可以多次选择同一个下标 i 。</p><p>以这种方式修改数组后，返回数组 可能的最大和 。</p><span id="more"></span><p>示例 1：</p><pre><code class="hljs">输入：nums = [4,2,3], k = 1输出：5解释：选择下标 1 ，nums 变为 [4,-2,3] 。</code></pre><p>示例 2：</p><pre><code class="hljs">输入：nums = [3,-1,0,2], k = 3输出：6解释：选择下标 (1, 2, 2) ，nums 变为 [3,1,0,2] 。</code></pre><p>示例 3：</p><pre><code class="hljs">输入：nums = [2,-3,-1,5,-4], k = 2输出：13解释：选择下标 (1, 4) ，nums 变为 [2,3,-1,5,4] 。</code></pre><p>提示：</p><ul><li>1 &lt;= nums.length &lt;= 10^4</li><li>-100 &lt;= nums[i] &lt;= 100</li><li>1 &lt;= k &lt;= 10^4</li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">largestSumAfterKNegations</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> k)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = nums.<span class="hljs-built_in">size</span>(),idx = <span class="hljs-number">0</span>,sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">sort</span>(nums.<span class="hljs-built_in">begin</span>(),nums.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-keyword">for</span> (;idx &lt; n &amp;&amp; nums[idx] &lt; <span class="hljs-number">0</span> &amp;&amp; k &gt; <span class="hljs-number">0</span>;idx++,k--)<br>            nums[idx] *= <span class="hljs-number">-1</span>;<br>        <span class="hljs-built_in">sort</span>(nums.<span class="hljs-built_in">begin</span>(),nums.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-keyword">if</span> (k %= <span class="hljs-number">2</span>) nums[<span class="hljs-number">0</span>] *= <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; n;i++)<br>            sum += nums[i];<br>        <span class="hljs-keyword">return</span> sum;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Leetcode</category>
      
      <category>贪心算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>贪心算法</tag>
      
      <tag>LeetCode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>45.跳跃游戏II</title>
    <link href="/2022/06/29/45-%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8FII/"/>
    <url>/2022/06/29/45-%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8FII/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode.cn/problems/jump-game-ii/">力扣链接</a></p><p>给你一个非负整数数组 nums ，你最初位于数组的第一个位置。</p><p>数组中的每个元素代表你在该位置可以跳跃的最大长度。</p><p>你的目标是使用最少的跳跃次数到达数组的最后一个位置。</p><span id="more"></span><p>假设你总是可以到达数组的最后一个位置。</p><p>示例 1:</p><pre><code class="hljs">输入: nums = [2,3,1,1,4]输出: 2解释: 跳到最后一个位置的最小跳跃数是 2。    从下标为 0 跳到下标为 1 的位置，跳 1 步，然后跳 3 步到达数组的最后一个位置。</code></pre><p>示例 2:</p><pre><code class="hljs">输入: nums = [2,3,0,1,4]输出: 2</code></pre><p>提示:</p><ul><li>1 &lt;= nums.length &lt;= 10^4</li><li>0 &lt;= nums[i] &lt;= 1000</li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">jump</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> end = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> maxPosition = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">1</span>; i ++)       <span class="hljs-comment">//由于是到达最后一个位置所以可以不用算最后位置的跳跃</span><br>         &#123;<br>            maxPosition = <span class="hljs-built_in">max</span>(maxPosition, i + nums[i]);<br>            <span class="hljs-keyword">if</span>(i == end)<br>            &#123;<br>                ans ++;<br>                end = maxPosition;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Leetcode</category>
      
      <category>贪心算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>贪心算法</tag>
      
      <tag>LeetCode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>55.跳跃游戏</title>
    <link href="/2022/06/29/55-%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8F/"/>
    <url>/2022/06/29/55-%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8F/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode.cn/problems/jump-game/">力扣链接</a></p><p>给定一个非负整数数组 nums ，你最初位于数组的 第一个下标 。</p><p>数组中的每个元素代表你在该位置可以跳跃的最大长度。</p><p>判断你是否能够到达最后一个下标。</p><span id="more"></span><p>示例 1：</p><pre><code class="hljs">输入：nums = [2,3,1,1,4]输出：true解释：可以先跳 1 步，从下标 0 到达下标 1, 然后再从下标 1 跳 3 步到达最后一个下标。</code></pre><p>示例 2：</p><pre><code class="hljs">输入：nums = [3,2,1,0,4]输出：false解释：无论怎样，总会到达下标为 3 的位置。但该下标的最大跳跃长度是 0 ， 所以永远不可能到达最后一个下标。</code></pre><p>提示：</p><ul><li>1 &lt;= nums.length &lt;= 3 * 10^4</li><li>0 &lt;= nums[i] &lt;= 10^5</li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><blockquote><p>贪心题解</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">canJump</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-type">int</span> cover = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= cover; i++) &#123;<br>            cover = <span class="hljs-built_in">max</span>(nums[i]+i,cover);<br>            <span class="hljs-keyword">if</span>(cover &gt;= nums.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><blockquote><p>自己写的，这个应该算暴力</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">canJump</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;nums)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (nums.<span class="hljs-built_in">size</span>() == <span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.<span class="hljs-built_in">size</span>(); i++)<br>        &#123;<br>            sum = nums[i] &gt;= sum ? nums[i] : sum - <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (sum &lt;= <span class="hljs-number">0</span> &amp;&amp; i != nums.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Leetcode</category>
      
      <category>贪心算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>贪心算法</tag>
      
      <tag>LeetCode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>122.买卖股票的最佳时机II</title>
    <link href="/2022/06/29/122-%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BAII/"/>
    <url>/2022/06/29/122-%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BAII/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-ii/">力扣链接</a></p><p>给你一个整数数组 prices ，其中 prices[i] 表示某支股票第 i 天的价格。</p><p>在每一天，你可以决定是否购买和/或出售股票。你在任何时候 最多 只能持有 一股 股票。你也可以先购买，然后在 同一天 出售。</p><p>返回 你能获得的 最大 利润 。</p><span id="more"></span><p>示例 1：</p><pre><code class="hljs">输入：prices = [7,1,5,3,6,4]输出：7解释：在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5 - 1 = 4 。    随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6 - 3 = 3 。    总利润为 4 + 3 = 7 。</code></pre><p>示例 2：</p><pre><code class="hljs">输入：prices = [1,2,3,4,5]输出：4解释：在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5 - 1 = 4 。    总利润为 4 。</code></pre><p>示例 3：</p><pre><code class="hljs">输入：prices = [7,6,4,3,1]输出：0解释：在这种情况下, 交易无法获得正利润，所以不参与交易可以获得最大利润，最大利润为 0 。</code></pre><p>提示：</p><ul><li>1 &lt;= prices.length &lt;= 3 * 10^4</li><li>0 &lt;= prices[i] &lt;= 10^4</li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><blockquote><p>得出前后差值 大于0 的直接加进结果就行</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxProfit</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; prices)</span> </span>&#123;<br>        <span class="hljs-type">int</span> result = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt; prices.<span class="hljs-built_in">size</span>();i++)<br>            result += prices[i] - prices[i<span class="hljs-number">-1</span>] &gt; <span class="hljs-number">0</span> ? prices[i] - prices[i<span class="hljs-number">-1</span>] : <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Leetcode</category>
      
      <category>贪心算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>贪心算法</tag>
      
      <tag>LeetCode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>53.最大子数组和</title>
    <link href="/2022/06/29/53-%E6%9C%80%E5%A4%A7%E5%AD%90%E6%95%B0%E7%BB%84%E5%92%8C/"/>
    <url>/2022/06/29/53-%E6%9C%80%E5%A4%A7%E5%AD%90%E6%95%B0%E7%BB%84%E5%92%8C/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode.cn/problems/maximum-subarray/">力扣链接</a></p><p>给你一个整数数组 nums ，请你找出一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p><span id="more"></span><p>子数组 是数组中的一个连续部分。</p><p>示例 1：</p><pre><code class="hljs">输入：nums = [-2,1,-3,4,-1,2,1,-5,4]输出：6解释：连续子数组 [4,-1,2,1] 的和最大，为 6 。</code></pre><p>示例 2：</p><pre><code class="hljs">输入：nums = [1]输出：1</code></pre><p>示例 3：</p><pre><code class="hljs">输入：nums = [5,4,-1,7,8]输出：23</code></pre><p>提示：</p><ul><li>1 &lt;= nums.length &lt;= 105</li><li>-104 &lt;= nums[i] &lt;= 104</li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><h4 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxSubArray</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>,result = INT_MIN;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; nums.<span class="hljs-built_in">size</span>();i++)<br>        &#123;<br>            sum += nums[i];<br>            result = result &lt; sum ? sum : result;<br>            <span class="hljs-keyword">if</span> (sum &lt; <span class="hljs-number">0</span>)<br>                sum = <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxSubArray</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;nums)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> n = nums.<span class="hljs-built_in">size</span>(), result = nums[<span class="hljs-number">0</span>];<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">dp</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span></span>;<br>        dp[<span class="hljs-number">0</span>] = nums[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++)<br>        &#123;<br>            dp[i] = <span class="hljs-built_in">max</span>(dp[i - <span class="hljs-number">1</span>] + nums[i], nums[i]);<br>            result = <span class="hljs-built_in">max</span>(result, dp[i]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Leetcode</category>
      
      <category>贪心算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>贪心算法</tag>
      
      <tag>LeetCode</tag>
      
      <tag>动态规划</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>96.不同的二叉搜索树</title>
    <link href="/2022/06/29/96-%E4%B8%8D%E5%90%8C%E7%9A%84%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/"/>
    <url>/2022/06/29/96-%E4%B8%8D%E5%90%8C%E7%9A%84%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode.cn/problems/unique-binary-search-trees/">力扣链接</a></p><p>给你一个整数 n ，求恰由 n 个节点组成且节点值从 1 到 n 互不相同的 二叉搜索树 有多少种？返回满足题意的二叉搜索树的种数。</p><span id="more"></span><p>示例 1：<br><img src="https://api2.mubu.com/v3/document_image/1ca5407f-42c7-4833-bba6-98a41640c0fc-785422.jpg"></p><pre><code class="hljs">输入：n = 3输出：5</code></pre><p>示例 2：</p><pre><code class="hljs">输入：n = 1输出：1</code></pre><p>提示：</p><ul><li>1 &lt;= n &lt;= 19</li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><blockquote><p>思路：<br>认真看官方的图 看其分类<br>由 3 个节点组成且节点值从 1 到 3 互不相同的 二叉搜索树</p><p>根节点为 1 两种<br>根节点为 2 一种<br>根节点为 3 两种</p><p>3 - 2 - 1 ， 3 - 1 - 2 去除 3 后的<br>2 - 1 以及 1 - 2 可看作：<br>由 2 个节点组成且节点值从 1 到 2 互不相同的 二叉搜索树<br>即化成了子问题</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">numTrees</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">dp</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span></span>;<br>        dp[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) <br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= i; j++) <br>                dp[i] += dp[j - <span class="hljs-number">1</span>] * dp[i - j];<br>        <span class="hljs-keyword">return</span> dp[n];<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Leetcode</category>
      
      <category>动态规划</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>动态规划</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>343.整数拆分</title>
    <link href="/2022/06/29/343-%E6%95%B4%E6%95%B0%E6%8B%86%E5%88%86/"/>
    <url>/2022/06/29/343-%E6%95%B4%E6%95%B0%E6%8B%86%E5%88%86/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode.cn/problems/integer-break/">力扣链接</a></p><p>给定一个正整数 n ，将其拆分为 k 个 正整数 的和（ k &gt;= 2 ），并使这些整数的乘积最大化。</p><span id="more"></span><p>返回 你可以获得的最大乘积 。</p><p>示例 1:</p><pre><code class="hljs">输入: n = 2输出: 1解释: 2 = 1 + 1, 1 × 1 = 1。</code></pre><p>示例 2:</p><pre><code class="hljs">输入: n = 10输出: 36解释: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36。</code></pre><p>提示:</p><ul><li>2 &lt;= n &lt;= 58</li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><blockquote><p>以 示例2 为例：<br>10 = 3 + 3 + 4 ，3 * 3 * 4 = 36<br>可以其中一部分看作为 6 = 3 + 3 ，3 * 3 = 9<br>即 6 的最大乘积 * 10 - 6<br>同样，6 或 4 也可继续拆分，dp的话从前到后递推即可</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">integerBreak</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">dp</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span></span>;<br>        dp[<span class="hljs-number">2</span>] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">3</span>; i &lt;= n; i++)<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt; i - <span class="hljs-number">1</span>; j++)<br>                dp[i] = <span class="hljs-built_in">max</span>(dp[i], <span class="hljs-built_in">max</span>((i - j) * j, dp[i - j] * j));<br>        <span class="hljs-keyword">return</span> dp[n];<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Leetcode</category>
      
      <category>动态规划</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>动态规划</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>63.不同路径II</title>
    <link href="/2022/06/29/63-%E4%B8%8D%E5%90%8C%E8%B7%AF%E5%BE%84II/"/>
    <url>/2022/06/29/63-%E4%B8%8D%E5%90%8C%E8%B7%AF%E5%BE%84II/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode.cn/problems/unique-paths-ii/">力扣链接</a></p><p>一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为 “Start” ）。</p><p>机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为 “Finish”）。</p><p>现在考虑网格中有障碍物。那么从左上角到右下角将会有多少条不同的路径？</p><span id="more"></span><p>网格中的障碍物和空位置分别用 1 和 0 来表示。</p><p>示例 1：<br><img src="https://api2.mubu.com/v3/document_image/3715ebc0-b25e-4bef-adef-4b166edd214d-785422.jpg"></p><pre><code class="hljs">输入：obstacleGrid = [[0,0,0],[0,1,0],[0,0,0]]输出：2解释：3x3 网格的正中间有一个障碍物。从左上角到右下角一共有 2 条不同的路径：</code></pre><ol><li>向右 -&gt; 向右 -&gt; 向下 -&gt; 向下</li><li>向下 -&gt; 向下 -&gt; 向右 -&gt; 向右<br>示例 2：</li></ol><p><img src="https://api2.mubu.com/v3/document_image/db8f2cfc-b678-4b82-a19a-01a0773b04c0-785422.jpg"></p><pre><code class="hljs">输入：obstacleGrid = [[0,1],[0,0]]输出：1</code></pre><p>提示：</p><ul><li>m == obstacleGrid.length</li><li>n == obstacleGrid[i].length</li><li>1 &lt;= m, n &lt;= 100</li><li>obstacleGrid[i][j] 为 0 或 1</li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">uniquePathsWithObstacles</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; &amp;obstacleGrid)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> m = obstacleGrid.<span class="hljs-built_in">size</span>(), n = obstacleGrid[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">if</span> (obstacleGrid[m - <span class="hljs-number">1</span>][n - <span class="hljs-number">1</span>] == <span class="hljs-number">1</span> || obstacleGrid[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] == <span class="hljs-number">1</span>) <span class="hljs-comment">//如果在起点或终点出现了障碍，直接返回0</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">dp</span>(m, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(n, <span class="hljs-number">0</span>));<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n &amp;&amp; obstacleGrid[<span class="hljs-number">0</span>][i] == <span class="hljs-number">0</span>; i++)<br>            dp[<span class="hljs-number">0</span>][i] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m &amp;&amp; obstacleGrid[i][<span class="hljs-number">0</span>] == <span class="hljs-number">0</span>; i++)<br>            dp[i][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; m; i++)<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt; n; j++)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (obstacleGrid[i][j] == <span class="hljs-number">1</span>)<br>                    <span class="hljs-keyword">continue</span>;<br>                dp[i][j] = dp[i - <span class="hljs-number">1</span>][j] + dp[i][j - <span class="hljs-number">1</span>];<br>            &#125;<br>        <span class="hljs-keyword">return</span> dp[m - <span class="hljs-number">1</span>][n - <span class="hljs-number">1</span>];<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Leetcode</category>
      
      <category>动态规划</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>动态规划</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>62.不同路径</title>
    <link href="/2022/06/29/62-%E4%B8%8D%E5%90%8C%E8%B7%AF%E5%BE%84/"/>
    <url>/2022/06/29/62-%E4%B8%8D%E5%90%8C%E8%B7%AF%E5%BE%84/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode.cn/problems/unique-paths/">力扣链接</a></p><p>一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为 “Start” ）。</p><p>机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为 “Finish” ）。</p><p>问总共有多少条不同的路径？</p><span id="more"></span><p>示例 1：<br><img src="https://api2.mubu.com/v3/document_image/21421ca0-c71e-4ba1-935b-5e1e69394527-785422.jpg"></p><pre><code class="hljs">输入：m = 3, n = 7输出：28</code></pre><p>示例 2：</p><pre><code class="hljs">输入：m = 3, n = 2输出：3解释：从左上角开始，总共有 3 条路径可以到达右下角。</code></pre><ol><li>向右 -&gt; 向下 -&gt; 向下</li><li>向下 -&gt; 向下 -&gt; 向右</li><li>向下 -&gt; 向右 -&gt; 向下</li></ol><p>示例 3：</p><pre><code class="hljs">输入：m = 7, n = 3输出：28</code></pre><p>示例 4：</p><pre><code class="hljs">输入：m = 3, n = 3输出：6</code></pre><p>提示：</p><ul><li>1 &lt;= m, n &lt;= 100</li><li>题目数据保证答案小于等于 2 * 109</li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">uniquePaths</span><span class="hljs-params">(<span class="hljs-type">int</span> m, <span class="hljs-type">int</span> n)</span> </span>&#123;<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">dp</span>(m,<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(n,<span class="hljs-number">0</span>));<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; n;i++)<br>            dp[<span class="hljs-number">0</span>][i]=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; m;i++)<br>            dp[i][<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt; m;i++)<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>;j &lt; n;j++)<br>                dp[i][j] = dp[i<span class="hljs-number">-1</span>][j] + dp[i][j<span class="hljs-number">-1</span>];<br>        <span class="hljs-keyword">return</span> dp[m<span class="hljs-number">-1</span>][n<span class="hljs-number">-1</span>];<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Leetcode</category>
      
      <category>动态规划</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>动态规划</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>746.使用最小花费爬楼梯</title>
    <link href="/2022/06/28/746-%E4%BD%BF%E7%94%A8%E6%9C%80%E5%B0%8F%E8%8A%B1%E8%B4%B9%E7%88%AC%E6%A5%BC%E6%A2%AF/"/>
    <url>/2022/06/28/746-%E4%BD%BF%E7%94%A8%E6%9C%80%E5%B0%8F%E8%8A%B1%E8%B4%B9%E7%88%AC%E6%A5%BC%E6%A2%AF/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode.cn/problems/min-cost-climbing-stairs/">力扣链接</a></p><p>给你一个整数数组 cost ，其中 cost[i] 是从楼梯第 i 个台阶向上爬需要支付的费用。一旦你支付此费用，即可选择向上爬一个或者两个台阶。</p><span id="more"></span><p>你可以选择从下标为 0 或下标为 1 的台阶开始爬楼梯。</p><p>请你计算并返回达到楼梯顶部的最低花费。</p><p>示例 1：</p><pre><code class="hljs">输入：cost = [10,15,20]输出：15解释：你将从下标为 1 的台阶开始。 - 支付 15 ，向上爬两个台阶，到达楼梯顶部。总花费为 15 。</code></pre><p>示例 2：</p><pre><code class="hljs">输入：cost = [1,100,1,1,1,100,1,1,100,1]输出：6解释：你将从下标为 0 的台阶开始。 - 支付 1 ，向上爬两个台阶，到达下标为 2 的台阶。 - 支付 1 ，向上爬两个台阶，到达下标为 4 的台阶。 - 支付 1 ，向上爬两个台阶，到达下标为 6 的台阶。 - 支付 1 ，向上爬一个台阶，到达下标为 7 的台阶。 - 支付 1 ，向上爬两个台阶，到达下标为 9 的台阶。 - 支付 1 ，向上爬一个台阶，到达楼梯顶部。总花费为 6 。</code></pre><p>提示：</p><ul><li>2 &lt;= cost.length &lt;= 1000</li><li>0 &lt;= cost[i] &lt;= 999</li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">minCostClimbingStairs</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;cost)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> idx = <span class="hljs-number">2</span>, n = cost.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">if</span> (n == <span class="hljs-number">2</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">min</span>(cost[<span class="hljs-number">0</span>], cost[<span class="hljs-number">1</span>]);<br>        vector&lt;<span class="hljs-type">int</span>&gt; dp;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> d : cost)<br>            dp.<span class="hljs-built_in">push_back</span>(d);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt; n; i++, idx++)<br>            dp[idx] += <span class="hljs-built_in">min</span>(dp[i - <span class="hljs-number">1</span>], dp[i - <span class="hljs-number">2</span>]);<br>        <span class="hljs-type">int</span> result = <span class="hljs-built_in">min</span>(dp[n - <span class="hljs-number">1</span>], dp[n - <span class="hljs-number">2</span>]);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>或</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">minCostClimbingStairs</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; cost)</span> </span>&#123;<br>        <span class="hljs-type">int</span> dp0 = cost[<span class="hljs-number">0</span>];<br>        <span class="hljs-type">int</span> dp1 = cost[<span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt; cost.<span class="hljs-built_in">size</span>(); i++) &#123;<br>            <span class="hljs-type">int</span> dpi = <span class="hljs-built_in">min</span>(dp0, dp1) + cost[i];<br>            dp0 = dp1; <span class="hljs-comment">// 记录一下前两位</span><br>            dp1 = dpi;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">min</span>(dp0, dp1);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Leetcode</category>
      
      <category>动态规划</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>动态规划</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>70.爬楼梯</title>
    <link href="/2022/06/28/70-%E7%88%AC%E6%A5%BC%E6%A2%AF/"/>
    <url>/2022/06/28/70-%E7%88%AC%E6%A5%BC%E6%A2%AF/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode.cn/problems/climbing-stairs/">力扣链接</a></p><p>假设你正在爬楼梯。需要 n 阶你才能到达楼顶。</p><p>每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？</p><span id="more"></span><p>示例 1：</p><pre><code class="hljs">输入：n = 2输出：2解释：有两种方法可以爬到楼顶。</code></pre><ol><li>1 阶 + 1 阶</li><li>2 阶<br>示例 2：</li></ol><pre><code class="hljs">输入：n = 3输出：3解释：有三种方法可以爬到楼顶。1. 1 阶 + 1 阶 + 1 阶2. 1 阶 + 2 阶3. 2 阶 + 1 阶</code></pre><p>提示：</p><ul><li>1 &lt;= n &lt;= 45</li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">int</span> dp[<span class="hljs-number">46</span>];<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">climbStairs</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>        dp[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>,dp[<span class="hljs-number">2</span>] = <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span> (n &lt; <span class="hljs-number">3</span>) <span class="hljs-keyword">return</span> n;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">3</span>;i &lt;= n;i++)<br>            dp[i] = dp[i - <span class="hljs-number">1</span>] + dp[i - <span class="hljs-number">2</span>];<br>        <span class="hljs-keyword">return</span> dp[n];<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Leetcode</category>
      
      <category>动态规划</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>动态规划</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>509.斐波那契数</title>
    <link href="/2022/06/28/509-%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0/"/>
    <url>/2022/06/28/509-%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode.cn/problems/fibonacci-number/">力扣链接</a></p><p>斐波那契数 （通常用 F(n) 表示）形成的序列称为 斐波那契数列 。该数列由 0 和 1 开始，后面的每一项数字都是前面两项数字的和。也就是：</p><span id="more"></span><pre><code class="hljs">F(0) = 0，F(1) = 1F(n) = F(n - 1) + F(n - 2)，其中 n &gt; 1</code></pre><p>给定 n ，请计算 F(n) 。</p><p>示例 1：</p><pre><code class="hljs">输入：n = 2输出：1解释：F(2) = F(1) + F(0) = 1 + 0 = 1</code></pre><p>示例 2：</p><pre><code class="hljs">输入：n = 3输出：2解释：F(3) = F(2) + F(1) = 1 + 1 = 2</code></pre><p>示例 3：</p><pre><code class="hljs">输入：n = 4输出：3解释：F(4) = F(3) + F(2) = 2 + 1 = 3</code></pre><p>提示：</p><ul><li>0 &lt;= n &lt;= 30</li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><h4 id="递归法"><a href="#递归法" class="headerlink" title="递归法"></a>递归法</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">fib</span><span class="hljs-params">(<span class="hljs-type">int</span> N)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (N &lt; <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> N;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">fib</span>(N - <span class="hljs-number">1</span>) + <span class="hljs-built_in">fib</span>(N - <span class="hljs-number">2</span>);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="动态规划法"><a href="#动态规划法" class="headerlink" title="动态规划法"></a>动态规划法</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">int</span> dp[<span class="hljs-number">2</span>];<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">fib</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (n &lt;= <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> n;<br>        dp[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>        dp[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt; n;i++)<br>        &#123;<br>            <span class="hljs-type">int</span> sum = dp[<span class="hljs-number">0</span>] + dp[<span class="hljs-number">1</span>];<br>            dp[<span class="hljs-number">0</span>] = dp[<span class="hljs-number">1</span>];<br>            dp[<span class="hljs-number">1</span>] = sum;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dp[<span class="hljs-number">1</span>];<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Leetcode</category>
      
      <category>动态规划</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>动态规划</tag>
      
      <tag>递归</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>动态规划理论</title>
    <link href="/2022/06/28/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%90%86%E8%AE%BA/"/>
    <url>/2022/06/28/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%90%86%E8%AE%BA/</url>
    
    <content type="html"><![CDATA[<h3 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h3><blockquote><p>每一个状态由上一个状态推导出来，故称动态规划</p></blockquote><span id="more"></span><h3 id="解题步骤"><a href="#解题步骤" class="headerlink" title="解题步骤"></a>解题步骤</h3><ul><li>确定dp数组（dp table）以及下标的含义</li><li>确定递推公式</li><li>dp数组如何初始化</li><li>确定遍历顺序</li><li>举例推导dp数组</li></ul><h3 id="参考例题"><a href="#参考例题" class="headerlink" title="参考例题"></a>参考例题</h3><blockquote><a href="/2022/06/24/77-%E7%BB%84%E5%90%88/" title="例：77-组合">例：77-组合</a></blockquote><p>斐波那契数，通常用 F(n) 表示，形成的序列称为 斐波那契数列 。该数列由 0 和 1 开始，后面的每一项数字都是前面两项数字的和。也就是： F(0) = 0，F(1) = 1 F(n) = F(n - 1) + F(n - 2)，其中 n &gt; 1 给你n ，请计算 F(n) 。</p><pre><code class="hljs">输入：2输出：1解释：F(2) = F(1) + F(0) = 1 + 0 = 1</code></pre><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">fib</span><span class="hljs-params">(<span class="hljs-type">int</span> N)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (N &lt;= <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> N;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">dp</span><span class="hljs-params">(N + <span class="hljs-number">1</span>)</span></span>;<br>        dp[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>        dp[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= N; i++) &#123;<br>            dp[i] = dp[i - <span class="hljs-number">1</span>] + dp[i - <span class="hljs-number">2</span>];<br>        &#125;<br>        <span class="hljs-keyword">return</span> dp[N];<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>动态规划</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>376.摆动序列</title>
    <link href="/2022/06/27/376-%E6%91%86%E5%8A%A8%E5%BA%8F%E5%88%97/"/>
    <url>/2022/06/27/376-%E6%91%86%E5%8A%A8%E5%BA%8F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode.cn/problems/wiggle-subsequence/">力扣链接</a></p><p>如果连续数字之间的差严格地在正数和负数之间交替，则数字序列称为 摆动序列 。第一个差（如果存在的话）可能是正数或负数。仅有一个元素或者含两个不等元素的序列也视作摆动序列。</p><span id="more"></span><ul><li><p>例如， [1, 7, 4, 9, 2, 5] 是一个 摆动序列 ，因为差值 (6, -3, 5, -7, 3) 是正负交替出现的。</p></li><li><p>相反，[1, 4, 7, 2, 5] 和 [1, 7, 4, 5, 5] 不是摆动序列，第一个序列是因为它的前两个差值都是正数，第二个序列是因为它的最后一个差值为零。<br>子序列 可以通过从原始序列中删除一些（也可以不删除）元素来获得，剩下的元素保持其原始顺序。</p></li></ul><p>给你一个整数数组 nums ，返回 nums 中作为 摆动序列 的 最长子序列的长度 。</p><p>示例 1：</p><pre><code class="hljs">输入：nums = [1,7,4,9,2,5]输出：6解释：整个序列均为摆动序列，各元素之间的差值为 (6, -3, 5, -7, 3) 。</code></pre><p>示例 2：</p><pre><code class="hljs">输入：nums = [1,17,5,10,13,15,10,5,16,8]输出：7解释：这个序列包含几个长度为 7 摆动序列。其中一个是 [1, 17, 10, 13, 10, 16, 8] ，各元素之间的差值为 (16, -7, 3, -3, 6, -8) 。</code></pre><p>示例 3：</p><pre><code class="hljs">输入：nums = [1,2,3,4,5,6,7,8,9]输出：2</code></pre><p>提示：</p><ul><li>1 &lt;= nums.length &lt;= 1000</li><li>0 &lt;= nums[i] &lt;= 1000</li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><h4 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">wiggleMaxLength</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (nums.<span class="hljs-built_in">size</span>() &lt;= <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> curDiff = <span class="hljs-number">0</span>; <span class="hljs-comment">// 当前一对差值</span><br>        <span class="hljs-type">int</span> preDiff = <span class="hljs-number">0</span>; <span class="hljs-comment">// 前一对差值</span><br>        <span class="hljs-type">int</span> result = <span class="hljs-number">1</span>;  <span class="hljs-comment">// 记录峰值个数，序列默认序列最右边有一个峰值</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; i++) &#123;<br>            curDiff = nums[i + <span class="hljs-number">1</span>] - nums[i];<br>            <span class="hljs-comment">// 出现峰值</span><br>            <span class="hljs-keyword">if</span> ((curDiff &gt; <span class="hljs-number">0</span> &amp;&amp; preDiff &lt;= <span class="hljs-number">0</span>) || (preDiff &gt;= <span class="hljs-number">0</span> &amp;&amp; curDiff &lt; <span class="hljs-number">0</span>)) &#123;<br>                result++;<br>                preDiff = curDiff;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">wiggleMaxLength</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>    <span class="hljs-type">int</span> down = <span class="hljs-number">1</span>, up = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; nums.<span class="hljs-built_in">size</span>(); i++) &#123;<br>        <span class="hljs-keyword">if</span> (nums[i] &gt; nums[i - <span class="hljs-number">1</span>])<br>            up = down + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[i] &lt; nums[i - <span class="hljs-number">1</span>])<br>            down = up + <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> nums.<span class="hljs-built_in">size</span>() == <span class="hljs-number">0</span> ? <span class="hljs-number">0</span> : <span class="hljs-built_in">max</span>(down, up);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Leetcode</category>
      
      <category>贪心算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>贪心算法</tag>
      
      <tag>LeetCode</tag>
      
      <tag>动态规划</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>455.分发饼干</title>
    <link href="/2022/06/27/455-%E5%88%86%E5%8F%91%E9%A5%BC%E5%B9%B2/"/>
    <url>/2022/06/27/455-%E5%88%86%E5%8F%91%E9%A5%BC%E5%B9%B2/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode.cn/problems/assign-cookies/">力扣链接</a></p><p>假设你是一位很棒的家长，想要给你的孩子们一些小饼干。但是，每个孩子最多只能给一块饼干。</p><span id="more"></span><p>对每个孩子 i，都有一个胃口值 g[i]，这是能让孩子们满足胃口的饼干的最小尺寸；并且每块饼干 j，都有一个尺寸 s[j] 。如果 s[j] &gt;= g[i]，我们可以将这个饼干 j 分配给孩子 i ，这个孩子会得到满足。你的目标是尽可能满足越多数量的孩子，并输出这个最大数值。</p><p>示例 1:</p><pre><code class="hljs">输入: g = [1,2,3], s = [1,1]输出: 1解释: 你有三个孩子和两块小饼干，3个孩子的胃口值分别是：1,2,3。虽然你有两块小饼干，由于他们的尺寸都是1，你只能让胃口值是1的孩子满足。所以你应该输出1。</code></pre><p>示例 2:</p><pre><code class="hljs">输入: g = [1,2], s = [1,2,3]输出: 2解释: 你有两个孩子和三块小饼干，2个孩子的胃口值分别是1,2。你拥有的饼干数量和尺寸都足以让所有孩子满足。所以你应该输出2.</code></pre><p>提示：</p><ul><li>1 &lt;= g.length &lt;= 3 * 104</li><li>0 &lt;= s.length &lt;= 3 * 104</li><li>1 &lt;= g[i], s[j] &lt;= 231 - 1</li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><blockquote><p>思路：小饼干喂小胃口, 胃口能填饱到哪就是最大数值</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">findContentChildren</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; g, vector&lt;<span class="hljs-type">int</span>&gt;&amp; s)</span> </span>&#123;<br>        <span class="hljs-built_in">sort</span>(g.<span class="hljs-built_in">begin</span>(), g.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-built_in">sort</span>(s.<span class="hljs-built_in">begin</span>(), s.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-type">int</span> idx = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; s.<span class="hljs-built_in">size</span>();i++)<br>            <span class="hljs-keyword">if</span> (idx &lt; g.<span class="hljs-built_in">size</span>() &amp;&amp; g[idx] &lt;= s[i])<br>                idx++;<br>        <span class="hljs-keyword">return</span> idx;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Leetcode</category>
      
      <category>贪心算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>贪心算法</tag>
      
      <tag>LeetCode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>贪心算法理论</title>
    <link href="/2022/06/27/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95%E7%90%86%E8%AE%BA/"/>
    <url>/2022/06/27/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95%E7%90%86%E8%AE%BA/</url>
    
    <content type="html"><![CDATA[<h3 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h3><blockquote><p>贪心的本质是选择每一阶段的 <strong>局部最优</strong> ，从而达到全局最优。</p></blockquote><span id="more"></span><h3 id="解题步骤"><a href="#解题步骤" class="headerlink" title="解题步骤"></a>解题步骤</h3><ul><li>将问题分解为若干个子问题</li><li>找出适合的贪心策略</li><li>求解每一个子问题的最优解</li><li>将局部最优解堆叠成全局最优解</li></ul><h3 id="参考例题"><a href="#参考例题" class="headerlink" title="参考例题"></a>参考例题</h3><blockquote><a href="/2022/06/27/455-%E5%88%86%E5%8F%91%E9%A5%BC%E5%B9%B2/" title="例：455.分发饼干">例：455.分发饼干</a></blockquote><p>假设你是一位很棒的家长，想要给你的孩子们一些小饼干。但是，每个孩子最多只能给一块饼干。</p><p>对每个孩子 i，都有一个胃口值 g[i]，这是能让孩子们满足胃口的饼干的最小尺寸；并且每块饼干 j，都有一个尺寸 s[j] 。如果 s[j] &gt;= g[i]，我们可以将这个饼干 j 分配给孩子 i ，这个孩子会得到满足。你的目标是尽可能满足越多数量的孩子，并输出这个最大数值。</p><pre><code class="hljs">输入: g = [1,2,3], s = [1,1]输出: 1 解释:你有三个孩子和两块小饼干，3个孩子的胃口值分别是：1,2,3。虽然你有两块小饼干，由于他们的尺寸都是1，你只能让胃口值是1的孩子满足。所以你应该输出1。</code></pre><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">findContentChildren</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; g, vector&lt;<span class="hljs-type">int</span>&gt;&amp; s)</span> </span>&#123;<br>        <span class="hljs-built_in">sort</span>(g.<span class="hljs-built_in">begin</span>(), g.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-built_in">sort</span>(s.<span class="hljs-built_in">begin</span>(), s.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-type">int</span> index = s.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; <span class="hljs-comment">// 饼干数组的下标</span><br>        <span class="hljs-type">int</span> result = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = g.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>            <span class="hljs-keyword">if</span> (index &gt;= <span class="hljs-number">0</span> &amp;&amp; s[index] &gt;= g[i]) &#123;<br>                result++;<br>                index--;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>贪心算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>242.有效的字母异位词</title>
    <link href="/2022/06/27/242-%E6%9C%89%E6%95%88%E7%9A%84%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D/"/>
    <url>/2022/06/27/242-%E6%9C%89%E6%95%88%E7%9A%84%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode.cn/problems/valid-anagram/">力扣链接</a></p><p>给定两个字符串 s 和 t ，编写一个函数来判断 t 是否是 s 的字母异位词。</p><span id="more"></span><p>注意：若 s 和 t 中每个字符出现的次数都相同，则称 s 和 t 互为字母异位词。</p><p>示例 1:</p><pre><code class="hljs">输入: s = &quot;anagram&quot;, t = &quot;nagaram&quot;    输出: true</code></pre><p>示例 2:</p><pre><code class="hljs">输入: s = &quot;rat&quot;, t = &quot;car&quot;输出: false</code></pre><p>提示:</p><ul><li>1 &lt;= s.length, t.length &lt;= 5 * 104</li><li>s 和 t 仅包含小写字母</li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isAnagram</span><span class="hljs-params">(string s, string t)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> record[<span class="hljs-number">26</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; s.<span class="hljs-built_in">size</span>(); i++)<br>            record[s[i] - <span class="hljs-string">&#x27;a&#x27;</span>]++;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; t.<span class="hljs-built_in">size</span>(); i++)<br>            record[t[i] - <span class="hljs-string">&#x27;a&#x27;</span>]--;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">26</span>; i++)<br>            <span class="hljs-keyword">if</span> (record[i] != <span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Leetcode</category>
      
      <category>哈希表</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>哈希表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VScode 安装 JetBrains Mono 字体</title>
    <link href="/2022/06/27/%E5%AD%97%E4%BD%93/"/>
    <url>/2022/06/27/%E5%AD%97%E4%BD%93/</url>
    
    <content type="html"><![CDATA[<h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><ol><li><h4 id="字体下载"><a href="#字体下载" class="headerlink" title="字体下载"></a>字体下载</h4><ul><li><a href="https://www.jetbrains.com/zh-cn/lp/mono/">点击跳转官网</a></li></ul></li><li><h4 id="字体安装"><a href="#字体安装" class="headerlink" title="字体安装"></a>字体安装</h4><ul><li>解压所下压缩包 全选/ttf下文件 </li><li>复制至 <code>C:\Windows\Fonts</code> 内进行安装</li><li><img src="https://api2.mubu.com/v3/document_image/4d053bda-3878-4b27-8fe7-70131e0b1c92-785422.jpg"></li></ul></li><li><h4 id="字体应用"><a href="#字体应用" class="headerlink" title="字体应用"></a>字体应用</h4><ul><li>打开 VScode-设置（左下角齿轮） 或 <code>Ctrl + \</code></li><li>将 Font Family 更改为 <code>JetBrains Mono</code></li><li><img src="https://api2.mubu.com/v3/document_image/18e67fec-00e0-48b7-bcfc-e25c7837b566-785422.jpg"></li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>环境搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>字体</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>37.解数独</title>
    <link href="/2022/06/27/37-%E8%A7%A3%E6%95%B0%E7%8B%AC/"/>
    <url>/2022/06/27/37-%E8%A7%A3%E6%95%B0%E7%8B%AC/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode.cn/problems/sudoku-solver/description/">力扣链接</a></p><p>编写一个程序，通过填充空格来解决数独问题。</p><span id="more"></span><p>数独的解法需 遵循如下规则：</p><ol><li>数字 <code>1-9</code> 在每一行只能出现一次。</li><li>数字 <code>1-9</code> 在每一列只能出现一次。</li><li>数字 <code>1-9</code> 在每一个以粗实线分隔的 3x3 宫内只能出现一次。（请参考示例图）<br>数独部分空格内已填入了数字，空白格用 <code>&#39;.&#39;</code> 表示。</li></ol><p>示例 1：<br><img src="https://api2.mubu.com/v3/document_image/0bb1ffd6-931e-4e29-9097-f90620bdb277-785422.jpg"></p><pre><code class="hljs">输入：board = [[&quot;5&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;,&quot;9&quot;,&quot;5&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;9&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;],[&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;3&quot;],[&quot;4&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;],[&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;],[&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;8&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;4&quot;,&quot;1&quot;,&quot;9&quot;,&quot;.&quot;,&quot;.&quot;,&quot;5&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;9&quot;]]输出：[[&quot;5&quot;,&quot;3&quot;,&quot;4&quot;,&quot;6&quot;,&quot;7&quot;,&quot;8&quot;,&quot;9&quot;,&quot;1&quot;,&quot;2&quot;],[&quot;6&quot;,&quot;7&quot;,&quot;2&quot;,&quot;1&quot;,&quot;9&quot;,&quot;5&quot;,&quot;3&quot;,&quot;4&quot;,&quot;8&quot;],[&quot;1&quot;,&quot;9&quot;,&quot;8&quot;,&quot;3&quot;,&quot;4&quot;,&quot;2&quot;,&quot;5&quot;,&quot;6&quot;,&quot;7&quot;],[&quot;8&quot;,&quot;5&quot;,&quot;9&quot;,&quot;7&quot;,&quot;6&quot;,&quot;1&quot;,&quot;4&quot;,&quot;2&quot;,&quot;3&quot;],[&quot;4&quot;,&quot;2&quot;,&quot;6&quot;,&quot;8&quot;,&quot;5&quot;,&quot;3&quot;,&quot;7&quot;,&quot;9&quot;,&quot;1&quot;],[&quot;7&quot;,&quot;1&quot;,&quot;3&quot;,&quot;9&quot;,&quot;2&quot;,&quot;4&quot;,&quot;8&quot;,&quot;5&quot;,&quot;6&quot;],[&quot;9&quot;,&quot;6&quot;,&quot;1&quot;,&quot;5&quot;,&quot;3&quot;,&quot;7&quot;,&quot;2&quot;,&quot;8&quot;,&quot;4&quot;],[&quot;2&quot;,&quot;8&quot;,&quot;7&quot;,&quot;4&quot;,&quot;1&quot;,&quot;9&quot;,&quot;6&quot;,&quot;3&quot;,&quot;5&quot;],[&quot;3&quot;,&quot;4&quot;,&quot;5&quot;,&quot;2&quot;,&quot;8&quot;,&quot;6&quot;,&quot;1&quot;,&quot;7&quot;,&quot;9&quot;]]解释：输入的数独如上图所示，唯一有效的解决方案如下所示：</code></pre><p><img src="https://api2.mubu.com/v3/document_image/563e5c7c-7128-40da-a7a8-6ccfd379a6b8-785422.jpg"></p><p>提示：</p><ul><li>board.length == 9</li><li>board[i].length == 9</li><li>board[i][j] 是一位数字或者 ‘.’</li><li>题目数据 保证 输入数独仅有一个解</li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">backtracking</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">char</span>&gt;&gt;&amp; board)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; board.<span class="hljs-built_in">size</span>(); i++) &#123;        <span class="hljs-comment">// 遍历行</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; board[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>(); j++) &#123; <span class="hljs-comment">// 遍历列</span><br>            <span class="hljs-keyword">if</span> (board[i][j] != <span class="hljs-string">&#x27;.&#x27;</span>) <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> k = <span class="hljs-string">&#x27;1&#x27;</span>; k &lt;= <span class="hljs-string">&#x27;9&#x27;</span>; k++) &#123;     <span class="hljs-comment">// (i, j) 这个位置放k是否合适</span><br>                <span class="hljs-keyword">if</span> (<span class="hljs-built_in">isValid</span>(i, j, k, board)) &#123;<br>                    board[i][j] = k;                <span class="hljs-comment">// 放置k</span><br>                    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">backtracking</span>(board)) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>; <span class="hljs-comment">// 如果找到合适一组立刻返回</span><br>                    board[i][j] = <span class="hljs-string">&#x27;.&#x27;</span>;              <span class="hljs-comment">// 回溯，撤销k</span><br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;                           <span class="hljs-comment">// 9个数都试完了，都不行，那么就返回false</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>; <span class="hljs-comment">// 遍历完没有返回false，说明找到了合适棋盘位置了</span><br>&#125;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isValid</span><span class="hljs-params">(<span class="hljs-type">int</span> row, <span class="hljs-type">int</span> col, <span class="hljs-type">char</span> val, vector&lt;vector&lt;<span class="hljs-type">char</span>&gt;&gt;&amp; board)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">9</span>; i++) &#123; <span class="hljs-comment">// 判断行里是否重复</span><br>        <span class="hljs-keyword">if</span> (board[row][i] == val) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">9</span>; j++) &#123; <span class="hljs-comment">// 判断列里是否重复</span><br>        <span class="hljs-keyword">if</span> (board[j][col] == val) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-type">int</span> startRow = (row / <span class="hljs-number">3</span>) * <span class="hljs-number">3</span>;<br>    <span class="hljs-type">int</span> startCol = (col / <span class="hljs-number">3</span>) * <span class="hljs-number">3</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = startRow; i &lt; startRow + <span class="hljs-number">3</span>; i++) &#123; <span class="hljs-comment">// 判断9方格里是否重复</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = startCol; j &lt; startCol + <span class="hljs-number">3</span>; j++) &#123;<br>            <span class="hljs-keyword">if</span> (board[i][j] == val ) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solveSudoku</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">char</span>&gt;&gt;&amp; board)</span> </span>&#123;<br>        <span class="hljs-built_in">backtracking</span>(board);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Leetcode</category>
      
      <category>回溯算法</category>
      
      <category>子集</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>回溯算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>51.N皇后</title>
    <link href="/2022/06/26/51-N%E7%9A%87%E5%90%8E/"/>
    <url>/2022/06/26/51-N%E7%9A%87%E5%90%8E/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode.cn/problems/n-queens/">力扣链接</a></p><p>按照国际象棋的规则，皇后可以攻击与之处在同一行或同一列或同一斜线上的棋子。</p><span id="more"></span><p>n 皇后问题 研究的是如何将 n 个皇后放置在 n×n 的棋盘上，并且使皇后彼此之间不能相互攻击。</p><p>给你一个整数 n ，返回所有不同的 n 皇后问题 的解决方案。</p><p>每一种解法包含一个不同的 n 皇后问题 的棋子放置方案，该方案中 ‘Q’ 和 ‘.’ 分别代表了皇后和空位。</p><p>示例 1：<br><img src="https://api2.mubu.com/v3/document_image/701ada93-ea82-4c06-914e-166a80f614ff-785422.jpg"></p><pre><code class="hljs">输入：n = 4输出：[[&quot;.Q..&quot;,&quot;...Q&quot;,&quot;Q...&quot;,&quot;..Q.&quot;],[&quot;..Q.&quot;,&quot;Q...&quot;,&quot;...Q&quot;,&quot;.Q..&quot;]]解释：如上图所示，4 皇后问题存在两个不同的解法。</code></pre><p>示例 2：</p><pre><code class="hljs">输入：n = 1输出：[[&quot;Q&quot;]]</code></pre><p>提示：</p><ul><li>1 &lt;= n &lt;= 9</li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><blockquote><p>深度 作为棋盘的高度<br>循环i作为棋盘的宽度</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span><br>&#123;<br><span class="hljs-keyword">private</span>:<br>    vector&lt;vector&lt;string&gt;&gt; result;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">backTracking</span><span class="hljs-params">(<span class="hljs-type">int</span> n, vector&lt;string&gt; &amp;path, <span class="hljs-type">int</span> depth)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (depth == n)<br>        &#123;<br>            result.<span class="hljs-built_in">push_back</span>(path);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">isVaild</span>(path, depth, i, n))<br>            &#123;<br>                path[depth][i] = <span class="hljs-string">&#x27;Q&#x27;</span>;<br>                <span class="hljs-built_in">backTracking</span>(n, path, depth + <span class="hljs-number">1</span>);<br>                path[depth][i] = <span class="hljs-string">&#x27;.&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>                <span class="hljs-keyword">continue</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isVaild</span><span class="hljs-params">(vector&lt;string&gt; &amp;path, <span class="hljs-type">int</span> row, <span class="hljs-type">int</span> col, <span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; row; i++)<br>            <span class="hljs-keyword">if</span> (path[i][col] == <span class="hljs-string">&#x27;Q&#x27;</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = row - <span class="hljs-number">1</span>, j = col - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span> &amp;&amp; j &gt;= <span class="hljs-number">0</span>; i--, j--)<br>            <span class="hljs-keyword">if</span> (path[i][j] == <span class="hljs-string">&#x27;Q&#x27;</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = row - <span class="hljs-number">1</span>, j = col + <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span> &amp;&amp; j &lt; n; i--, j++)<br>            <span class="hljs-keyword">if</span> (path[i][j] == <span class="hljs-string">&#x27;Q&#x27;</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br><span class="hljs-keyword">public</span>:<br>    vector&lt;vector&lt;string&gt;&gt; <span class="hljs-built_in">solveNQueens</span>(<span class="hljs-type">int</span> n)<br>    &#123;<br>        <span class="hljs-function">vector&lt;string&gt; <span class="hljs-title">path</span><span class="hljs-params">(n, string(n, <span class="hljs-string">&#x27;.&#x27;</span>))</span></span>;<br>        <span class="hljs-built_in">backTracking</span>(n, path, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Leetcode</category>
      
      <category>回溯算法</category>
      
      <category>子集</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>回溯算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>332.重新安排行程</title>
    <link href="/2022/06/26/332-%E9%87%8D%E6%96%B0%E5%AE%89%E6%8E%92%E8%A1%8C%E7%A8%8B/"/>
    <url>/2022/06/26/332-%E9%87%8D%E6%96%B0%E5%AE%89%E6%8E%92%E8%A1%8C%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode.cn/problems/reconstruct-itinerary/">力扣链接</a></p><p>给你一份航线列表 tickets ，其中 tickets[i] = [fromi, toi] 表示飞机出发和降落的机场地点。请你对该行程进行重新规划排序。</p><span id="more"></span><p>所有这些机票都属于一个从 JFK（肯尼迪国际机场）出发的先生，所以该行程必须从 JFK 开始。如果存在多种有效的行程，请你按字典排序返回最小的行程组合。</p><ul><li>例如，行程 [“JFK”, “LGA”] 与 [“JFK”, “LGB”] 相比就更小，排序更靠前。<br>假定所有机票至少存在一种合理的行程。且所有的机票 必须都用一次 且 只能用一次。</li></ul><p>示例 1：</p><p><img src="https://api2.mubu.com/v3/document_image/4697f3e7-6410-4d25-8b8d-1d5e57e84683-785422.jpg"></p><pre><code class="hljs">输入：tickets = [[&quot;MUC&quot;,&quot;LHR&quot;],[&quot;JFK&quot;,&quot;MUC&quot;],[&quot;SFO&quot;,&quot;SJC&quot;],[&quot;LHR&quot;,&quot;SFO&quot;]]输出：[&quot;JFK&quot;,&quot;MUC&quot;,&quot;LHR&quot;,&quot;SFO&quot;,&quot;SJC&quot;]</code></pre><p>示例 2：</p><p><img src="https://api2.mubu.com/v3/document_image/b4f46276-5930-47c8-82ce-7049856f5573-785422.jpg"></p><pre><code class="hljs">输入：tickets = [[&quot;JFK&quot;,&quot;SFO&quot;],[&quot;JFK&quot;,&quot;ATL&quot;],[&quot;SFO&quot;,&quot;ATL&quot;],[&quot;ATL&quot;,&quot;JFK&quot;],[&quot;ATL&quot;,&quot;SFO&quot;]]输出：[&quot;JFK&quot;,&quot;ATL&quot;,&quot;JFK&quot;,&quot;SFO&quot;,&quot;ATL&quot;,&quot;SFO&quot;]解释：另一种有效的行程是 [&quot;JFK&quot;,&quot;SFO&quot;,&quot;ATL&quot;,&quot;JFK&quot;,&quot;ATL&quot;,&quot;SFO&quot;] ，但是它字典排序更大更靠后。</code></pre><p>提示：</p><ul><li>1 &lt;= tickets.length &lt;= 300</li><li>tickets[i].length == 2</li><li>fromi.length == 3</li><li>toi.length == 3</li><li>fromi 和 toi 由大写英文字母组成</li><li>fromi != toi</li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><blockquote><p>代码来源：代码随想录</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-comment">// unordered_map&lt;出发机场, map&lt;到达机场, 航班次数&gt;&gt; targets</span><br>unordered_map&lt;string, map&lt;string, <span class="hljs-type">int</span>&gt;&gt; targets;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">backtracking</span><span class="hljs-params">(<span class="hljs-type">int</span> ticketNum, vector&lt;string&gt;&amp; result)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (result.<span class="hljs-built_in">size</span>() == ticketNum + <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (pair&lt;<span class="hljs-type">const</span> string, <span class="hljs-type">int</span>&gt;&amp; target : targets[result[result.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>]]) &#123;<br>        <span class="hljs-keyword">if</span> (target.second &gt; <span class="hljs-number">0</span> ) &#123; <span class="hljs-comment">// 记录到达机场是否飞过了</span><br>            result.<span class="hljs-built_in">push_back</span>(target.first);<br>            target.second--;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">backtracking</span>(ticketNum, result)) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            result.<span class="hljs-built_in">pop_back</span>();<br>            target.second++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;string&gt; <span class="hljs-title">findItinerary</span><span class="hljs-params">(vector&lt;vector&lt;string&gt;&gt;&amp; tickets)</span> </span>&#123;<br>        targets.<span class="hljs-built_in">clear</span>();<br>        vector&lt;string&gt; result;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">const</span> vector&lt;string&gt;&amp; vec : tickets) &#123;<br>            targets[vec[<span class="hljs-number">0</span>]][vec[<span class="hljs-number">1</span>]]++; <span class="hljs-comment">// 记录映射关系</span><br>        &#125;<br>        result.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&quot;JFK&quot;</span>); <span class="hljs-comment">// 起始机场</span><br>        <span class="hljs-built_in">backtracking</span>(tickets.<span class="hljs-built_in">size</span>(), result);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Leetcode</category>
      
      <category>回溯算法</category>
      
      <category>子集</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>回溯算法</tag>
      
      <tag>欧拉图</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>47.全排列II</title>
    <link href="/2022/06/26/47-%E5%85%A8%E6%8E%92%E5%88%97II/"/>
    <url>/2022/06/26/47-%E5%85%A8%E6%8E%92%E5%88%97II/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode.cn/problems/permutations-ii/">力扣链接</a></p><p>给定一个可包含重复数字的序列 nums ，按任意顺序 返回所有不重复的全排列。</p><span id="more"></span><p>示例 1：</p><pre><code class="hljs">输入：nums = [1,1,2]输出：[[1,1,2],[1,2,1],[2,1,1]]</code></pre><p>示例 2：</p><pre><code class="hljs">输入：nums = [1,2,3]输出：[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]</code></pre><p>提示：</p><ul><li>1 &lt;= nums.length &lt;= 8</li><li>-10 &lt;= nums[i] &lt;= 10</li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span><br>&#123;<br><span class="hljs-keyword">private</span>:<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; result;<br>    vector&lt;<span class="hljs-type">int</span>&gt; path;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">backTracking</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;nums, vector&lt;<span class="hljs-type">bool</span>&gt; &amp;used, <span class="hljs-type">int</span> idx)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (path.<span class="hljs-built_in">size</span>() == nums.<span class="hljs-built_in">size</span>())<br>            result.<span class="hljs-built_in">push_back</span>(path);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.<span class="hljs-built_in">size</span>(); i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">0</span> &amp;&amp; nums[i] == nums[i - <span class="hljs-number">1</span>] &amp;&amp; used[i - <span class="hljs-number">1</span>] == <span class="hljs-literal">false</span>)<br>                <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">if</span> (used[i] == <span class="hljs-literal">false</span>)<br>            &#123;<br>                used[i] = <span class="hljs-literal">true</span>;<br>                path.<span class="hljs-built_in">push_back</span>(nums[i]);<br>                <span class="hljs-built_in">backTracking</span>(nums, used, i);<br>                path.<span class="hljs-built_in">pop_back</span>();<br>                used[i] = <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br><span class="hljs-keyword">public</span>:<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">permuteUnique</span>(vector&lt;<span class="hljs-type">int</span>&gt; &amp;nums)<br>    &#123;<br>        <span class="hljs-built_in">sort</span>(nums.<span class="hljs-built_in">begin</span>(), nums.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">bool</span>&gt; <span class="hljs-title">used</span><span class="hljs-params">(nums.size(), <span class="hljs-literal">false</span>)</span></span>;<br>        <span class="hljs-built_in">backTracking</span>(nums, used, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Leetcode</category>
      
      <category>回溯算法</category>
      
      <category>子集</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>回溯算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>46.全排列</title>
    <link href="/2022/06/26/46-%E5%85%A8%E6%8E%92%E5%88%97/"/>
    <url>/2022/06/26/46-%E5%85%A8%E6%8E%92%E5%88%97/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode.cn/problems/permutations/">力扣链接</a></p><p>给定一个不含重复数字的数组 nums ，返回其 所有可能的全排列 。你可以 <strong>按任意顺序</strong> 返回答案。</p><span id="more"></span><p>示例 1：</p><pre><code class="hljs">输入：nums = [1,2,3]输出：[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]</code></pre><p>示例 2：</p><pre><code class="hljs">输入：nums = [0,1]输出：[[0,1],[1,0]]</code></pre><p>示例 3：</p><pre><code class="hljs">输入：nums = [1]输出：[[1]]</code></pre><p>提示：</p><ul><li>1 &lt;= nums.length &lt;= 6</li><li>-10 &lt;= nums[i] &lt;= 10</li><li>nums 中的所有整数 <strong>互不相同</strong></li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span><br>&#123;<br><span class="hljs-keyword">private</span>:<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; result;<br>    vector&lt;<span class="hljs-type">int</span>&gt; path;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">backTracking</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;nums, vector&lt;<span class="hljs-type">bool</span>&gt; &amp;used)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (path.<span class="hljs-built_in">size</span>() == nums.<span class="hljs-built_in">size</span>())<br>            result.<span class="hljs-built_in">push_back</span>(path);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.<span class="hljs-built_in">size</span>(); i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (used[i] == <span class="hljs-literal">true</span>)<br>                <span class="hljs-keyword">continue</span>; <span class="hljs-comment">// path里已经收录的元素，直接跳过</span><br>            used[i] = <span class="hljs-literal">true</span>;<br>            path.<span class="hljs-built_in">push_back</span>(nums[i]);<br>            <span class="hljs-built_in">backTracking</span>(nums, used);<br>            path.<span class="hljs-built_in">pop_back</span>();<br>            used[i] = <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br><span class="hljs-keyword">public</span>:<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">permute</span>(vector&lt;<span class="hljs-type">int</span>&gt; &amp;nums)<br>    &#123;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">bool</span>&gt; <span class="hljs-title">used</span><span class="hljs-params">(nums.size(), <span class="hljs-literal">false</span>)</span></span>;<br>        <span class="hljs-built_in">backTracking</span>(nums, used);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Leetcode</category>
      
      <category>回溯算法</category>
      
      <category>子集</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>回溯算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>491.递增子序列</title>
    <link href="/2022/06/26/491-%E9%80%92%E5%A2%9E%E5%AD%90%E5%BA%8F%E5%88%97/"/>
    <url>/2022/06/26/491-%E9%80%92%E5%A2%9E%E5%AD%90%E5%BA%8F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode.cn/problems/increasing-subsequences/">力扣链接</a></p><p>给你一个整数数组 nums ，找出并返回所有该数组中不同的递增子序列，递增子序列中 <strong>至少有两个元素</strong> 。你可以按 <strong>任意顺序</strong> 返回答案。</p><span id="more"></span><p>数组中可能含有重复元素，如出现两个整数相等，也可以视作递增序列的一种特殊情况。</p><p>示例 1：</p><pre><code class="hljs">输入：nums = [4,6,7,7]输出：[[4,6],[4,6,7],[4,6,7,7],[4,7],[4,7,7],[6,7],[6,7,7],[7,7]]</code></pre><p>示例 2：</p><pre><code class="hljs">输入：nums = [4,4,3,2,1]输出：[[4,4]]</code></pre><p>提示：</p><ul><li>1 &lt;= nums.length &lt;= 15</li><li>-100 &lt;= nums[i] &lt;= 100</li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span><br>&#123;<br><span class="hljs-keyword">private</span>:<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; result;<br>    vector&lt;<span class="hljs-type">int</span>&gt; path;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">backtracking</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;nums, <span class="hljs-type">int</span> index, <span class="hljs-type">int</span> ln)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (path.<span class="hljs-built_in">size</span>() &gt;= <span class="hljs-number">2</span>)<br>            result.<span class="hljs-built_in">push_back</span>(path);<br>        unordered_set&lt;<span class="hljs-type">int</span>&gt; uset;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = index; i &lt; nums.<span class="hljs-built_in">size</span>(); i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> ((!path.<span class="hljs-built_in">empty</span>() &amp;&amp; nums[i] &lt; path.<span class="hljs-built_in">back</span>()) || uset.<span class="hljs-built_in">find</span>(nums[i]) != uset.<span class="hljs-built_in">end</span>())<br>                <span class="hljs-keyword">continue</span>;<br>            uset.<span class="hljs-built_in">insert</span>(nums[i]);<br>            path.<span class="hljs-built_in">push_back</span>(nums[i]);<br>            <span class="hljs-built_in">backtracking</span>(nums, i + <span class="hljs-number">1</span>, nums[i]);<br>            path.<span class="hljs-built_in">pop_back</span>();<br>        &#125;<br>    &#125;<br><br><span class="hljs-keyword">public</span>:<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">findSubsequences</span>(vector&lt;<span class="hljs-type">int</span>&gt; &amp;nums)<br>    &#123;<br>        <span class="hljs-built_in">backtracking</span>(nums, <span class="hljs-number">0</span>, nums[<span class="hljs-number">0</span>]);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Leetcode</category>
      
      <category>回溯算法</category>
      
      <category>子集</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>回溯算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>90.子集II</title>
    <link href="/2022/06/26/90-%E5%AD%90%E9%9B%86II/"/>
    <url>/2022/06/26/90-%E5%AD%90%E9%9B%86II/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode.cn/problems/subsets-ii/">力扣链接</a></p><p>给你一个整数数组 nums ，其中可能包含重复元素，请你返回该数组所有可能的子集（幂集）。</p><span id="more"></span><p>解集 <strong>不能</strong> 包含重复的子集。返回的解集中，子集可以按 <strong>任意顺序</strong> 排列。</p><p>示例 1：</p><pre><code class="hljs">输入：nums = [1,2,2]输出：[[],[1],[1,2],[1,2,2],[2],[2,2]]</code></pre><p>示例 2：</p><pre><code class="hljs">输入：nums = [0]输出：[[],[0]]</code></pre><p>提示：</p><ul><li>1 &lt;= nums.length &lt;= 10</li><li>-10 &lt;= nums[i] &lt;= 10</li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">private</span>:<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; result;<br>        vector&lt;<span class="hljs-type">int</span>&gt; path;<br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">backtracking</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums,<span class="hljs-type">int</span> index)</span></span><br><span class="hljs-function">        </span>&#123;<br>            result.<span class="hljs-built_in">push_back</span>(path);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = index;i &lt; nums.<span class="hljs-built_in">size</span>();i++)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (i &gt; index &amp;&amp; nums[i] == nums[i<span class="hljs-number">-1</span>])<br>                    <span class="hljs-keyword">continue</span>;<br>                path.<span class="hljs-built_in">push_back</span>(nums[i]);<br>                <span class="hljs-built_in">backtracking</span>(nums,i+<span class="hljs-number">1</span>);<br>                path.<span class="hljs-built_in">pop_back</span>();<br>            &#125;<br>        &#125;<br><span class="hljs-keyword">public</span>:<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">subsetsWithDup</span>(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums) &#123;<br>        <span class="hljs-built_in">sort</span>(nums.<span class="hljs-built_in">begin</span>(),nums.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-built_in">backtracking</span>(nums,<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Leetcode</category>
      
      <category>回溯算法</category>
      
      <category>子集</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>回溯算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>78.子集</title>
    <link href="/2022/06/25/78-%E5%AD%90%E9%9B%86/"/>
    <url>/2022/06/25/78-%E5%AD%90%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode.cn/problems/subsets/">力扣链接</a></p><p>给你一个整数数组 <code>nums</code> ，数组中的元素 <strong>互不相同</strong> 。返回该数组所有可能的子集（幂集）。</p><span id="more"></span><p>解集 <strong>不能</strong> 包含重复的子集。你可以按 <strong>任意顺序</strong> 返回解集。</p><p>示例 1：</p><pre><code class="hljs">输入：nums = [1,2,3]输出：[[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]</code></pre><p>示例 2：</p><pre><code class="hljs">输入：nums = [0]输出：[[],[0]]</code></pre><p>提示：</p><ul><li>1 &lt;= nums.length &lt;= 10</li><li>-10 &lt;= nums[i] &lt;= 10</li><li>nums 中的所有元素 互不相同</li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">private</span>:<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; result;<br>        vector&lt;<span class="hljs-type">int</span>&gt; path;<br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">backtracking</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums,<span class="hljs-type">int</span> index)</span></span><br><span class="hljs-function">        </span>&#123;<br>            result.<span class="hljs-built_in">push_back</span>(path);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = index;i &lt; nums.<span class="hljs-built_in">size</span>();i++)<br>            &#123;<br>                path.<span class="hljs-built_in">push_back</span>(nums[i]);<br>                <span class="hljs-built_in">backtracking</span>(nums,i+<span class="hljs-number">1</span>);<br>                path.<span class="hljs-built_in">pop_back</span>();<br>            &#125;<br>        &#125;<br><span class="hljs-keyword">public</span>:<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">subsets</span>(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums) &#123;<br>        <span class="hljs-built_in">backtracking</span>(nums,<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Leetcode</category>
      
      <category>回溯算法</category>
      
      <category>子集</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>回溯算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>93.复原IP地址</title>
    <link href="/2022/06/25/93-%E5%A4%8D%E5%8E%9FIP%E5%9C%B0%E5%9D%80/"/>
    <url>/2022/06/25/93-%E5%A4%8D%E5%8E%9FIP%E5%9C%B0%E5%9D%80/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode.cn/problems/restore-ip-addresses/">力扣链接</a></p><p><strong>有效 IP 地址</strong> 正好由四个整数（每个整数位于 0 到 255 之间组成，且不能含有前导 0），整数之间用 ‘.’ 分隔。</p><span id="more"></span><ul><li>例如：”0.1.2.201” 和 “192.168.1.1” 是 <strong>有效</strong> IP 地址，但是 “0.011.255.245”、”192.168.1.312” 和 “<a href="mailto:&#x31;&#57;&#x32;&#46;&#49;&#x36;&#x38;&#x40;&#x31;&#46;&#49;">&#x31;&#57;&#x32;&#46;&#49;&#x36;&#x38;&#x40;&#x31;&#46;&#49;</a>“ 是 <strong>无效</strong> IP 地址。<br>给定一个只包含数字的字符串 s ，用以表示一个 IP 地址，返回所有可能的<strong>有效 IP 地址</strong>，这些地址可以通过在 s 中插入 ‘.’ 来形成。你 <strong>不能</strong> 重新排序或删除 s 中的任何数字。你可以按 <strong>任何</strong> 顺序返回答案。</li></ul><p>示例 1：</p><pre><code class="hljs">输入：s = &quot;25525511135&quot;输出：[&quot;255.255.11.135&quot;,&quot;255.255.111.35&quot;]</code></pre><p>示例 2：</p><pre><code class="hljs">输入：s = &quot;0000&quot;输出：[&quot;0.0.0.0&quot;]</code></pre><p>示例 3：</p><pre><code class="hljs">输入：s = &quot;101023&quot;输出：[&quot;1.0.10.23&quot;,&quot;1.0.102.3&quot;,&quot;10.1.0.23&quot;,&quot;10.10.2.3&quot;,&quot;101.0.2.3&quot;]</code></pre><p>提示：</p><ul><li>1 &lt;= s.length &lt;= 20</li><li>s 仅由数字组成</li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><blockquote><p>代码来源：代码随想录</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">private</span>:<br>    vector&lt;string&gt; result;<span class="hljs-comment">// 记录结果</span><br>    <span class="hljs-comment">// startIndex: 搜索的起始位置，pointNum:添加逗点的数量</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">backtracking</span><span class="hljs-params">(string&amp; s, <span class="hljs-type">int</span> startIndex, <span class="hljs-type">int</span> pointNum)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (pointNum == <span class="hljs-number">3</span>) &#123; <span class="hljs-comment">// 逗点数量为3时，分隔结束</span><br>            <span class="hljs-comment">// 判断第四段子字符串是否合法，如果合法就放进result中</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">isValid</span>(s, startIndex, s.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>)) &#123;<br>                result.<span class="hljs-built_in">push_back</span>(s);<br>            &#125;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = startIndex; i &lt; s.<span class="hljs-built_in">size</span>(); i++) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">isValid</span>(s, startIndex, i)) &#123; <span class="hljs-comment">// 判断 [startIndex,i] 这个区间的子串是否合法</span><br>                s.<span class="hljs-built_in">insert</span>(s.<span class="hljs-built_in">begin</span>() + i + <span class="hljs-number">1</span> , <span class="hljs-string">&#x27;.&#x27;</span>);  <span class="hljs-comment">// 在i的后面插入一个逗点</span><br>                pointNum++;<br>                <span class="hljs-built_in">backtracking</span>(s, i + <span class="hljs-number">2</span>, pointNum);   <span class="hljs-comment">// 插入逗点之后下一个子串的起始位置为i+2</span><br>                pointNum--;                         <span class="hljs-comment">// 回溯</span><br>                s.<span class="hljs-built_in">erase</span>(s.<span class="hljs-built_in">begin</span>() + i + <span class="hljs-number">1</span>);         <span class="hljs-comment">// 回溯删掉逗点</span><br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">break</span>; <span class="hljs-comment">// 不合法，直接结束本层循环</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 判断字符串s在左闭又闭区间[start, end]所组成的数字是否合法</span><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isValid</span><span class="hljs-params">(<span class="hljs-type">const</span> string&amp; s, <span class="hljs-type">int</span> start, <span class="hljs-type">int</span> end)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (start &gt; end) <br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">if</span> (s[start] == <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; start != end)  <span class="hljs-comment">// 0开头的数字不合法</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-type">int</span> num = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = start; i &lt;= end; i++) &#123;<br>            <span class="hljs-keyword">if</span> (s[i] &gt; <span class="hljs-string">&#x27;9&#x27;</span> || s[i] &lt; <span class="hljs-string">&#x27;0&#x27;</span>) &#123; <span class="hljs-comment">// 遇到非数字字符不合法</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>            num = num * <span class="hljs-number">10</span> + (s[i] - <span class="hljs-string">&#x27;0&#x27;</span>);<br>            <span class="hljs-keyword">if</span> (num &gt; <span class="hljs-number">255</span>) &#123; <span class="hljs-comment">// 如果大于255了不合法</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;string&gt; <span class="hljs-title">restoreIpAddresses</span><span class="hljs-params">(string s)</span> </span>&#123;<br>        result.<span class="hljs-built_in">clear</span>();<br>        <span class="hljs-keyword">if</span> (s.<span class="hljs-built_in">size</span>() &lt; <span class="hljs-number">4</span> || s.<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">12</span>) <span class="hljs-keyword">return</span> result; <span class="hljs-comment">// 算是剪枝了</span><br>        <span class="hljs-built_in">backtracking</span>(s, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Leetcode</category>
      
      <category>回溯算法</category>
      
      <category>组合</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>回溯算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>131.分割回文串</title>
    <link href="/2022/06/25/131-%E5%88%86%E5%89%B2%E5%9B%9E%E6%96%87%E4%B8%B2/"/>
    <url>/2022/06/25/131-%E5%88%86%E5%89%B2%E5%9B%9E%E6%96%87%E4%B8%B2/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode.cn/problems/palindrome-partitioning/">力扣链接</a></p><p>给你一个字符串 s，请你将 s 分割成一些子串，使每个子串都是 回文串 。返回 s 所有可能的分割方案。</p><span id="more"></span><p>回文串 是正着读和反着读都一样的字符串。</p><p>示例 1：</p><pre><code class="hljs">输入：s = &quot;aab&quot;输出：[[&quot;a&quot;,&quot;a&quot;,&quot;b&quot;],[&quot;aa&quot;,&quot;b&quot;]]</code></pre><p>示例 2：</p><pre><code class="hljs">输入：s = &quot;a&quot;输出：[[&quot;a&quot;]]</code></pre><p>提示：</p><ul><li>1 &lt;= s.length &lt;= 16</li><li>s 仅由小写英文字母组成</li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><blockquote><p>思路：<br>按 回溯法 分割子串<br>判断是否为回文<br><strong>! 要认清 <code>i</code> 与 <code>startIndex</code> 的关系</strong> </p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span><br>&#123;<br><span class="hljs-keyword">private</span>:<br>    vector&lt;vector&lt;string&gt;&gt; result;<br>    vector&lt;string&gt; path; <span class="hljs-comment">// 放已经回文的子串</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">backtracking</span><span class="hljs-params">(<span class="hljs-type">const</span> string &amp;s, <span class="hljs-type">int</span> startIndex)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">// 如果起始位置已经大于s的大小，说明已经找到了一组分割方案了</span><br>        <span class="hljs-keyword">if</span> (startIndex &gt;= s.<span class="hljs-built_in">size</span>())<br>        &#123;<br>            result.<span class="hljs-built_in">push_back</span>(path);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = startIndex; i &lt; s.<span class="hljs-built_in">size</span>(); i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">isPalindrome</span>(s, startIndex, i))<br>            &#123; <span class="hljs-comment">// 是回文子串</span><br>                <span class="hljs-comment">// 获取[startIndex,i]在s中的子串</span><br>                string str = s.<span class="hljs-built_in">substr</span>(startIndex, i - startIndex + <span class="hljs-number">1</span>);<br>                path.<span class="hljs-built_in">push_back</span>(str);<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123; <span class="hljs-comment">// 不是回文，跳过</span><br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-built_in">backtracking</span>(s, i + <span class="hljs-number">1</span>); <span class="hljs-comment">// 寻找i+1为起始位置的子串</span><br>            path.<span class="hljs-built_in">pop_back</span>();        <span class="hljs-comment">// 回溯过程，弹出本次已经填在的子串</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isPalindrome</span><span class="hljs-params">(<span class="hljs-type">const</span> string &amp;s, <span class="hljs-type">int</span> start, <span class="hljs-type">int</span> end)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (start == end)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = start, j = end; i &lt; j; i++, j--)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (s[i] != s[j])<br>            &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br><span class="hljs-keyword">public</span>:<br>    vector&lt;vector&lt;string&gt;&gt; <span class="hljs-built_in">partition</span>(string s)<br>    &#123;<br>        result.<span class="hljs-built_in">clear</span>();<br>        path.<span class="hljs-built_in">clear</span>();<br>        <span class="hljs-built_in">backtracking</span>(s, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Leetcode</category>
      
      <category>回溯算法</category>
      
      <category>组合</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>回溯算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>40.组合总和II</title>
    <link href="/2022/06/25/40-%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8CII/"/>
    <url>/2022/06/25/40-%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8CII/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode.cn/problems/combination-sum-ii/">力扣链接</a></p><p>给定一个候选人编号的集合 <code>candidates</code> 和一个目标数 <code>target</code> ，找出 <code>candidates</code> 中所有可以使数字和为 <code>target</code> 的组合。</p><span id="more"></span><p><code>candidates</code> 中的每个数字在每个组合中只能使用 <strong>一次</strong> 。</p><p>注意：解集不能包含重复的组合。 </p><p>示例 1:</p><pre><code class="hljs">输入: candidates = [10,1,2,7,6,1,5], target = 8,输出:[[1,1,6],[1,2,5],[1,7],[2,6]]</code></pre><p>示例 2:</p><pre><code class="hljs">输入: candidates = [2,5,2,1,2], target = 5,输出:[[1,2,2],[5]]</code></pre><p>提示:</p><ul><li>1 &lt;= candidates.length &lt;= 100</li><li>1 &lt;= candidates[i] &lt;= 50</li><li>1 &lt;= target &lt;= 30</li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><blockquote><p><strong>难点</strong>：<br>本题 candidates 中的每个数字在每个组合中只能使用一次。<br>本题 candidates 的元素是有重复的，</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span><br>&#123;<br><span class="hljs-keyword">private</span>:<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; result;<br>    vector&lt;<span class="hljs-type">int</span>&gt; path;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">backtracking</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;candidates, <span class="hljs-type">int</span> target, <span class="hljs-type">int</span> index, <span class="hljs-type">int</span> sum)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (sum == target)<br>        &#123;<br>            result.<span class="hljs-built_in">push_back</span>(path);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = index; i &lt; candidates.<span class="hljs-built_in">size</span>() &amp;&amp; sum + candidates[i] &lt;= target; i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (i &gt; index &amp;&amp; candidates[i] == candidates[i - <span class="hljs-number">1</span>])<br>                <span class="hljs-keyword">continue</span>;<br>            path.<span class="hljs-built_in">push_back</span>(candidates[i]);<br>            <span class="hljs-built_in">backtracking</span>(candidates, target, i + <span class="hljs-number">1</span>, sum + candidates[i]);<br>            path.<span class="hljs-built_in">pop_back</span>();<br>        &#125;<br>    &#125;<br><br><span class="hljs-keyword">public</span>:<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">combinationSum2</span>(vector&lt;<span class="hljs-type">int</span>&gt; &amp;candidates, <span class="hljs-type">int</span> target)<br>    &#123;<br>        <span class="hljs-built_in">sort</span>(candidates.<span class="hljs-built_in">begin</span>(), candidates.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-built_in">backtracking</span>(candidates, target, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Leetcode</category>
      
      <category>回溯算法</category>
      
      <category>组合</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>回溯算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>39.组合总和</title>
    <link href="/2022/06/25/39-%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8C/"/>
    <url>/2022/06/25/39-%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8C/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode.cn/problems/combination-sum/">力扣链接</a></p><p>给你一个 <strong>无重复元素</strong> 的整数数组 <code>candidates</code> 和一个目标整数 <code>target</code> ，找出 <code>candidates</code> 中可以使数字和为目标数 <code>target</code> 的 所有 <strong>不同组合</strong> ，并以列表形式返回。你可以按 <strong>任意顺序</strong> 返回这些组合。</p><span id="more"></span><p><code>candidates</code> 中的 <strong>同一个</strong> 数字可以 <strong>无限制重复被选取</strong> 。如果至少一个数字的被选数量不同，则两种组合是不同的。 </p><p>对于给定的输入，保证和为 <code>target</code> 的不同组合数少于 150 个。</p><p>示例 1：</p><pre><code class="hljs">输入：candidates = [2,3,6,7], target = 7输出：[[2,2,3],[7]]解释：2 和 3 可以形成一组候选，2 + 2 + 3 = 7 。注意 2 可以使用多次。7 也是一个候选， 7 = 7 。仅有这两种组合。</code></pre><p>示例 2：</p><pre><code class="hljs">输入: candidates = [2,3,5], target = 8输出: [[2,2,2,2],[2,3,3],[3,5]]</code></pre><p>示例 3：</p><pre><code class="hljs">输入: candidates = [2], target = 1输出: []</code></pre><p>提示：</p><ul><li>1 &lt;= candidates.length &lt;= 30</li><li>1 &lt;= candidates[i] &lt;= 200</li><li>candidate 中的每个元素都 互不相同</li><li>1 &lt;= target &lt;= 500</li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">private</span>:<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;result;<br>    vector&lt;<span class="hljs-type">int</span>&gt; part;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">backtracking</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> target,<span class="hljs-type">int</span> index,<span class="hljs-type">int</span> subsum)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (subsum == target)<br>        &#123;<br>            result.<span class="hljs-built_in">push_back</span>(part);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = index;i &lt; nums.<span class="hljs-built_in">size</span>() &amp;&amp; subsum + nums[i] &lt;= target;i++)<br>        &#123;<br>            part.<span class="hljs-built_in">push_back</span>(nums[i]);<br>            <span class="hljs-built_in">backtracking</span>(nums,target,i,subsum+nums[i]);<br>            part.<span class="hljs-built_in">pop_back</span>();<br>        &#125;<br>    &#125;<br><span class="hljs-keyword">public</span>:<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">combinationSum</span>(vector&lt;<span class="hljs-type">int</span>&gt;&amp; candidates, <span class="hljs-type">int</span> target) &#123;<br>        <span class="hljs-built_in">sort</span>(candidates.<span class="hljs-built_in">begin</span>(), candidates.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-built_in">backtracking</span>(candidates,target,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Leetcode</category>
      
      <category>回溯算法</category>
      
      <category>组合</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>回溯算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>17.电话号码的字母组合</title>
    <link href="/2022/06/25/17-%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81%E7%9A%84%E5%AD%97%E6%AF%8D%E7%BB%84%E5%90%88/"/>
    <url>/2022/06/25/17-%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81%E7%9A%84%E5%AD%97%E6%AF%8D%E7%BB%84%E5%90%88/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode.cn/problems/letter-combinations-of-a-phone-number/">力扣链接</a></p><p>给定一个<strong>仅包含</strong>数字 2-9 的字符串，返回所有它能表示的字母组合。答案可以按 <strong>任意顺序</strong> 返回。</p><span id="more"></span><p>给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。</p><p><img src="https://api2.mubu.com/v3/document_image/cb9536c9-b0ff-4ae2-8d81-3e556858722b-785422.jpg"></p><p>示例 1：</p><pre><code class="hljs">输入：digits = &quot;23&quot;输出：[&quot;ad&quot;,&quot;ae&quot;,&quot;af&quot;,&quot;bd&quot;,&quot;be&quot;,&quot;bf&quot;,&quot;cd&quot;,&quot;ce&quot;,&quot;cf&quot;]</code></pre><p>示例 2：</p><pre><code class="hljs">输入：digits = &quot;&quot;输出：[]</code></pre><p>示例 3：</p><pre><code class="hljs">输入：digits = &quot;2&quot;输出：[&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]</code></pre><p>提示：</p><ul><li>0 &lt;= digits.length &lt;= 4</li><li>digits[i] 是范围 [‘2’, ‘9’] 的一个数字。</li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span><br>&#123;<br><span class="hljs-keyword">private</span>:<br>    vector&lt;string&gt; result;<br>    string temp;<br>    <span class="hljs-type">const</span> string letterMap[<span class="hljs-number">10</span>] = &#123;<br>        <span class="hljs-string">&quot;&quot;</span>,     <span class="hljs-comment">// 0</span><br>        <span class="hljs-string">&quot;&quot;</span>,     <span class="hljs-comment">// 1</span><br>        <span class="hljs-string">&quot;abc&quot;</span>,  <span class="hljs-comment">// 2</span><br>        <span class="hljs-string">&quot;def&quot;</span>,  <span class="hljs-comment">// 3</span><br>        <span class="hljs-string">&quot;ghi&quot;</span>,  <span class="hljs-comment">// 4</span><br>        <span class="hljs-string">&quot;jkl&quot;</span>,  <span class="hljs-comment">// 5</span><br>        <span class="hljs-string">&quot;mno&quot;</span>,  <span class="hljs-comment">// 6</span><br>        <span class="hljs-string">&quot;pqrs&quot;</span>, <span class="hljs-comment">// 7</span><br>        <span class="hljs-string">&quot;tuv&quot;</span>,  <span class="hljs-comment">// 8</span><br>        <span class="hljs-string">&quot;wxyz&quot;</span>, <span class="hljs-comment">// 9</span><br>    &#125;;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">backtracking</span><span class="hljs-params">(string digits, <span class="hljs-type">int</span> index)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (temp.<span class="hljs-built_in">size</span>() == digits.<span class="hljs-built_in">size</span>())<br>        &#123;<br>            result.<span class="hljs-built_in">push_back</span>(temp);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = index;i &lt; digits.<span class="hljs-built_in">size</span>();i++)<br>        &#123;<br>            <span class="hljs-type">int</span> num = digits[i] - <span class="hljs-string">&#x27;0&#x27;</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;j &lt; letterMap[num].<span class="hljs-built_in">size</span>();j++)<br>            &#123;<br>                temp.<span class="hljs-built_in">push_back</span>(letterMap[num][j]);<br>                <span class="hljs-built_in">backtracking</span>(digits,i+<span class="hljs-number">1</span>);<br>                temp.<span class="hljs-built_in">pop_back</span>();<br>            &#125;<br>        &#125;<br>    &#125;<br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;string&gt; <span class="hljs-title">letterCombinations</span><span class="hljs-params">(string digits)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (digits.<span class="hljs-built_in">size</span>() == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> &#123;&#125;;<br>        <span class="hljs-built_in">backtracking</span>(digits, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Leetcode</category>
      
      <category>回溯算法</category>
      
      <category>组合</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>回溯算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>216.组合总和III</title>
    <link href="/2022/06/25/216-%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8CIII/"/>
    <url>/2022/06/25/216-%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8CIII/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode.cn/problems/combination-sum-iii/">力扣链接</a></p><p>找出所有相加之和为 n 的 k 个数的组合，且满足下列条件：</p><ul><li>只使用数字1到9</li><li>每个数字 <strong>最多使用</strong> 一次 <span id="more"></span>返回 所有可能的有效组合的列表 。该列表不能包含相同的组合两次，组合可以以任何顺序返回。</li></ul><p>示例 1:</p><pre><code class="hljs">输入: k = 3, n = 7输出: [[1,2,4]]解释:1 + 2 + 4 = 7没有其他符合的组合了。</code></pre><p>示例 2:</p><pre><code class="hljs">输入: k = 3, n = 9输出: [[1,2,6], [1,3,5], [2,3,4]]解释:1 + 2 + 6 = 91 + 3 + 5 = 92 + 3 + 4 = 9没有其他符合的组合了。</code></pre><p>示例 3:</p><pre><code class="hljs">输入: k = 4, n = 1输出: []解释: 不存在有效的组合。在[1,9]范围内使用4个不同的数字，我们可以得到的最小和是1+2+3+4 = 10，因为10 &gt; 1，没有有效的组合。</code></pre><p>提示:</p><ul><li>2 &lt;= k &lt;= 9</li><li>1 &lt;= n &lt;= 60</li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">private</span>:<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; result;<br>    vector&lt;<span class="hljs-type">int</span>&gt; path;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">backtracking</span><span class="hljs-params">(<span class="hljs-type">int</span> k,<span class="hljs-type">int</span> n,<span class="hljs-type">int</span> startIndex,<span class="hljs-type">int</span> subsum)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (subsum &gt; n) <span class="hljs-comment">// 剪枝操作</span><br>            <span class="hljs-keyword">return</span>;<br>        <span class="hljs-keyword">if</span> (path.<span class="hljs-built_in">size</span>() == k &amp;&amp; subsum == n)<br>        &#123;<br>            result.<span class="hljs-built_in">push_back</span>(path);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = startIndex;i &lt;= <span class="hljs-number">9</span>;i++)<br>        &#123;<br>            path.<span class="hljs-built_in">push_back</span>(i);<br>            <span class="hljs-built_in">backtracking</span>(k,n,i+<span class="hljs-number">1</span>,subsum+i);<br>            path.<span class="hljs-built_in">pop_back</span>();<br>        &#125;<br>    &#125;<br><span class="hljs-keyword">public</span>:<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">combinationSum3</span>(<span class="hljs-type">int</span> k, <span class="hljs-type">int</span> n) &#123;<br>        <span class="hljs-keyword">if</span> (n &gt; <span class="hljs-number">45</span>) <span class="hljs-keyword">return</span> &#123;&#125;;<br>        <span class="hljs-built_in">backtracking</span>(k,n,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Leetcode</category>
      
      <category>回溯算法</category>
      
      <category>组合</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>回溯算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>77.组合</title>
    <link href="/2022/06/24/77-%E7%BB%84%E5%90%88/"/>
    <url>/2022/06/24/77-%E7%BB%84%E5%90%88/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode.cn/problems/combinations/">力扣链接</a></p><p>给定两个整数 n 和 k，返回范围 [1, n] 中所有可能的 k 个数的组合。</p><span id="more"></span><p>你可以按 <strong>任何顺序</strong> 返回答案。</p><p>示例 1：</p><pre><code class="hljs">输入：n = 4, k = 2输出：[[2,4],[3,4],[2,3],[1,2],[1,3],[1,4],]</code></pre><p>示例 2：</p><pre><code class="hljs">输入：n = 1, k = 1输出：[[1]]</code></pre><p>提示：</p><ul><li>1 &lt;= n &lt;= 20</li><li>1 &lt;= k &lt;= n</li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span><br>&#123;<br><span class="hljs-keyword">private</span>:<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; result;<br>    vector&lt;<span class="hljs-type">int</span>&gt; path;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">backtracking</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> k, <span class="hljs-type">int</span> startIndex)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (path.<span class="hljs-built_in">size</span>() == k)<br>        &#123;<br>            result.<span class="hljs-built_in">push_back</span>(path);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">// for (int i = startIndex; i &lt;= n; i++)</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = startIndex; i &lt;= n - (k - path.<span class="hljs-built_in">size</span>()) + <span class="hljs-number">1</span>; i++) <span class="hljs-comment">// 剪枝操作</span><br>        &#123;<br>            path.<span class="hljs-built_in">push_back</span>(i);<br>            <span class="hljs-built_in">backtracking</span>(n, k, i + <span class="hljs-number">1</span>);<br>            path.<span class="hljs-built_in">pop_back</span>();<br>        &#125;<br>    &#125;<br><br><span class="hljs-keyword">public</span>:<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">combine</span>(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> k)<br>    &#123;<br>        <span class="hljs-built_in">backtracking</span>(n, k, <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Leetcode</category>
      
      <category>回溯算法</category>
      
      <category>组合</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>回溯算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>回溯算法理论</title>
    <link href="/2022/06/24/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95%E7%90%86%E8%AE%BA/"/>
    <url>/2022/06/24/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95%E7%90%86%E8%AE%BA/</url>
    
    <content type="html"><![CDATA[<h3 id="回溯法"><a href="#回溯法" class="headerlink" title="回溯法"></a>回溯法</h3><blockquote><p>回溯的本质是<strong>穷举</strong>，穷举所有可能，然后选出我们想要的答案</p></blockquote><span id="more"></span><h3 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h3><ul><li>组合问题：N个数里面按一定规则找出k个数的集合 （无序）</li><li>切割问题：一个字符串按一定规则有几种切割方式</li><li>子集问题：一个N个数的集合里有多少符合条件的子集</li><li>排列问题：N个数按一定规则全排列，有几种排列方式 （有序）</li><li>棋盘问题：N皇后，解数独等等</li></ul><h3 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h3><blockquote><p>回溯法解决的问题都可以抽象为<strong>树形结构</strong></p></blockquote><p>例：集合中递归查找子集</p><ul><li>集合的<strong>大小</strong>就构成了<strong>树的宽度</strong></li><li>递归的<strong>深度</strong>就构成的<strong>树的深度</strong></li></ul><h3 id="回溯法模板"><a href="#回溯法模板" class="headerlink" title="回溯法模板"></a>回溯法模板</h3><blockquote><p>参考 <a href="https://programmercarl.com/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80.html#%E5%9B%9E%E6%BA%AF%E6%B3%95%E6%A8%A1%E6%9D%BF">代码随想录</a></p><a href="/2022/06/24/77-%E7%BB%84%E5%90%88/" title="例：77-组合">例：77-组合</a></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">backtracking</span><span class="hljs-params">(参数)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (终止条件) &#123;<br>        存放结果;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (选择：本层集合中元素（树中节点孩子的数量就是集合的大小）) &#123;<br>        处理节点;<br>        <span class="hljs-built_in">backtracking</span>(路径，选择列表); <span class="hljs-comment">// 递归</span><br>        回溯，撤销处理结果<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>回溯算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>922.按奇偶排序数组II</title>
    <link href="/2022/06/24/922-%E6%8C%89%E5%A5%87%E5%81%B6%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84II/"/>
    <url>/2022/06/24/922-%E6%8C%89%E5%A5%87%E5%81%B6%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84II/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode.cn/problems/sort-array-by-parity-ii/description/">力扣链接</a></p><p>给定一个非负整数数组 nums，  nums 中一半整数是 <strong>奇数</strong> ，一半整数是 <strong>偶数</strong> 。</p><p>对数组进行排序，以便当 nums[i] 为奇数时，i 也是 <strong>奇数</strong> ；当 nums[i] 为偶数时， i 也是 <strong>偶数</strong> 。</p><span id="more"></span><p>你可以返回 任何满足上述条件的数组作为答案 。</p><p>[2,4,6,8,10,1,3,5,7,9]</p><p>示例 1：</p><pre><code class="hljs">输入：nums = [4,2,5,7]输出：[4,5,2,7]解释：[4,7,2,5]，[2,5,4,7]，[2,7,4,5] 也会被接受。</code></pre><p>示例 2：</p><pre><code class="hljs">输入：nums = [2,3]输出：[2,3]</code></pre><p>提示：</p><ul><li>2 &lt;= nums.length &lt;= 2 * 104</li><li>nums.length 是偶数</li><li>nums 中一半是偶数</li><li>0 &lt;= nums[i] &lt;= 1000</li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">sortArrayByParityII</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-type">int</span> s = <span class="hljs-number">0</span>,f = <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> n = nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">for</span> (;f &lt;= n - <span class="hljs-number">1</span>;f+=<span class="hljs-number">2</span>)<br>        &#123;<br>            <span class="hljs-keyword">while</span> (nums[s] % <span class="hljs-number">2</span> == <span class="hljs-number">0</span> &amp;&amp; s + <span class="hljs-number">2</span> &lt; n)<br>                s+=<span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span> (nums[f] % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)<br>            &#123;<br>                <span class="hljs-built_in">swap</span>(nums[s],nums[f]);<br>            &#125; <br>        &#125;<br>        <span class="hljs-keyword">return</span> nums;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Leetcode</category>
      
      <category>数组</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>双指针法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>724.寻找数组的中心下标</title>
    <link href="/2022/06/24/724-%E5%AF%BB%E6%89%BE%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%AD%E5%BF%83%E4%B8%8B%E6%A0%87/"/>
    <url>/2022/06/24/724-%E5%AF%BB%E6%89%BE%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%AD%E5%BF%83%E4%B8%8B%E6%A0%87/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode.cn/problems/find-pivot-index/">力扣链接</a></p><p>给你一个整数数组 <code>nums</code> ，请计算数组的 <strong>中心下标</strong> 。</p><p>数组 <strong>中心下标</strong> 是数组的一个下标，其左侧所有元素相加的和等于右侧所有元素相加的和。</p><span id="more"></span><p>如果中心下标位于数组最左端，那么左侧数之和视为 0 ，因为在下标的左侧不存在元素。这一点对于中心下标位于数组最右端同样适用。</p><p>如果数组有多个中心下标，应该返回 <strong>最靠近左边</strong> 的那一个。如果数组不存在中心下标，返回 -1 。</p><p>示例 1：</p><pre><code class="hljs">输入：nums = [1, 7, 3, 6, 5, 6]输出：3解释：中心下标是 3 。左侧数之和 sum = nums[0] + nums[1] + nums[2] = 1 + 7 + 3 = 11 ，右侧数之和 sum = nums[4] + nums[5] = 5 + 6 = 11 ，二者相等。</code></pre><p>示例 2：</p><pre><code class="hljs">输入：nums = [1, 2, 3]输出：-1解释：数组中不存在满足此条件的中心下标。</code></pre><p>示例 3：</p><pre><code class="hljs">输入：nums = [2, 1, -1]输出：0解释：中心下标是 0 。左侧数之和 sum = 0 ，（下标 0 左侧不存在元素），右侧数之和 sum = nums[1] + nums[2] = 1 + -1 = 0 。</code></pre><p>提示：</p><ul><li>1 &lt;= nums.length &lt;= 104</li><li>-1000 &lt;= nums[i] &lt;= 1000</li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">pivotIndex</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-type">int</span> lsum = <span class="hljs-number">0</span>,rsum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; nums.<span class="hljs-built_in">size</span>();i++)<br>            rsum += nums[i];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; nums.<span class="hljs-built_in">size</span>();i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (i != <span class="hljs-number">0</span>) lsum += nums[i<span class="hljs-number">-1</span>];<br>            rsum -= nums[i];<br>            <span class="hljs-keyword">if</span> (lsum == rsum)<br>                <span class="hljs-keyword">return</span> i;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Leetcode</category>
      
      <category>数组</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>189.轮转数组</title>
    <link href="/2022/06/23/189-%E8%BD%AE%E8%BD%AC%E6%95%B0%E7%BB%84/"/>
    <url>/2022/06/23/189-%E8%BD%AE%E8%BD%AC%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode.cn/problems/rotate-array/">力扣链接</a></p><p>给你一个数组，将数组中的元素向右轮转 k 个位置，其中 k 是非负数。</p><span id="more"></span><p>示例 1:</p><pre><code class="hljs">输入: nums = [1,2,3,4,5,6,7], k = 3输出: [5,6,7,1,2,3,4]解释:向右轮转 1 步: [7,1,2,3,4,5,6]向右轮转 2 步: [6,7,1,2,3,4,5]向右轮转 3 步: [5,6,7,1,2,3,4]</code></pre><p>示例 2:</p><pre><code class="hljs">输入：nums = [-1,-100,3,99], k = 2输出：[3,99,-1,-100]解释: 向右轮转 1 步: [99,-1,-100,3]向右轮转 2 步: [3,99,-1,-100]</code></pre><p>提示：</p><ul><li>1 &lt;= nums.length &lt;= 105</li><li>-231 &lt;= nums[i] &lt;= 231 - 1</li><li>0 &lt;= k &lt;= 105</li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">rotate</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> k)</span> </span>&#123;<br>        k %= nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-built_in">reverse</span>(nums.<span class="hljs-built_in">begin</span>(),nums.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-built_in">reverse</span>(nums.<span class="hljs-built_in">begin</span>(),nums.<span class="hljs-built_in">begin</span>() + k);<br>        <span class="hljs-built_in">reverse</span>(nums.<span class="hljs-built_in">begin</span>() + k,nums.<span class="hljs-built_in">end</span>());<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Leetcode</category>
      
      <category>数组</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1207.独一无二的出现次数</title>
    <link href="/2022/06/23/1207-%E7%8B%AC%E4%B8%80%E6%97%A0%E4%BA%8C%E7%9A%84%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0/"/>
    <url>/2022/06/23/1207-%E7%8B%AC%E4%B8%80%E6%97%A0%E4%BA%8C%E7%9A%84%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode.cn/problems/unique-number-of-occurrences/">力扣链接</a></p><p>给你一个整数数组 arr，请你帮忙统计数组中每个数的出现次数。</p><span id="more"></span><p>如果每个数的出现次数都是独一无二的，就返回 true；否则返回 false。</p><p>示例 1：</p><pre><code class="hljs">输入：arr = [1,2,2,1,1,3]输出：true解释：在该数组中，1 出现了 3 次，2 出现了 2 次，3 只出现了 1 次。没有两个数的出现次数相同。</code></pre><p>示例 2：</p><pre><code class="hljs">输入：arr = [1,2]输出：false</code></pre><p>示例 3：</p><pre><code class="hljs">输入：arr = [-3,0,1,-3,1,1,1,-3,10,0]输出：true</code></pre><p>提示：</p><ul><li>1 &lt;= arr.length &lt;= 1000</li><li>-1000 &lt;= arr[i] &lt;= 1000</li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">uniqueOccurrences</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; arr)</span> </span>&#123;<br>        map&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; mp;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.<span class="hljs-built_in">size</span>(); i ++)&#123;<br>            mp[arr[i]] ++;<br>        &#125;<br>        set&lt;<span class="hljs-type">int</span>&gt; res;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> m : mp)&#123;<br>            res.<span class="hljs-built_in">insert</span>(m.second);<br>        &#125;<br>        <span class="hljs-keyword">return</span> res.<span class="hljs-built_in">size</span>() == mp.<span class="hljs-built_in">size</span>();<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Leetcode</category>
      
      <category>数组</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>941.有效的山脉数组</title>
    <link href="/2022/06/23/941-%E6%9C%89%E6%95%88%E7%9A%84%E5%B1%B1%E8%84%89%E6%95%B0%E7%BB%84/"/>
    <url>/2022/06/23/941-%E6%9C%89%E6%95%88%E7%9A%84%E5%B1%B1%E8%84%89%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode.cn/problems/valid-mountain-array/">力扣链接</a></p><p>给定一个整数数组 arr，如果它是有效的山脉数组就返回 true，否则返回 false。</p><span id="more"></span><p>让我们回顾一下，如果 arr 满足下述条件，那么它是一个山脉数组：</p><ul><li>arr.length &gt;= 3</li><li>在 0 &lt; i &lt; arr.length - 1 条件下，存在 i 使得：<ul><li>arr[0] &lt; arr[1] &lt; … arr[i-1] &lt; arr[i] </li><li>arr[i] &gt; arr[i+1] &gt; … &gt; arr[arr.length - 1]</li></ul></li></ul><p><img src="https://api2.mubu.com/v3/document_image/32c8e83d-0e55-4266-a160-cdc543b331ed-785422.jpg"></p><p>示例 1：</p><pre><code class="hljs">输入：arr = [2,1]输出：false</code></pre><p>示例 2：</p><pre><code class="hljs">输入：arr = [3,5,5]输出：false</code></pre><p>示例 3：</p><pre><code class="hljs">输入：arr = [0,3,2,1]输出：true</code></pre><p>提示：</p><ul><li>1 &lt;= arr.length &lt;= 104</li><li>0 &lt;= arr[i] &lt;= 104</li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><blockquote><p>我直接选择了从头走到尾，可以理解为单调，追求效率可以试试双指针。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">validMountainArray</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; arr)</span> </span>&#123;<br>        <span class="hljs-type">int</span> up = <span class="hljs-number">0</span>, dn = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>,len = arr.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (;i &lt;= len;i++)<br>            <span class="hljs-keyword">if</span> (arr[i<span class="hljs-number">-1</span>] &lt; arr[i])<br>                up++;<br>            <span class="hljs-keyword">else</span> <br>                <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">for</span> (;i &lt;= len;i++)<br>            <span class="hljs-keyword">if</span> (arr[i<span class="hljs-number">-1</span>] &gt; arr[i])<br>                dn++;<br>        <span class="hljs-keyword">if</span> (up != <span class="hljs-number">0</span> &amp;&amp; dn != <span class="hljs-number">0</span> &amp;&amp; up + dn == len)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Leetcode</category>
      
      <category>数组</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1365.有多少小于当前数字的数字</title>
    <link href="/2022/06/23/1365-%E6%9C%89%E5%A4%9A%E5%B0%91%E5%B0%8F%E4%BA%8E%E5%BD%93%E5%89%8D%E6%95%B0%E5%AD%97%E7%9A%84%E6%95%B0%E5%AD%97/"/>
    <url>/2022/06/23/1365-%E6%9C%89%E5%A4%9A%E5%B0%91%E5%B0%8F%E4%BA%8E%E5%BD%93%E5%89%8D%E6%95%B0%E5%AD%97%E7%9A%84%E6%95%B0%E5%AD%97/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode.cn/problems/how-many-numbers-are-smaller-than-the-current-number/">力扣链接</a></p><p>给你一个数组 nums，对于其中每个元素 nums[i]，请你统计数组中比它小的所有数字的数目。</p><p>换而言之，对于每个 nums[i] 你必须计算出有效的 j 的数量，其中 j 满足 j != i 且 nums[j] &lt; nums[i] 。</p><p>以数组形式返回答案。</p><p>示例 1：</p><pre><code class="hljs">输入：nums = [8,1,2,2,3]输出：[4,0,1,1,3]解释： 对于 nums[0]=8 存在四个比它小的数字：（1，2，2 和 3）。 对于 nums[1]=1 不存在比它小的数字。对于 nums[2]=2 存在一个比它小的数字：（1）。 对于 nums[3]=2 存在一个比它小的数字：（1）。 对于 nums[4]=3 存在三个比它小的数字：（1，2 和 2）。</code></pre><p>示例 2：</p><pre><code class="hljs">输入：nums = [6,5,4,8]输出：[2,1,0,3]</code></pre><p>示例 3：</p><pre><code class="hljs">输入：nums = [7,7,7,7]输出：[0,0,0,0]</code></pre><p>提示：</p><ul><li>2 &lt;= nums.length &lt;= 500</li><li>0 &lt;= nums[i] &lt;= 100</li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><blockquote><p>这道题比较偷懒了，用暴力或者排序都是可以的，我选择直接用哈希表了</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">smallerNumbersThanCurrent</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        unordered_map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; m;<br>        <span class="hljs-type">int</span> len = nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">result</span> <span class="hljs-params">(len)</span></span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; len;i++)<br>            m[nums[i]]++;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; len;i++)<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;j &lt; nums[i];j++)<br>                result[i] += m[j];<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Leetcode</category>
      
      <category>数组</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>哈希表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>54.螺旋矩阵</title>
    <link href="/2022/06/23/54-%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5/"/>
    <url>/2022/06/23/54-%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode.cn/problems/spiral-matrix/description/">力扣链接</a></p><p>给你一个 m 行 n 列的矩阵 matrix ，请按照 顺时针螺旋顺序 ，返回矩阵中的所有元素。</p><span id="more"></span><p>示例 1：<br><img src="https://api2.mubu.com/v3/document_image/2d47caf0-f858-4bc7-a5a1-d52c9d3c5b40-785422.jpg" alt="spiral1"></p><pre><code class="hljs">输入：matrix = [[1,2,3],[4,5,6],[7,8,9]]输出：[1,2,3,6,9,8,7,4,5]</code></pre><p>示例 2：<br><img src="https://api2.mubu.com/v3/document_image/2e9d5c77-faec-4bd8-b3ab-76debd6d5a2f-785422.jpg" alt="spiral"></p><pre><code class="hljs">输入：matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]输出：[1,2,3,4,8,12,11,10,9,5,6,7]</code></pre><p>提示：</p><ul><li>m == matrix.length</li><li>n == matrix[i].length</li><li>1 &lt;= m, n &lt;= 10</li><li>-100 &lt;= matrix[i][j] &lt;= 100</li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><blockquote><p>引用了 59.螺旋矩阵II 的模拟过程</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">spiralOrder</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; matrix)</span> </span>&#123;<br>        <span class="hljs-type">int</span> s = matrix.<span class="hljs-built_in">size</span>() * matrix[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>();<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">sp</span> <span class="hljs-params">(s)</span></span>;<br><br>        <span class="hljs-type">int</span> h1 = <span class="hljs-number">0</span>, h2 = matrix.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>, l1 = <span class="hljs-number">0</span>, l2 = matrix[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> idx = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (idx &lt; s)<br>        &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = h1; j &lt; matrix[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>() - h1 &amp;&amp; idx &lt; s; j++)<br>               sp[idx++] = matrix[h1][j];<br>            h1++;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h1; i &lt; matrix.<span class="hljs-built_in">size</span>() - h1 &amp;&amp; idx &lt; s; i++)<br>                sp[idx++] = matrix[i][l2];<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = matrix[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>() - h1; j &gt;= h1 - <span class="hljs-number">1</span> &amp;&amp; idx &lt; s; j--)<br>                sp[idx++] = matrix[h2][j];<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = matrix.<span class="hljs-built_in">size</span>() - h1 - <span class="hljs-number">1</span>; i &gt;= h1 &amp;&amp; idx &lt; s; i--)<br>                sp[idx++] = matrix[i][l1];<br>            h2--;<br>            l1++;<br>            l2--;<br>        &#125;<br>        <span class="hljs-keyword">return</span> sp;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Leetcode</category>
      
      <category>数组</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>模拟</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>59.螺旋矩阵II</title>
    <link href="/2022/06/23/59-%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5II/"/>
    <url>/2022/06/23/59-%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5II/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode.cn/problems/spiral-matrix-ii/">力扣链接</a></p><p>给你一个正整数 n ，生成一个包含 1 到 n2 所有元素，且元素按顺时针顺序螺旋排列的 n x n 正方形矩阵 matrix 。</p><span id="more"></span><p>示例 1：<br><img src="https://api2.mubu.com/v3/document_image/5a3750cb-d02d-4977-a4f1-8d298677ae33-785422.jpg" alt="spiraln"></p><pre><code class="hljs">输入：n = 3输出：[[1,2,3],[8,9,4],[7,6,5]]</code></pre><p>示例 2：</p><pre><code class="hljs">输入：n = 1输出：[[1]]</code></pre><p>提示：</p><ul><li>1 &lt;= n &lt;= 20</li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><blockquote><p>此为个人解法，比较凌乱，模拟方法不大一致。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">generateMatrix</span>(<span class="hljs-type">int</span> n)<br>    &#123;<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">sp</span>(n, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(n, <span class="hljs-number">0</span>));<br>        <span class="hljs-type">int</span> h1 = <span class="hljs-number">0</span>, h2 = n - <span class="hljs-number">1</span>, l1 = <span class="hljs-number">0</span>, l2 = n - <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> x = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (x &lt;= n * n)<br>        &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = h1; j &lt; n - h1 &amp;&amp; x &lt;= n * n; j++)<br>                sp[h1][j] = x++;<br>            h1++;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h1; i &lt; n - h1 &amp;&amp; x &lt;= n * n; i++)<br>                sp[i][l2] = x++;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = n - h1; j &gt;= h1 - <span class="hljs-number">1</span> &amp;&amp; x &lt;= n * n; j--)<br>                sp[h2][j] = x++;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n - h1 - <span class="hljs-number">1</span>; i &gt;= h1 &amp;&amp; x &lt;= n * n; i--)<br>                sp[i][l1] = x++;<br>            h2--;<br>            l1++;<br>            l2--;<br>        &#125;<br>        <span class="hljs-keyword">return</span> sp;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><blockquote><p>附代码随想录内做法</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">generateMatrix</span>(<span class="hljs-type">int</span> n) &#123;<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">res</span>(n, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(n, <span class="hljs-number">0</span>)); <span class="hljs-comment">// 使用vector定义一个二维数组</span><br>        <span class="hljs-type">int</span> startx = <span class="hljs-number">0</span>, starty = <span class="hljs-number">0</span>; <span class="hljs-comment">// 定义每循环一个圈的起始位置</span><br>        <span class="hljs-type">int</span> loop = n / <span class="hljs-number">2</span>; <span class="hljs-comment">// 每个圈循环几次，例如n为奇数3，那么loop = 1 只是循环一圈，矩阵中间的值需要单独处理</span><br>        <span class="hljs-type">int</span> mid = n / <span class="hljs-number">2</span>; <span class="hljs-comment">// 矩阵中间的位置，例如：n为3， 中间的位置就是(1，1)，n为5，中间位置为(2, 2)</span><br>        <span class="hljs-type">int</span> count = <span class="hljs-number">1</span>; <span class="hljs-comment">// 用来给矩阵中每一个空格赋值</span><br>        <span class="hljs-type">int</span> offset = <span class="hljs-number">1</span>; <span class="hljs-comment">// 每一圈循环，需要控制每一条边遍历的长度</span><br>        <span class="hljs-type">int</span> i,j;<br>        <span class="hljs-keyword">while</span> (loop --) &#123;<br>            i = startx;<br>            j = starty;<br><br>            <span class="hljs-comment">// 下面开始的四个for就是模拟转了一圈</span><br>            <span class="hljs-comment">// 模拟填充上行从左到右(左闭右开)</span><br>            <span class="hljs-keyword">for</span> (j = starty; j &lt; starty + n - offset; j++) &#123;<br>                res[startx][j] = count++;<br>            &#125;<br>            <span class="hljs-comment">// 模拟填充右列从上到下(左闭右开)</span><br>            <span class="hljs-keyword">for</span> (i = startx; i &lt; startx + n - offset; i++) &#123;<br>                res[i][j] = count++;<br>            &#125;<br>            <span class="hljs-comment">// 模拟填充下行从右到左(左闭右开)</span><br>            <span class="hljs-keyword">for</span> (; j &gt; starty; j--) &#123;<br>                res[i][j] = count++;<br>            &#125;<br>            <span class="hljs-comment">// 模拟填充左列从下到上(左闭右开)</span><br>            <span class="hljs-keyword">for</span> (; i &gt; startx; i--) &#123;<br>                res[i][j] = count++;<br>            &#125;<br><br>            <span class="hljs-comment">// 第二圈开始的时候，起始位置要各自加1， 例如：第一圈起始位置是(0, 0)，第二圈起始位置是(1, 1)</span><br>            startx++;<br>            starty++;<br><br>            <span class="hljs-comment">// offset 控制每一圈里每一条边遍历的长度</span><br>            offset += <span class="hljs-number">2</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 如果n为奇数的话，需要单独给矩阵最中间的位置赋值</span><br>        <span class="hljs-keyword">if</span> (n % <span class="hljs-number">2</span>) &#123;<br>            res[mid][mid] = count;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Leetcode</category>
      
      <category>数组</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>模拟</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>718.最长重复子数组</title>
    <link href="/2022/06/23/718-%E6%9C%80%E9%95%BF%E9%87%8D%E5%A4%8D%E5%AD%90%E6%95%B0%E7%BB%84/"/>
    <url>/2022/06/23/718-%E6%9C%80%E9%95%BF%E9%87%8D%E5%A4%8D%E5%AD%90%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode.cn/problems/maximum-length-of-repeated-subarray/">力扣链接</a></p><p>给两个整数数组 <code>nums1</code> 和 <code>nums2</code> ，返回 两个数组中 <strong>公共的</strong> 、长度最长的子数组的长度 。</p><span id="more"></span><p>示例 1：</p><pre><code class="hljs">输入：nums1 = [1,2,3,2,1], nums2 = [3,2,1,4,7]输出：3解释：长度最长的公共子数组是 [3,2,1] 。</code></pre><p>示例 2：</p><pre><code class="hljs">输入：nums1 = [0,0,0,0,0], nums2 = [0,0,0,0,0]输出：5</code></pre><p>提示：</p><ul><li>1 &lt;= nums1.length, nums2.length &lt;= 1000</li><li>0 &lt;= nums1[i], nums2[i] &lt;= 100</li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxLength</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums1, vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums2, <span class="hljs-type">int</span> Aop, <span class="hljs-type">int</span> Bop, <span class="hljs-type">int</span> both_length)</span> </span>&#123;<br>        <span class="hljs-type">int</span> k = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; both_length; i++) &#123;<br>            <span class="hljs-keyword">if</span> (nums1[Aop + i] == nums2[Bop + i])<br>                k++;<br>            <span class="hljs-keyword">else</span> k = <span class="hljs-number">0</span>;<br>            res = <span class="hljs-built_in">max</span>(res, k);<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">findLength</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums1, vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums2)</span> </span>&#123;<br>        <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; nums1.<span class="hljs-built_in">size</span>(); i++) &#123;<br>            <span class="hljs-type">int</span> nums1_len = <span class="hljs-built_in">min</span>(nums2.<span class="hljs-built_in">size</span>(), nums1.<span class="hljs-built_in">size</span>() - i);    <span class="hljs-comment">// nums1往nums2的左侧方向滑动</span><br>            <span class="hljs-type">int</span> maxlen = <span class="hljs-built_in">maxLength</span>(nums1, nums2, i, <span class="hljs-number">0</span>, nums1_len);<br>            ans = <span class="hljs-built_in">max</span>(ans, maxlen);<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; nums2.<span class="hljs-built_in">size</span>(); i++) &#123;<br>            <span class="hljs-type">int</span> nums2_len = <span class="hljs-built_in">min</span>(nums1.<span class="hljs-built_in">size</span>(), nums2.<span class="hljs-built_in">size</span>() - i);    <span class="hljs-comment">// nums1往nums2的右侧方向滑动</span><br>            <span class="hljs-type">int</span> maxlen = <span class="hljs-built_in">maxLength</span>(nums1, nums2, <span class="hljs-number">0</span>, i, nums2_len);<br>            ans = <span class="hljs-built_in">max</span>(ans, maxlen);<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Leetcode</category>
      
      <category>数组</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>滑动窗口</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>76.最小覆盖子串</title>
    <link href="/2022/06/22/76-%E6%9C%80%E5%B0%8F%E8%A6%86%E7%9B%96%E5%AD%90%E4%B8%B2/"/>
    <url>/2022/06/22/76-%E6%9C%80%E5%B0%8F%E8%A6%86%E7%9B%96%E5%AD%90%E4%B8%B2/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode.cn/problems/minimum-window-substring/description/">力扣链接</a></p><p>给你一个字符串 s 、一个字符串 t 。返回 s 中涵盖 t 所有字符的最小子串。如果 s 中不存在涵盖 t 所有字符的子串，则返回空字符串 “” 。</p><span id="more"></span><p>注意：</p><p>对于 t 中重复字符，我们寻找的子字符串中该字符数量必须不少于 t 中该字符数量。<br>如果 s 中存在这样的子串，我们保证它是唯一的答案。</p><p>示例 1：</p><pre><code class="hljs">输入：s = &quot;ADOBECODEBANC&quot;, t = &quot;ABC&quot;输出：&quot;BANC&quot;</code></pre><p>示例 2：</p><pre><code class="hljs">输入：s = &quot;a&quot;, t = &quot;a&quot;输出：&quot;a&quot;</code></pre><p>示例 3:</p><pre><code class="hljs">输入: s = &quot;a&quot;, t = &quot;aa&quot;输出: &quot;&quot;解释: t 中两个字符 &#39;a&#39; 均应包含在 s 的子串中，因此没有符合条件的子字符串，返回空字符串。</code></pre><p>提示：</p><ul><li>1 &lt;= s.length, t.length &lt;= 105</li><li>s 和 t 由英文字母组成</li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><blockquote><p>建议熟悉哈希表的操作，在进行字符个数确定时十分好用。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">string <span class="hljs-title">minWindow</span><span class="hljs-params">(string s, string t)</span> </span>&#123;<br>        unordered_map&lt;<span class="hljs-type">char</span>, <span class="hljs-type">int</span>&gt; smap, tmap;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> c: t) tmap[c] ++ ;<br>        string res;<br>        <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>; <span class="hljs-comment">// 包含子串中字符的个数</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>; i &lt; s.<span class="hljs-built_in">size</span>(); i ++ ) &#123;<br>            smap[s[i]] ++ ;<br>            <span class="hljs-keyword">if</span> (smap[s[i]] &lt;= tmap[s[i]]) cnt ++ ;<br>            <span class="hljs-keyword">while</span> (smap[s[j]] &gt; tmap[s[j]]) smap[s[j ++ ]] -- ;<br>            <span class="hljs-keyword">if</span> (cnt == t.<span class="hljs-built_in">size</span>()) &#123;<br>                <span class="hljs-keyword">if</span> (res.<span class="hljs-built_in">empty</span>() || i - j + <span class="hljs-number">1</span> &lt; res.<span class="hljs-built_in">size</span>())<br>                    res = s.<span class="hljs-built_in">substr</span>(j, i - j + <span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Leetcode</category>
      
      <category>数组</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>滑动窗口</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>904.水果成篮</title>
    <link href="/2022/06/22/904-%E6%B0%B4%E6%9E%9C%E6%88%90%E7%AF%AE/"/>
    <url>/2022/06/22/904-%E6%B0%B4%E6%9E%9C%E6%88%90%E7%AF%AE/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode.cn/problems/fruit-into-baskets/description/">力扣链接</a></p><p>你正在探访一家农场，农场从左到右种植了一排果树。这些树用一个整数数组 fruits 表示，其中 fruits[i] 是第 i 棵树上的水果 <strong>种类</strong> 。</p><span id="more"></span><p>你想要尽可能多地收集水果。然而，农场的主人设定了一些严格的规矩，你必须按照要求采摘水果：</p><p>你只有 <strong>两个</strong> 篮子，并且每个篮子只能装 <strong>单一类型</strong> 的水果。每个篮子能够装的水果总量没有限制。<br>你可以选择任意一棵树开始采摘，你必须从 <strong>每棵</strong> 树（包括开始采摘的树）上 <strong>恰好摘一个水果</strong> 。采摘的水果应当符合篮子中的水果类型。每采摘一次，你将会向右移动到下一棵树，并继续采摘。<br>一旦你走到某棵树前，但水果不符合篮子的水果类型，那么就必须停止采摘。<br>给你一个整数数组 fruits ，返回你可以收集的水果的 <strong>最大</strong> 数目。</p><p>示例 1：</p><pre><code class="hljs">输入：fruits = [1,2,1]输出：3解释：可以采摘全部 3 棵树。</code></pre><p>示例 2：</p><pre><code class="hljs">输入：fruits = [0,1,2,2]输出：3解释：可以采摘 [1,2,2] 这三棵树。如果从第一棵树开始采摘，则只能采摘 [0,1] 这两棵树。</code></pre><p>示例 3：</p><pre><code class="hljs">输入：fruits = [1,2,3,2,2]输出：4解释：可以采摘 [2,3,2,2] 这四棵树。如果从第一棵树开始采摘，则只能采摘 [1,2] 这两棵树。</code></pre><p>示例 4：</p><pre><code class="hljs">输入：fruits = [3,3,3,1,2,1,1,2,3,3,4]输出：5解释：可以采摘 [1,2,1,1,2] 这五棵树。</code></pre><p>提示：</p><ul><li>1 &lt;= fruits.length &lt;= 105</li><li>0 &lt;= fruits[i] &lt; fruits.length</li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">totalFruit</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;fruits)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> n = fruits.<span class="hljs-built_in">size</span>();<br>        unordered_map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; mp; <span class="hljs-comment">// 定义哈希表</span><br>        <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>; <span class="hljs-comment">// 存放最长长度</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>; j &lt; n; j++) <span class="hljs-comment">// 遍历fruits数组</span><br>        &#123;<br>            mp[fruits[j]]++; <span class="hljs-comment">// 某种水果种类次数 +1 </span><br>            <span class="hljs-keyword">while</span> (mp.<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">2</span>) <span class="hljs-comment">// 出现第三种水果</span><br>            &#123;<br>                mp[fruits[i]]--;<br>                <span class="hljs-keyword">if</span> (mp[fruits[i]] == <span class="hljs-number">0</span>)<br>                    mp.<span class="hljs-built_in">erase</span>(fruits[i]);<br>                i++; <span class="hljs-comment">// erase 直到剩两种水果</span><br>            &#125;<br>            ans = <span class="hljs-built_in">max</span>(ans, j - i + <span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Leetcode</category>
      
      <category>数组</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>滑动窗口</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>209.长度最小的子数组</title>
    <link href="/2022/06/22/209-%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84/"/>
    <url>/2022/06/22/209-%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode.cn/problems/minimum-size-subarray-sum/description/">力扣链接</a></p><p>给定一个含有 n 个正整数的数组和一个正整数 target 。</p><p>找出该数组中满足其和 ≥ target 的长度最小的 <strong>连续子数组</strong> [numsl, numsl+1, …, numsr-1, numsr] ，并返回其长度。如果不存在符合条件的子数组，返回 0 。</p><span id="more"></span><p>示例 1：</p><pre><code class="hljs">输入：target = 7, nums = [2,3,1,2,4,3]输出：2解释：子数组 [4,3] 是该条件下的长度最小的子数组。</code></pre><p>示例 2：</p><pre><code class="hljs">输入：target = 4, nums = [1,4,4]输出：1</code></pre><p>示例 3：</p><pre><code class="hljs">输入：target = 11, nums = [1,1,1,1,1,1,1,1]输出：0</code></pre><p>提示：</p><ul><li>1 &lt;= target &lt;= 109</li><li>1 &lt;= nums.length &lt;= 105</li><li>1 &lt;= nums[i] &lt;= 105</li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><blockquote><p>滑动窗口就是不断的调节子序列的起始位置和终止位置，从而得出我们要想的结果。<br>滑动窗口的精妙之处在于根据当前子序列和大小的情况，不断调节子序列的起始位置。从而将O(n^2)暴力解法降为O(n)。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">minSubArrayLen</span><span class="hljs-params">(<span class="hljs-type">int</span> target, vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>,s = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> result = INT32_MAX;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; nums.<span class="hljs-built_in">size</span>();i++)<br>        &#123;<br>            sum += nums[i];<br>            <span class="hljs-keyword">while</span> (sum &gt;= target)<br>            &#123;<br>                <span class="hljs-type">int</span> len = i-s+<span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">if</span> (result &gt; len) result = len;<br>                sum-=nums[s++];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> result == INT32_MAX ? <span class="hljs-number">0</span> : result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Leetcode</category>
      
      <category>数组</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>滑动窗口</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>3.无重复字符的最长子串</title>
    <link href="/2022/06/22/3-%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/"/>
    <url>/2022/06/22/3-%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode.cn/problems/longest-substring-without-repeating-characters/description/">力扣链接</a></p><p>给定一个字符串 s ，请你找出其中不含有重复字符的 <strong>最长子串</strong> 的长度。</p><span id="more"></span><p>示例 1:</p><pre><code class="hljs">输入: s = &quot;abcabcbb&quot;输出: 3 解释: 因为无重复字符的最长子串是 &quot;abc&quot;，所以其长度为 3。</code></pre><p>示例 2:</p><pre><code class="hljs">输入: s = &quot;bbbbb&quot;输出: 1解释: 因为无重复字符的最长子串是 &quot;b&quot;，所以其长度为 1。</code></pre><p>示例 3:</p><pre><code class="hljs">输入: s = &quot;pwwkew&quot;输出: 3解释: 因为无重复字符的最长子串是 &quot;wke&quot;，所以其长度为 3。    请注意，你的答案必须是 子串 的长度，&quot;pwke&quot; 是一个子序列，不是子串。</code></pre><p>提示：</p><ul><li>0 &lt;= s.length &lt;= 5 * 104</li><li>s 由英文字母、数字、符号和空格组成</li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><blockquote><p>哈希表是根据关键码的值而直接进行访问的数据结构。<br>std::unordered_map 底层实现为哈希表</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lengthOfLongestSubstring</span><span class="hljs-params">(string s)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> result = <span class="hljs-number">0</span>;<br>        unordered_map&lt;<span class="hljs-type">char</span>,<span class="hljs-type">int</span>&gt; m;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>; i &lt; s.<span class="hljs-built_in">size</span>(); i++)<br>        &#123;<br>            m[s[i]]++;<br>            <span class="hljs-keyword">while</span> (m[s[i]] &gt;= <span class="hljs-number">2</span>)<br>            &#123;<br>                m[s[j]]--;<br>                <span class="hljs-keyword">if</span> (m[s[j]] == <span class="hljs-number">0</span>)<br>                    m.<span class="hljs-built_in">erase</span>(s[j]);<br>                j++;<br>            &#125;<br>            result = result &lt; i - j + <span class="hljs-number">1</span> ? i - j + <span class="hljs-number">1</span> : result;<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Leetcode</category>
      
      <category>数组</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>滑动窗口</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于我的刷题路线</title>
    <link href="/2022/06/21/%E6%88%91%E7%9A%84%E5%88%B7%E9%A2%98%E8%B7%AF%E7%BA%BF/"/>
    <url>/2022/06/21/%E6%88%91%E7%9A%84%E5%88%B7%E9%A2%98%E8%B7%AF%E7%BA%BF/</url>
    
    <content type="html"><![CDATA[<h3 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h3><p>目前正在同步学习 <a href="https://www.acwing.com/activity/content/11/">AcWing算法基础课</a><br>以及练习 <a href="https://vjudge.net/article/371">kuangbin专题题目</a></p><h3 id="见解"><a href="#见解" class="headerlink" title="见解"></a>见解</h3><p>$vjudge$ 中的 $kuangbin$题目 序号排列个人认为不是十分合理的，建议按照 $ Sovled $ 栏目进行排序，会得到一个较为适合新上手刷题者的刷题路线。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>977.有序数组的平方</title>
    <link href="/2022/06/21/977-%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E5%B9%B3%E6%96%B9/"/>
    <url>/2022/06/21/977-%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E5%B9%B3%E6%96%B9/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode.cn/problems/squares-of-a-sorted-array/description/">力扣链接</a></p><p>给你一个按 <strong>非递减顺序</strong> 排序的整数数组 nums，返回 <strong>每个数字的平方</strong> 组成的新数组，要求也按 <strong>非递减顺序</strong> 排序。<span id="more"></span></p><p>示例 1：</p><pre><code class="hljs">输入：nums = [-4,-1,0,3,10]输出：[0,1,9,16,100]解释：平方后，数组变为 [16,1,0,9,100]排序后，数组变为 [0,1,9,16,100]</code></pre><p>示例 2：</p><pre><code class="hljs">输入：nums = [-7,-3,2,3,11]输出：[4,9,9,49,121]</code></pre><p>提示：</p><ul><li>1 &lt;= nums.length &lt;= 104</li><li>-104 &lt;= nums[i] &lt;= 104</li><li>nums 已按 非递减顺序 排序</li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><blockquote><p>思路：整数数组明确表明为非递减顺序，而我们从前或从后取都是取得绝对值较大之数，所以要进行倒序操作（我是使用倒序），对比头尾平方大小进行倒序排序。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">sortedSquares</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-type">int</span> l = <span class="hljs-number">0</span>,r = nums.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">square</span><span class="hljs-params">(nums.size())</span></span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = nums.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;i &gt; <span class="hljs-number">-1</span>;i--)<br>        &#123;<br>            <span class="hljs-type">int</span> lsq = nums[l]*nums[l];<br>            <span class="hljs-type">int</span> rsq = nums[r]*nums[r];<br>            <span class="hljs-keyword">if</span> (lsq &lt; rsq)<br>            &#123;<br>                square[i] = rsq;<br>                r--;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (lsq &gt; rsq)<br>            &#123;<br>                square[i] = lsq;<br>                l++;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (lsq == rsq)<br>            &#123;<br>                square[i] = lsq;<br>                l++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> square;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Leetcode</category>
      
      <category>数组</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>双指针法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>844.比较含退格的字符串</title>
    <link href="/2022/06/21/844-%E6%AF%94%E8%BE%83%E5%90%AB%E9%80%80%E6%A0%BC%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <url>/2022/06/21/844-%E6%AF%94%E8%BE%83%E5%90%AB%E9%80%80%E6%A0%BC%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode.cn/problems/backspace-string-compare/description/">力扣链接</a></p><p>给定 s 和 t 两个字符串，当它们分别被输入到空白的文本编辑器后，如果两者相等，返回 true 。# 代表退格字符。</p><span id="more"></span><p><strong>注意</strong>：如果对空文本输入退格字符，文本继续为空。</p><p>示例 1：</p><pre><code class="hljs">输入：s = &quot;ab#c&quot;, t = &quot;ad#c&quot;输出：true解释：s 和 t 都会变成 &quot;ac&quot;。</code></pre><p>示例 2：</p><pre><code class="hljs">输入：s = &quot;ab##&quot;, t = &quot;c#d#&quot;输出：true解释：s 和 t 都会变成 &quot;&quot;。</code></pre><p>示例 3：</p><pre><code class="hljs">输入：s = &quot;a#c&quot;, t = &quot;b&quot;输出：false解释：s 会变成 &quot;c&quot;，但 t 仍然是 &quot;b&quot;。</code></pre><p>提示：</p><ul><li>1 &lt;= s.length, t.length &lt;= 200</li><li>s 和 t 只含有小写字母以及字符 ‘#’</li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><blockquote><p>思路：通过 s– 实现退格操作即可。</p></blockquote><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    bool backspaceCompare(string s, string t) &#123;<br>        <span class="hljs-keyword">return</span> back(s) == back(t);<br>    &#125;<br>    string back(string <span class="hljs-built_in">str</span>)<br>    &#123;<br>        <span class="hljs-built_in">int</span> s = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> f = <span class="hljs-number">0</span>;f &lt; <span class="hljs-built_in">str</span>.size();f++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">str</span>[f] != <span class="hljs-string">&#x27;#&#x27;</span>)<br>                <span class="hljs-built_in">str</span>[s++] = <span class="hljs-built_in">str</span>[f];<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">str</span>[f] == <span class="hljs-string">&#x27;#&#x27;</span>&amp;&amp; s &gt; <span class="hljs-number">0</span>)<br>                s--;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">str</span>.substr(<span class="hljs-number">0</span>,s);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Leetcode</category>
      
      <category>数组</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>双指针法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>283.移动零</title>
    <link href="/2022/06/21/283-%E7%A7%BB%E5%8A%A8%E9%9B%B6/"/>
    <url>/2022/06/21/283-%E7%A7%BB%E5%8A%A8%E9%9B%B6/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode.cn/problems/move-zeroes/description/">力扣链接</a></p><p>给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。</p><span id="more"></span><p><strong>请注意</strong> ，必须在不复制数组的情况下原地对数组进行操作。</p><p>示例 1:</p><pre><code class="hljs">输入: nums = [0,1,0,3,12]输出: [1,3,12,0,0]</code></pre><p>示例 2:</p><pre><code class="hljs">输入: nums = [0]输出: [0]</code></pre><p><strong>提示</strong>:</p><ul><li>1 &lt;= nums.length &lt;= 104</li><li>-231 &lt;= nums[i] &lt;= 231 - 1</li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><blockquote><p>本人思路：将快指针非零数与慢指针数交换，即可将零放置末尾。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">moveZeroes</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (nums.<span class="hljs-built_in">empty</span>()) <span class="hljs-keyword">return</span>;<br>        <span class="hljs-type">int</span> s = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> f = <span class="hljs-number">0</span>; f &lt; nums.<span class="hljs-built_in">size</span>();f++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (nums[f] != <span class="hljs-number">0</span>)<br>            &#123;<br>                <span class="hljs-built_in">swap</span>(nums[f],nums[s++]);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Leetcode</category>
      
      <category>数组</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>双指针法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>26.删除有序数组中的重复项</title>
    <link href="/2022/06/21/26-%E5%88%A0%E9%99%A4%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9/"/>
    <url>/2022/06/21/26-%E5%88%A0%E9%99%A4%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode.cn/problems/remove-duplicates-from-sorted-array/">力扣链接</a></p><p>给你一个 <strong>升序排列</strong> 的数组 <code>nums</code> ，请你 <strong>原地</strong> 删除重复出现的元素，使每个元素 <strong>只出现一次</strong> ，返回删除后数组的新长度。元素的 <strong>相对顺序</strong> 应该保持 <strong>一致</strong> 。</p><span id="more"></span><p>由于在某些语言中不能改变数组的长度，所以必须将结果放在数组<code>nums</code>的第一部分。更规范地说，如果在删除重复项之后有 <code>k</code> 个元素，那么 <code>nums</code> 的前 <code>k</code> 个元素应该保存最终结果。</p><p>将最终结果插入 <code>nums</code> 的前 <code>k</code> 个位置后返回 <code>k</code> 。</p><p>不要使用额外的空间，你必须在 <strong>原地</strong> <strong>修改输入数组</strong> 并在使用 O(1) 额外空间的条件下完成。</p><p>*<em>判题标准</em>:</p><p>系统会用下面的代码来测试你的题解:</p><pre><code class="hljs">int[] nums = [...]; // 输入数组int[] expectedNums = [...]; // 长度正确的期望答案int k = removeDuplicates(nums); // 调用assert k == expectedNums.length;for (int i = 0; i &lt; k; i++) &#123;    assert nums[i] == expectedNums[i];&#125;</code></pre><p>如果所有断言都通过，那么您的题解将被 <strong>通过</strong>    。</p><p>示例 1：</p><pre><code class="hljs">输入：nums = [1,1,2]输出：2, nums = [1,2,_]解释：函数应该返回新的长度 2 ，并且原数组 nums 的前两个元素被修改为 1, 2 。不需要考虑数组中超出新长度后面的元素。</code></pre><p>示例 2：</p><pre><code class="hljs">输入：nums = [0,0,1,1,1,2,2,3,3,4]输出：5, nums = [0,1,2,3,4]解释：函数应该返回新的长度 5 ， 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4 。不需要考虑数组中超出新长度后面的元素。</code></pre><p>提示：</p><ul><li>0 &lt;= nums.length &lt;= 3 * 104</li><li>-104 &lt;= nums[i] &lt;= 104</li><li>nums 已按 升序 排列</li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">removeDuplicates</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-type">int</span> s = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> f = <span class="hljs-number">0</span>; f &lt; nums.<span class="hljs-built_in">size</span>();f++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (nums[f] != nums[s])<br>            &#123;<br>                s+=<span class="hljs-number">1</span>;<br>                nums[s]=nums[f];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> s + <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Leetcode</category>
      
      <category>数组</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>双指针法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>27.移除元素</title>
    <link href="/2022/06/21/27-%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/"/>
    <url>/2022/06/21/27-%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode.cn/problems/remove-element/">力扣链接</a></p><p>给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。</p><span id="more"></span><p>不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。</p><p>元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p><p><strong>说明</strong>:</p><p>为什么返回数值是整数，但输出的答案是数组呢?</p><p>请注意，输入数组是以「<strong>引用</strong>」方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。</p><p>你可以想象内部操作如下:</p><pre><code class="hljs">// nums 是以“引用”方式传递的。也就是说，不对实参作任何拷贝int len = removeElement(nums, val);// 在函数里修改输入数组对于调用者是可见的。// 根据你的函数返回的长度, 它会打印出数组中 该长度范围内 的所有元素。for (int i = 0; i &lt; len; i++) &#123;    print(nums[i]);&#125;</code></pre><p>示例 1：</p><pre><code class="hljs">输入：nums = [3,2,2,3], val = 3输出：2, nums = [2,2]解释：函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。你不需要考虑数组中超出新长度后面的元素。例如，函数返回的新长度为 2 ，而 nums = [2,2,3,3] 或 nums = [2,2,0,0]，也会被视作正确答案。</code></pre><p>示例 2：</p><pre><code class="hljs">输入：nums = [0,1,2,2,3,0,4,2], val = 2输出：5, nums = [0,1,4,0,3]解释：函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。注意这五个元素可为任意顺序。你不需要考虑数组中超出新长度后面的元素。</code></pre><p>提示：</p><ul><li>0 &lt;= nums.length &lt;= 100</li><li>0 &lt;= nums[i] &lt;= 50</li><li>0 &lt;= val &lt;= 100</li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><blockquote><p>双指针法（快慢指针法）： 通过一个快指针和慢指针在一个for循环下完成两个for循环的工作。</p></blockquote><h4 id="定义快慢指针"><a href="#定义快慢指针" class="headerlink" title="定义快慢指针"></a>定义快慢指针</h4><ul><li>快指针：寻找新数组的元素 ，新数组就是不含有目标元素的数组</li><li>慢指针：指向更新 新数组下标的位置</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">removeElement</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> val)</span> </span>&#123;<br>        <span class="hljs-type">int</span> s = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> f = <span class="hljs-number">0</span>;f &lt; nums.<span class="hljs-built_in">size</span>();f++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (nums[f] != val)<br>            &#123;<br>                nums[s++] = nums[f];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> s;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Leetcode</category>
      
      <category>数组</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>双指针法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>367.有效的完全平方数</title>
    <link href="/2022/06/21/367-%E6%9C%89%E6%95%88%E7%9A%84%E5%AE%8C%E5%85%A8%E5%B9%B3%E6%96%B9%E6%95%B0/"/>
    <url>/2022/06/21/367-%E6%9C%89%E6%95%88%E7%9A%84%E5%AE%8C%E5%85%A8%E5%B9%B3%E6%96%B9%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode.cn/problems/valid-perfect-square/">力扣链接</a></p><p>给定一个 <strong>正整数</strong> <code>num</code> ，编写一个函数，如果 <code>num</code> 是一个完全平方数，则返回 <code>true</code> ，否则返回 <code>false</code> 。</p><span id="more"></span><p><strong>进阶</strong>：<strong>不要</strong> 使用任何内置的库函数，如  sqrt 。</p><p>示例 1：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">输入：num = 16<br>输出：<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">输入：num = 14<br>输出：<span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p>提示：</p><ul><li>1 &lt;= num &lt;= 2^31 - 1</li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><h4 id="二分法"><a href="#二分法" class="headerlink" title="二分法"></a>二分法</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isPerfectSquare</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">long</span> l = <span class="hljs-number">1</span>, r = num / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">while</span> (l &lt; r)<br>        &#123;<br>            <span class="hljs-type">long</span> m = (l + r + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span> (m * m &lt; num)<br>                l = m + <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (m * m &gt; num)<br>                r = m - <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (m * m == num)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (l * l == num)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>         <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="数学法"><a href="#数学法" class="headerlink" title="数学法"></a>数学法</h4><blockquote><p>我们通过枚举平方数1、4、9、16、25可以发现，这些数可以由1,1+3,1+3+5,1+3+5+7,1+3+5+7+9所组成，便产生以下解法：</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> <br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isPerfectSquare</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> n = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span>(num &gt; <span class="hljs-number">0</span>) <br>        &#123;<br>            num -= n;<br>            n += <span class="hljs-number">2</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> num == <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Leetcode</category>
      
      <category>数组</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>数学</tag>
      
      <tag>二分法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>69.x的平方根</title>
    <link href="/2022/06/21/69-x%E7%9A%84%E5%B9%B3%E6%96%B9%E6%A0%B9/"/>
    <url>/2022/06/21/69-x%E7%9A%84%E5%B9%B3%E6%96%B9%E6%A0%B9/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode.cn/problems/sqrtx/">力扣链接</a></p><p>给你一个非负整数 <code>x</code> ，计算并返回 <code>x</code> 的 算术平方根 。</p><span id="more"></span><p>由于返回类型是整数，结果只保留 整数部分 ，小数部分将被 舍去 。</p><p><strong>注意</strong>：不允许使用任何内置指数函数和算符，例如 <code>pow(x, 0.5)</code> 或者 <code>x ** 0.5</code> 。</p><p>示例 1：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">输入：x = 4<br>输出：2<br></code></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">输入：x = 8<br>输出：2<br>解释：8 的算术平方根是 2.82842..., 由于返回类型是整数，小数部分将被舍去。<br></code></pre></td></tr></table></figure><p>提示：</p><ul><li>0 &lt;= x &lt;= 231 - 1</li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">mySqrt</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (x == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> (x == <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> l = <span class="hljs-number">0</span>, r = x / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">while</span> (l &lt; r)<br>        &#123;<br>            <span class="hljs-type">int</span> m = (l + r + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span> (x / m &lt; m)<br>            &#123;<br>                r = m - <span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                l = m;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> l;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Leetcode</category>
      
      <category>数组</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>数学</tag>
      
      <tag>二分法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>34.在排序数组中查找元素的第一个和最后一个位置</title>
    <link href="/2022/06/20/34-%E5%9C%A8%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E6%9F%A5%E6%89%BE%E5%85%83%E7%B4%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%92%8C%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E4%BD%8D%E7%BD%AE/"/>
    <url>/2022/06/20/34-%E5%9C%A8%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E6%9F%A5%E6%89%BE%E5%85%83%E7%B4%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%92%8C%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E4%BD%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/">力扣链接</a></p><p>给你一个按照非递减顺序排列的整数数组 <code>nums</code>，和一个目标值 <code>target</code>。请你找出给定目标值在数组中的开始位置和结束位置。</p><span id="more"></span><p>如果数组中不存在目标值 <code>target</code>，返回 <code>[-1, -1]</code>。</p><p>你必须设计并实现时间复杂度为 <code>O(log n)</code> 的算法解决此问题。</p><p>示例 1：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">输入：nums = [5,7,7,8,8,10], target = 8<br>输出：[3,4]<br></code></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">输入：nums = [5,7,7,8,8,10], target = 6<br>输出：[-1,-1]<br></code></pre></td></tr></table></figure><p>示例 3：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">输入：nums = [], target = 0<br>输出：[-1,-1]<br></code></pre></td></tr></table></figure><p>提示：</p><ul><li>0 &lt;= nums.length &lt;= 105</li><li>-109 &lt;= nums[i] &lt;= 109</li><li>nums 是一个非递减数组</li><li>-109 &lt;= target &lt;= 109</li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><blockquote><p>提示：题目中要求我们使用时间复杂度为O(log n)的算法解决，说明我们此题必须使用二分法或比其效率更优方法解决，因此抛弃暴力解法。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">searchRange</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> target)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(nums.<span class="hljs-built_in">empty</span>()) <span class="hljs-keyword">return</span> &#123;<span class="hljs-number">-1</span>,<span class="hljs-number">-1</span>&#125;;<br>        <span class="hljs-type">int</span> l = <span class="hljs-number">0</span>, r = nums.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; <span class="hljs-comment">//二分范围</span><br>        <span class="hljs-keyword">while</span>(l &lt; r)        <span class="hljs-comment">//查找元素的开始位置</span><br>        &#123;<br>            <span class="hljs-type">int</span> mid = (l + r)/<span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span>(nums[mid] &gt;= target) r = mid;<br>            <span class="hljs-keyword">else</span> l = mid + <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>( nums[r] != target) <span class="hljs-keyword">return</span> &#123;<span class="hljs-number">-1</span>,<span class="hljs-number">-1</span>&#125;;  <span class="hljs-comment">//查找失败</span><br>        <span class="hljs-type">int</span> L = r;<br>        l = <span class="hljs-number">0</span>, r = nums.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;     <span class="hljs-comment">//二分范围</span><br>        <span class="hljs-keyword">while</span>(l &lt; r)                   <span class="hljs-comment">//查找元素的结束位置</span><br>        &#123;<br>            <span class="hljs-type">int</span> mid = (l + r + <span class="hljs-number">1</span>)/<span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span>(nums[mid] &lt;= target ) l = mid;<br>            <span class="hljs-keyword">else</span> r = mid - <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> &#123;L,r&#125;;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Leetcode</category>
      
      <category>数组</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>二分法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>35.搜索插入位置</title>
    <link href="/2022/06/20/35-%E6%90%9C%E7%B4%A2%E6%8F%92%E5%85%A5%E4%BD%8D%E7%BD%AE/"/>
    <url>/2022/06/20/35-%E6%90%9C%E7%B4%A2%E6%8F%92%E5%85%A5%E4%BD%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode.cn/problems/search-insert-position/">力扣链接</a></p><p>给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。</p><span id="more"></span><p>请必须使用时间复杂度为 O(log n) 的算法。</p><p>示例 1:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">输入: nums = [1,3,5,6], target = 5<br>输出: 2<br></code></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">输入: nums = [1,3,5,6], target = 2<br>输出: 13<br></code></pre></td></tr></table></figure><p>示例 3:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">输入: nums = [1,3,5,6], target = 7<br>输出: 4<br></code></pre></td></tr></table></figure><p>提示:</p><ul><li>1 &lt;= nums.length &lt;= 104</li><li>-104 &lt;= nums[i] &lt;= 104</li><li>nums 为 无重复元素 的 升序 排列数组</li><li>-104 &lt;= target &lt;= 104</li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><pre><code class="hljs">就是704的换名题，将return值更换为最后无法找到target的最终值，即right值即可。</code></pre><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">searchInsert</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;nums, <span class="hljs-type">int</span> target)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> l = <span class="hljs-number">0</span>, r = nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">while</span> (l &lt; r)<br>        &#123;<br>            <span class="hljs-type">int</span> m = (l + r) / <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span> (nums[m] &lt; target)<br>                l = m + <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[m] &gt; target)<br>                r = m;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[m] == target)<br>                <span class="hljs-keyword">return</span> m;<br>        &#125;<br>        <span class="hljs-keyword">return</span> r;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Leetcode</category>
      
      <category>数组</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>二分法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>704. 二分查找.</title>
    <link href="/2022/06/20/704-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    <url>/2022/06/20/704-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode.cn/problems/binary-search/">力扣链接</a></p><p>给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target  ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。</p><span id="more"></span><p>示例 1:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">输入: nums = [-1,0,3,5,9,12], target = 9<br>输出: 4<br>解释: 9 出现在 nums 中并且下标为 4<br></code></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">输入: nums = [-1,0,3,5,9,12], target = 2<br>输出: -1<br>解释: 2 不存在 nums 中因此返回 -1<br></code></pre></td></tr></table></figure><p>提示：</p><ul><li>你可以假设 nums 中的所有元素是不重复的。</li><li>n 将在 [1, 10000]之间。</li><li>nums 的每个元素都将在 [-9999, 9999]之间。</li></ul><h3 id="二分法思路"><a href="#二分法思路" class="headerlink" title="二分法思路"></a>二分法思路</h3><h4 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h4><blockquote><p>数组为有序数组<br>数组中无重复元素</p></blockquote><h4 id="写法一"><a href="#写法一" class="headerlink" title="写法一"></a>写法一</h4><ul><li>左闭右闭</li><li>[left,right]</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>            <span class="hljs-keyword">public</span>:<br>                <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">search</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> target)</span> </span>&#123;<br>                    <span class="hljs-type">int</span> left = <span class="hljs-number">0</span>;<br>                    <span class="hljs-type">int</span> right = nums.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; <span class="hljs-comment">// 定义target在左闭右闭的区间里，[left, right]</span><br>                    <span class="hljs-keyword">while</span> (left &lt;= right) &#123; <span class="hljs-comment">// 当left==right，区间[left, right]依然有效，所以用 &lt;=</span><br>                        <span class="hljs-type">int</span> middle = left + ((right - left) / <span class="hljs-number">2</span>);<span class="hljs-comment">// 防止溢出 等同于(left + right)/2</span><br>                        <span class="hljs-keyword">if</span> (nums[middle] &gt; target) &#123;<br>                            right = middle - <span class="hljs-number">1</span>; <span class="hljs-comment">// target 在左区间，所以[left, middle - 1]</span><br>                        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[middle] &lt; target) &#123;<br>                            left = middle + <span class="hljs-number">1</span>; <span class="hljs-comment">// target 在右区间，所以[middle + 1, right]</span><br>                        &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// nums[middle] == target</span><br>                            <span class="hljs-keyword">return</span> middle; <span class="hljs-comment">// 数组中找到目标值，直接返回下标</span><br>                        &#125;<br>                    &#125;<br>                    <span class="hljs-comment">// 未找到目标值</span><br>                    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>                &#125;<br>            &#125;;<br></code></pre></td></tr></table></figure><h4 id="写法二"><a href="#写法二" class="headerlink" title="写法二"></a>写法二</h4><ul><li>左闭右开</li><li>[left,right)</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>            <span class="hljs-keyword">public</span>:<br>                <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">search</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> target)</span> </span>&#123;<br>                    <span class="hljs-type">int</span> left = <span class="hljs-number">0</span>;<br>                    <span class="hljs-type">int</span> right = nums.<span class="hljs-built_in">size</span>(); <span class="hljs-comment">// 定义target在左闭右开的区间里，即：[left, right)</span><br>                    <span class="hljs-keyword">while</span> (left &lt; right) &#123; <span class="hljs-comment">// left==right时，在[left, right)是无效的空间，所以使用 &lt;</span><br>                        <span class="hljs-type">int</span> middle = left + ((right - left) &gt;&gt; <span class="hljs-number">1</span>);<br>                        <span class="hljs-keyword">if</span> (nums[middle] &gt; target) &#123;<br>                            right = middle; <span class="hljs-comment">// target 在左区间，在[left, middle)中</span><br>                        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[middle] &lt; target) &#123;<br>                            left = middle + <span class="hljs-number">1</span>; <span class="hljs-comment">// target 在右区间，在[middle + 1, right)中</span><br>                        &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// nums[middle] == target</span><br>                            <span class="hljs-keyword">return</span> middle; <span class="hljs-comment">// 数组中找到目标值，直接返回下标</span><br>                        &#125;<br>                    &#125;<br>                    <span class="hljs-comment">// 未找到目标值</span><br>                    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>                &#125;<br>            &#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Leetcode</category>
      
      <category>数组</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>二分法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo -- 快速安装</title>
    <link href="/2022/06/18/hello-world/"/>
    <url>/2022/06/18/hello-world/</url>
    
    <content type="html"><![CDATA[<h2 id="什么是-Hexo？"><a href="#什么是-Hexo？" class="headerlink" title="什么是 Hexo？"></a>什么是 Hexo？</h2><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。<span id="more"></span></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="准备步骤"><a href="#准备步骤" class="headerlink" title="准备步骤"></a>准备步骤</h3><ol><li> 安装 <a href="https://git-scm.com/download/win">Git</a> (如果没有基础安装的时候直接 Next)</li><li> 安装 <a href="https://nodejs.org/en/">Node.js</a> (Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本)</li></ol><p>&emsp;&emsp;首先我们先建一个名为 hexo 文件夹，打开文件夹右键会看到下图的 git 工具，我们用 Git Bash 命令工具，来使用 Git。</p><h3 id="正式安装-Hexo"><a href="#正式安装-Hexo" class="headerlink" title="正式安装 Hexo:"></a>正式安装 Hexo:</h3><ol><li> 首先使用 npm 安装 Hexo</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g hexo-cli<br></code></pre></td></tr></table></figure><ol start="2"><li> 先看一下自己安装的 hexo 的版本，再去安装下一步</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo -v<br></code></pre></td></tr></table></figure><ol start="3"><li> 接下来输入命令初始化 hexo</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init Blog   //这个Blog起什么名字都可，这里为了方便所以使用Blog<br></code></pre></td></tr></table></figure><ol start="4"><li> 然后用下面的命令，进入刚刚新建的文件夹</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> Blog<br></code></pre></td></tr></table></figure><ol start="5"><li>执行下面的命令，创建项目</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install<br></code></pre></td></tr></table></figure><p>新建完成后，指定文件夹的目录如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs CONTENT">├── _config.yml<br>├── package.json<br>├── scaffolds<br>├── source<br>|   ├── _drafts (可能没有)<br>|   └── _posts<br>└── themes<br></code></pre></td></tr></table></figure><p>然后执行以命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo g<br></code></pre></td></tr></table></figure><p>接下来执行下面的下面的命令.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo server  或者  hexo s(这是前一句的缩写)<br></code></pre></td></tr></table></figure><p>在浏览器中输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs LINK">http://localhost:4000/<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
